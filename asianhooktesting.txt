local Signal = loadstring(game:HttpGet("https://raw.githubusercontent.com/Quenty/NevermoreEngine/version2/Modules/Shared/Events/Signal.lua"))()
--local Api = loadstring(game:HttpGet("https://pastebin.com/raw/5L3wV43u"))()
local ConfigSave = Signal.new("ConfigSave") 
local ConfigLoad = Signal.new("ConfigLoad")
local txt = game:GetService("TextService") 
local TweenService = game:GetService("TweenService") 
function library:Tween(...) TweenService:Create(...):Play() end 
local cfglocation = "asian_config/" 
makefolder("asian_config") 

-- caching 
local Vec2 = Vector2.new 
local Vec3 = Vector3.new 
local CF = CFrame.new 
local INST = Instance.new 
local COL3 = Color3.new 
local COL3RGB = Color3.fromRGB 
local COL3HSV = Color3.fromHSV 
local CLAMP = math.clamp 
local DEG = math.deg 
local FLOOR = math.floor 
local ACOS = math.acos 
local RANDOM = math.random 
local ATAN2 = math.atan2 
local HUGE = math.huge 
local RAD = math.rad 
local MIN = math.min 
local POW = math.pow 
local UDIM2 = UDim2.new 
local CFAngles = CFrame.Angles 

local FIND = string.find 
local LEN = string.len 
local SUB = string.sub 
local GSUB = string.gsub 
local RAY = Ray.new 

local INSERT = table.insert 
local TBLFIND = table.find 
local TBLREMOVE = table.remove 
local TBLSORT = table.sort 


local UserInputService = game:GetService("UserInputService") 
local ReplicatedStorage = game:GetService("ReplicatedStorage") 
local RunService = game:GetService("RunService") 
local Lighting = game:GetService("Lighting") 
local Players = game:GetService("Players") 
local LocalPlayer = Players.LocalPlayer 
local PlayerGui = LocalPlayer.PlayerGui 
local Mouse = LocalPlayer:GetMouse() 
local Camera = workspace.CurrentCamera 
local ClientScript = LocalPlayer.PlayerGui.Client 
local Client = getsenv(ClientScript) 

repeat RunService.RenderStepped:Wait() until game:IsLoaded() 

local Crosshairs = PlayerGui.GUI.Crosshairs 
local Crosshair = PlayerGui.GUI.Crosshairs.Crosshair 
local oldcreatebullethole = Client.createbullethole 
local LGlove, RGlove, LSleeve, RSleeve, RArm, LArm 
local WeaponObj = {} 
local SelfObj = {} 
local Viewmodels =  ReplicatedStorage.Viewmodels 
local Weapons =  ReplicatedStorage.Weapons 
local ViewmodelOffset = CF(0,0,0) 
local Smokes = {} 
local Mollies = {} 
local RayIgnore = workspace.Ray_Ignore 
local RageTarget 
local GetIcon = require(game.ReplicatedStorage.GetIcon) 
local BodyVelocity = INST("BodyVelocity") 
BodyVelocity.MaxForce = Vec3(HUGE, 0, HUGE) 
local Collision = {Camera, workspace.Ray_Ignore, workspace.Debris} 
local FakelagFolder = INST("Folder", workspace) 
FakelagFolder.Name = "Fakelag" 
local FakeAnim = INST("Animation", workspace) 
FakeAnim.AnimationId = "rbxassetid://0" 
local Gloves = ReplicatedStorage.Gloves 
if Gloves:FindFirstChild("ImageLabel") then 
	Gloves.ImageLabel:Destroy() 
end 
local GloveModels = Gloves.Models 
local Multipliers = { 
	["Head"] = 4, 
	["FakeHead"] = 4, 
	["HeadHB"] = 4, 
	["UpperTorso"] = 1, 
	["LowerTorso"] = 1.25, 
	["LeftUpperArm"] = 1, 
	["LeftLowerArm"] = 1, 
	["LeftHand"] = 1, 
	["RightUpperArm"] = 1, 
	["RightLowerArm"] = 1, 
	["RightHand"] = 1, 
	["LeftUpperLeg"] = 0.75, 
	["LeftLowerLeg"] = 0.75, 
	["LeftFoot"] = 0.75, 
	["RightUpperLeg"] = 0.75, 
	["RightLowerLeg"] = 0.75, 
	["RightFoot"] = 0.75, 
} 
local ChamItems = {} 
local Skyboxes = { 
	["nebula"] = { 
		SkyboxLf = "rbxassetid://159454286", 
		SkyboxBk = "rbxassetid://159454299", 
		SkyboxDn = "rbxassetid://159454296", 
		SkyboxFt = "rbxassetid://159454293", 
		SkyboxLf = "rbxassetid://159454286", 
		SkyboxRt = "rbxassetid://159454300", 
		SkyboxUp = "rbxassetid://159454288", 
	}, 
	["minecraft"] = { 
		SkyboxLf = "rbxassetid://3822391866", 
		SkyboxBk = "rbxassetid://3822390508", 
		SkyboxDn = "rbxassetid://3822392871", 
		SkyboxFt = "rbxassetid://3822391392", 
		SkyboxLf = "rbxassetid://3822391866", 
		SkyboxRt = "rbxassetid://3822390968", 
		SkyboxUp = "rbxassetid://3822392413", 
	}, 
	["vaporwave"] = { 
		SkyboxLf = "rbxassetid://1417494402", 
		SkyboxBk = "rbxassetid://1417494030", 
		SkyboxDn = "rbxassetid://1417494146", 
		SkyboxFt = "rbxassetid://1417494253", 
		SkyboxLf = "rbxassetid://1417494402", 
		SkyboxRt = "rbxassetid://1417494499", 
		SkyboxUp = "rbxassetid://1417494643", 
	}, 
	["clouds"] = { 
		SkyboxLf = "rbxassetid://570557620", 
		SkyboxBk = "rbxassetid://570557514", 
		SkyboxDn = "rbxassetid://570557775", 
		SkyboxFt = "rbxassetid://570557559", 
		SkyboxLf = "rbxassetid://570557620", 
		SkyboxRt = "rbxassetid://570557672", 
		SkyboxUp = "rbxassetid://570557727", 
	}, 
	["twilight"] = { 
		SkyboxLf = "rbxassetid://264909758", 
		SkyboxBk = "rbxassetid://264908339", 
		SkyboxDn = "rbxassetid://264907909", 
		SkyboxFt = "rbxassetid://264909420", 
		SkyboxLf = "rbxassetid://264909758", 
		SkyboxRt = "rbxassetid://264908886", 
		SkyboxUp = "rbxassetid://264907379", 
	}, 
} 

local NewScope 
do 
	local ScreenGui = INST("ScreenGui") 
	local Frame = INST("Frame") 
	local Frame_2 = INST("Frame") 

	ScreenGui.Enabled = false 
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global 
	ScreenGui.IgnoreGuiInset = true 

	Frame.Parent = ScreenGui 
	Frame.BackgroundColor3 = COL3RGB(0, 0, 0) 
	Frame.BorderSizePixel = 1 
	Frame.Position = UDIM2(0, 0, 0.5, 0) 
	Frame.Size = UDIM2(1, 0, 0, 1) 

	Frame_2.Parent = ScreenGui 
	Frame_2.BackgroundColor3 = COL3RGB(0, 0, 0) 
	Frame_2.BorderSizePixel = 1 
	Frame_2.Position = UDIM2(0.5, 0, 0, 0) 
	Frame_2.Size = UDIM2(0, 1, 1, 0) 

	ScreenGui.Parent = game.CoreGui 

	NewScope = ScreenGui 
end 
local oldSkybox 

local function VectorRGB(RGB) 
	return Vec3(RGB.R, RGB.G, RGB.B) 
end 
local function new(name, prop) 
	local obj = INST(name) 
	for i,v in pairs(prop) do 
		if i ~= "Parent" then 
			obj[i] = v 
		end 
	end 
	if prop["Parent"] ~= nil then 
		obj.Parent = prop["Parent"] 
	end 
end 
		local function UpdateAccessory(Accessory)      
			Accessory.Material = values.visuals.effects["accessory material"].Dropdown == "Smooth" and "SmoothPlastic" or "ForceField"      
			Accessory.Mesh.VertexColor = VectorRGB(values.visuals.effects["accessory chams"].Color)      
			Accessory.Color = values.visuals.effects["accessory chams"].Color      
			Accessory.Transparency = values.visuals.effects["accessory chams"].Transparency      
			if values.visuals.effects["accessory material"].Dropdown ~= "ForceField" then      
				Accessory.Mesh.TextureId = ""      
			else      
				Accessory.Mesh.TextureId = Accessory.StringValue.Value      
			end      
		end      
		local function ReverseAccessory(Accessory)      
			Accessory.Material = "SmoothPlastic"      
			Accessory.Mesh.VertexColor = Vec3(1,1,1)      
			Accessory.Mesh.TextureId = Accessory.StringValue.Value      
			Accessory.Transparency = 0      
		end      
local function UpdateWeapon(obj) 
				local selected = values.visuals.effects["weapon material"].Dropdown
                if obj:IsA("MeshPart") and selected == "ForceField" then 
				    if values.visuals.effects["forcefield type"].Dropdown == "normal" then
				        obj.TextureID = ""
				    elseif values.visuals.effects["forcefield type"].Dropdown == "web" then
						obj.TextureID = "rbxassetid://301464986"
					elseif values.visuals.effects["forcefield type"].Dropdown == "swirl" then
						obj.TextureID = "rbxassetid://8133639623"
					elseif values.visuals.effects["forcefield type"].Dropdown == "checkers" then
						obj.TextureID = "rbxassetid://5790215150"		
					elseif values.visuals.effects["forcefield type"].Dropdown == "candy cane" then
						obj.TextureID = "rbxassetid://6853532738"	
					elseif values.visuals.effects["forcefield type"].Dropdown == "player ff texture" then
						obj.TextureID = "rbxassetid://4494641460"
					elseif values.visuals.effects["forcefield type"].Dropdown == "shield forcefield" then
						obj.TextureID = "rbxassetid://361073795"
					elseif values.visuals.effects["forcefield type"].Dropdown == "dots" then
						obj.TextureID = "rbxassetid://5830615971"	
					elseif values.visuals.effects["forcefield type"].Dropdown == "scanning (suggested by blast)" then
						obj.TextureID = "rbxassetid://5843010904"			
					elseif values.visuals.effects["forcefield type"].Dropdown == "bubbles (suggested by blast)" then
						obj.TextureID = "rbxassetid://1461576423"								
					end
				else 
					if selected == "Smooth" or selected == "Glass" or selected == "Flat" then obj.TextureID = "" end
				end
				if obj:IsA("Part") and obj:FindFirstChild("Mesh") and not obj:IsA("BlockMesh") then
					obj.Mesh.VertexColor = VectorRGB(values.visuals.effects["weapon chams"].Color)
					if selected == "Smooth" or selected == "Glass" then
						obj.Mesh.TextureId = ""
					else
						pcall(function()
							obj.Mesh.TextureId = obj.Mesh.OriginalTexture.Value
							obj.Mesh.TextureID = obj.Mesh.OriginalTexture.Value
						end)
					end
				end
				obj.Color = values.visuals.effects["weapon chams"].Color
				obj.Material = selected == "Smooth" and "SmoothPlastic" or selected == "Flat" and "Neon" or selected == "ForceField" and "ForceField" or "Glass"
				obj.Reflectance = values.visuals.effects["reflectance"].Slider/10
				obj.Transparency = values.visuals.effects["weapon chams"].Transparency
			end
local Skins = ReplicatedStorage.Skins 
local function MapSkin(Gun, Skin, CustomSkin) 
	if CustomSkin ~= nil then 
		for _,Data in pairs(CustomSkin) do 
			local Obj = Camera.Arms:FindFirstChild(Data.Name) 
			if Obj ~= nil and Obj.Transparency ~= 1 then 
				Obj.TextureId = Data.Value 
			end 
		end 
	else 
		local SkinData = Skins:FindFirstChild(Gun):FindFirstChild(Skin) 
		if not SkinData:FindFirstChild("Animated") then 
			for _,Data in pairs(SkinData:GetChildren()) do 
				local Obj = Camera.Arms:FindFirstChild(Data.Name) 
				if Obj ~= nil and Obj.Transparency ~= 1 then 
					if Obj:FindFirstChild("Mesh") then 
						Obj.Mesh.TextureId = v.Value 
					elseif not Obj:FindFirstChild("Mesh") then 
						Obj.TextureID = Data.Value 
					end 
				end 
			end 
		end 
	end 
end 
local function ChangeCharacter(NewCharacter) 
	for _,Part in pairs (LocalPlayer.Character:GetChildren()) do 
		if Part:IsA("Accessory") then 
			Part:Destroy() 
		end 
		if Part:IsA("BasePart") then 
			if NewCharacter:FindFirstChild(Part.Name) then 
				Part.Color = NewCharacter:FindFirstChild(Part.Name).Color 
				Part.Transparency = NewCharacter:FindFirstChild(Part.Name).Transparency 
			end 
			if Part.Name == "FakeHead" then 
				Part.Color = NewCharacter:FindFirstChild("Head").Color 
				Part.Transparency = NewCharacter:FindFirstChild("Head").Transparency 
			end 
		end 

		if (Part.Name == "Head" or Part.Name == "FakeHead") and Part:FindFirstChildOfClass("Decal") and NewCharacter.Head:FindFirstChildOfClass("Decal") then 
			Part:FindFirstChildOfClass("Decal").Texture = NewCharacter.Head:FindFirstChildOfClass("Decal").Texture 
		end 
	end 

	if NewCharacter:FindFirstChildOfClass("Shirt") then 
		if LocalPlayer.Character:FindFirstChildOfClass("Shirt") then 
			LocalPlayer.Character:FindFirstChildOfClass("Shirt"):Destroy() 
		end 
		local Clone = NewCharacter:FindFirstChildOfClass("Shirt"):Clone() 
		Clone.Parent = LocalPlayer.Character 
	end 

	if NewCharacter:FindFirstChildOfClass("Pants") then 
		if LocalPlayer.Character:FindFirstChildOfClass("Pants") then 
			LocalPlayer.Character:FindFirstChildOfClass("Pants"):Destroy() 
		end 
		local Clone = NewCharacter:FindFirstChildOfClass("Pants"):Clone() 
		Clone.Parent = LocalPlayer.Character 
	end 

	for _,Part in pairs (NewCharacter:GetChildren()) do 
		if Part:IsA("Accessory") then 
			local Clone = Part:Clone() 
			for _,Weld in pairs (Clone.Handle:GetChildren()) do 
				if Weld:IsA("Weld") and Weld.Part1 ~= nil then 
					Weld.Part1 = LocalPlayer.Character[Weld.Part1.Name] 
				end 
			end 
			Clone.Parent = LocalPlayer.Character 
		end 
	end 

	if LocalPlayer.Character:FindFirstChildOfClass("Shirt") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = LocalPlayer.Character:FindFirstChildOfClass("Shirt").ShirtTemplate 
		String.Parent = LocalPlayer.Character:FindFirstChildOfClass("Shirt") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			LocalPlayer.Character:FindFirstChildOfClass("Shirt").ShirtTemplate = "" 
		end 
	end 
	if LocalPlayer.Character:FindFirstChildOfClass("Pants") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = LocalPlayer.Character:FindFirstChildOfClass("Pants").PantsTemplate 
		String.Parent = LocalPlayer.Character:FindFirstChildOfClass("Pants") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			LocalPlayer.Character:FindFirstChildOfClass("Pants").PantsTemplate = "" 
		end 
	end 
	for i,v in pairs(LocalPlayer.Character:GetChildren()) do 
		if v:IsA("BasePart") and v.Transparency ~= 1 then 
			INSERT(SelfObj, v) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Color 
			Color.Parent = v 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Material.Name 
			String.Parent = v 
		elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then 
			INSERT(SelfObj, v.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Handle.Color 
			Color.Parent = v.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Handle.Material.Name 
			String.Parent = v.Handle 
		end 
	end 

	if values.visuals.self["self chams"].Toggle then 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = values.visuals.self["self chams material"].Dropdown 
				obj.Color = values.visuals.self["self chams"].Color 
			end 
		end 
	end 
end 
local function GetDeg(pos1, pos2) 
	local start = pos1.LookVector 
	local vector = CF(pos1.Position, pos2).LookVector 
	local angle = ACOS(start:Dot(vector)) 
	local deg = DEG(angle) 
	return deg 
end 
local Ping = game.Stats.PerformanceStats.Ping:GetValue() 

for i,v in pairs(Viewmodels:GetChildren()) do 
	if v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.Transparency ~= 1 then 
		v.HumanoidRootPart.Transparency = 1 
	end 
end 

local Models = game:GetObjects("rbxassetid://8356647750")[1] 
repeat wait() until Models ~= nil 
local ChrModels = game:GetObjects("rbxassetid://8370129931")[1] 
repeat wait() until ChrModels ~= nil 


local AllKnives = { 
	"CT Knife", 
	"T Knife", 
	"Banana", 
	"Bayonet", 
	"Bearded Axe", 
	"Butterfly Knife", 
	"Cleaver", 
	"Crowbar", 
	"Falchion Knife", 
	"Flip Knife", 
	"Gut Knife", 
	"Huntsman Knife", 
	"Karambit", 
	"Sickle", 
} 

local AllGloves = {} 


for _,fldr in pairs(Gloves:GetChildren()) do 
	if fldr ~= GloveModels and fldr.Name ~= "Racer" then 
		AllGloves[fldr.Name] = {} 
		for _2,modl in pairs(fldr:GetChildren()) do 
			INSERT(AllGloves[fldr.Name], modl.Name) 
		end 
	end 
end 

for i,v in pairs(Models.Knives:GetChildren()) do 
	INSERT(AllKnives, v.Name) 
end 

local AllSkins = {} 
local AllWeapons = {} 
local AllCharacters = {} 

for i,v in pairs(ChrModels:GetChildren()) do 
	INSERT(AllCharacters, v.Name) 
end 

local skins = { 
	{["Weapon"] = "AWP", ["SkinName"] = "Bot", ["Skin"] = {["Scope"] = "6572594838", ["Handle"] = "6572594077"}} 
} 

for _,skin in pairs (skins) do 
	local Folder = INST("Folder") 
	Folder.Name = skin["SkinName"] 
	Folder.Parent = Skins[skin["Weapon"]] 

	for _,model in pairs (skin["Skin"]) do 
		local val = INST("StringValue") 
		val.Name = _ 
		val.Value = "rbxassetid://"..model 
		val.Parent = Folder 
	end 
end 

for i,v in pairs(Skins:GetChildren()) do 
	INSERT(AllWeapons, v.Name) 
end 

TBLSORT(AllWeapons, function(a,b) 
	return a < b 
end) 

for i,v in ipairs(AllWeapons) do 
	AllSkins[v] = {} 
	INSERT(AllSkins[v], "Inventory") 
	for _,v2 in pairs(Skins[v]:GetChildren()) do 
		if not v2:FindFirstChild("Animated") then 
			INSERT(AllSkins[v], v2.Name) 
		end 
	end 
end 

makefolder("asian_lua") 

local allluas = {} 

for _,lua in pairs(listfiles("asian_lua")) do 
	local luaname = GSUB(lua, "asian_lua\\", "") 
	INSERT(allluas, luaname) 
end 

RunService.RenderStepped:Wait() 
local menu
do
	local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/RiotScan/ridard/main/watermark"))()
	local gui = library:New([[asian<font color="rgb(100, 100, 100)">hook</font>]])
	local legit = gui:Tab("legit", "http://www.roblox.com/asset/?id=7300477598")
	local rage = gui:Tab("rage", "http://www.roblox.com/asset/?id=7300535052")
	local visuals = gui:Tab("visuals", "http://www.roblox.com/asset/?id=7300480952")
	local misc = gui:Tab("misc", "http://www.roblox.com/asset/?id=7300486042")
	local skins = gui:Tab("skins", "http://www.roblox.com/asset/?id=8548218542")
	local luas = gui:Tab("luas", "http://www.roblox.com/asset/?id=8548139847")

	getgenv().api = {} 
	api.newtab = function(name) 
		return gui:Tab(name) 
	end 
	api.newsection = function(tab, name, side) 
		return tab:Sector(name, side) 
	end 
	api.newelement = function(section, type, name, data, callback) 
		section:Element(type, name, data, callback) 
	end 


	local luascripts = luas:Sector("lua scripts", "Right") 
	luascripts:Element("Scroll", "lua", {options = allluas, Amount = 5}) 
	luascripts:Element("Button", "load", {}, function() 
		loadstring(readfile("asian_lua\\"..values.luas["lua scripts"].lua.Scroll))() 
	end) 
	
	local configs = luas:Sector("configs", "Left") 
	configs:Element("TextBox", "config", {placeholder = "config name"}) 
	configs:Element("Button", "save", {}, function() if values.luas.configs.config.Text ~= "" then library:SaveConfig(values.luas.configs.config.Text) end end) 
	configs:Element("Button", "load", {}, function() if values.luas.configs.config.Text ~= "" then ConfigLoad:Fire(values.luas.configs.config.Text) end end) 

	local knife = skins:Sector("knife", "Left") 
	knife:Element("Toggle", "knife changer") 
	knife:Element("Scroll", "model", {options = AllKnives, Amount = 15}) 

	local glove = skins:Sector("glove", "Left") 
	glove:Element("Toggle", "glove changer") 
	glove:Element("ScrollDrop", "model", {options = AllGloves, Amount = 9}) 

	local skin = skins:Sector("skins", "Right") 
	skin:Element("Toggle", "skin changer") 
	skin:Element("ScrollDrop", "skin", {options = AllSkins, Amount = 15, alphabet = true}) 

	local characters = skins:Sector("characters", "Right") 
	characters:Element("Toggle", "character changer", nil, function(tbl) 
		if tbl.Toggle then 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun") then 
				ChangeCharacter(ChrModels:FindFirstChild(values.skins.characters.skin.Scroll)) 
			end 
		end 
	end) 
	characters:Element("Scroll", "skin", {options = AllCharacters, Amount = 9, alphabet = true}, function(tbl) 
		if values.skins.characters["character changer"].Toggle then 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Gun") then 
				ChangeCharacter(ChrModels:FindFirstChild(tbl.Scroll)) 
			end 
		end 
	end) 

	local aimbot = legit:Sector("aimbot", "Right")
	aimbot:Element("ToggleKeybind", "aim assist")
	aimbot:Element("ToggleKeybind", "silent aim")
	aimbot:Element("ToggleKeybind", "triggerbot")
	aimbot:Element("Slider", "field of view", {min = 30, max = 420, default = 120})
	aimbot:Element("Toggle", "draw fov")
	aimbot:Element("Toggle", "free for all")
	aimbot:Element("Toggle", "forcefield check")


	local LegitBot = legit:MSector("LegitBot", "Left")
	local default = LegitBot:Tab("default")
	local pistol = LegitBot:Tab("pistol")
	local smg = LegitBot:Tab("smg")
	local rifle = LegitBot:Tab("rifle")
	local sniper = LegitBot:Tab("sniper")

	local function AddLegit(Tab)

		Tab:Element("Toggle", "silent aim")
		Tab:Element("Slider", "hitchance", {min = 1, max = 100, default = 100})
		Tab:Element("Dropdown", "hitbox", {options = {"closest", "head", "chest"}})
		Tab:Element("Dropdown", "priority", {options = {"closest", "head", "chest"}})
		Tab:Element("Dropdown", "target", {options = {"crosshair", "health", "distance"}})
		Tab:Element("Jumbobox", "conditions", {options = {"visible", "standing", "blind", "smoke"}})
	end

	AddLegit(default) 

	pistol:Element("Toggle", "override default") 
	AddLegit(pistol) 

	smg:Element("Toggle", "override default") 
	AddLegit(smg) 

	rifle:Element("Toggle", "override default") 
	AddLegit(rifle) 

	sniper:Element("Toggle", "override default") 
	AddLegit(sniper) 

	local settings = legit:Sector("settings", "Right") 
	settings:Element("Toggle", "free for all") 
	settings:Element("Toggle", "forcefield check") 
	settings:Element("ToggleColor", "draw fov") 

	local aimbot = rage:Sector("aimbot", "Left") 
	aimbot:Element("Toggle", "enabled") 
	aimbot:Element("Dropdown", "origin", {options = {"character", "camera"}}) 
	aimbot:Element("Toggle", "silent aim") 
	aimbot:Element("Dropdown", "automatic fire", {options = {"off", "standard", "hitpart"}}) 
	aimbot:Element("Toggle", "autowall") 
	aimbot:Element("Jumbobox", "resolver", {options = {"pitch", "roll", "animation"}}) 
	aimbot:Element("Toggle", "delay shot") 
	aimbot:Element("Toggle", "force hit")
	aimbot:Element("Dropdown", "prediction", {options = {"off", "cframe", "velocity"}}) 
	aimbot:Element("Toggle", "get real") 
	aimbot:Element("Toggle", "teammates") 
	aimbot:Element("ToggleKeybind", "auto baim") 
	aimbot:Element("Toggle", "knifebot") 

	local weapons = rage:MSector("weapons", "Left") 
	local default = weapons:Tab("default") 
	local pistol = weapons:Tab("pistol") 
	local rifle = weapons:Tab("rifle") 
	local scout = weapons:Tab("scout") 
	local awp = weapons:Tab("awp") 
	local auto = weapons:Tab("auto") 

	local function AddRage(Tab) 
		Tab:Element("Jumbobox", "hitboxes", {options = {"head", "torso", "pelvis"}}) 
		Tab:Element("Toggle", "prefer baim") 
		Tab:Element("Slider", "minimum damage", {min = -10, max = 100, default = 20})
		Tab:Element("Slider", "max fov", {min = 1, max = 180, default = 180}) 
	end 

	AddRage(default) 

	pistol:Element("Toggle", "override default") 
	AddRage(pistol) 

	rifle:Element("Toggle", "override default") 
	AddRage(rifle) 

	scout:Element("Toggle", "override default") 
	AddRage(scout) 

	awp:Element("Toggle", "override default") 
	AddRage(awp) 

	auto:Element("Toggle", "override default") 
	AddRage(auto) 

	local antiaim = rage:Sector("angles", "Right") 
	antiaim:Element("Toggle", "enabled") 
	local Client = getsenv(game.Players.LocalPlayer.PlayerGui.Client)    
	antiaim:Element("Dropdown", "yaw base", {options = {"camera", "targets", "spin", "random", "anti crippin'", "keybind yaw"}}) 
	antiaim:Element("Slider", "yaw offset", {min = -180, max = 180, default = 0}) 
	antiaim:Element("ToggleKeybind", "reset yaw")
	antiaim:Element("Toggle", "jitter") 
	antiaim:Element("Slider", "jitter offset", {min = -180, max = 180, default = 0}) 
	antiaim:Element("Dropdown", "pitch", {options = {"up", "down", "180", "180v2", "180v3", "random", "random2", "totally normal", "totally normal2", "custom", "down2", "up2", "sucking dick", "fake headless", "huge"}})
	antiaim:Element("Slider", "pitch angle", {min = -100, max = 100, default = 0})  
	antiaim:Element("Toggle", "extend pitch") 
	antiaim:Element("ToggleKeybind", "reset pitch")
	antiaim:Element("Dropdown", "body roll", {options = {"off", "180"}})
	antiaim:Element("Slider", "body roll offset", {min = -180, max = 180, default = 0}) 
	antiaim:Element("Slider", "spin speed", {min = 1, max = 69, default = 10})
	antiaim:Element("Slider", "high pos", {min = -3, max = 20, default = 2})

	local others = rage:Sector("others", "Right") 
	others:Element("Toggle", "remove head (gay)") 
	others:Element("Toggle", "no animations") 
	others:Element("Dropdown", "leg movement", {options = {"off", "slide", "slide2" , "slide3"}})
	fakeduckloop = false  
	others:Element("ToggleKeybind", "fake duck",{},function(tbl)
		fakeduckloop = tbl.Toggle and tbl.Active
		while fakeduckloop and syn do
			pcall(function()
				wait(1)
				local Client = getsenv(game.Players.LocalPlayer.PlayerGui.Client)
				local CrouchAnim = nil
				for i,v in pairs(debug.getupvalues(Client.setcharacter)) do
					if type(v) == "userdata" and v.ClassName == "AnimationTrack" and v.Name == "Idle" then
						CrouchAnim = v																																																																																																																																																																																																																																																																																																																																																			
					end
				end

				CrouchAnim:Play()
			end)
		end
	end)	

	local LagTick = 0
	local fakelag = rage:Sector("fakelag", "Right")
	fakelag:Element("Toggle", "enabled", {default = {Toggle = false}}, function(tbl)
		if tbl.Toggle then
		else
			FakelagFolder:ClearAllChildren()
			game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9)
		end
	end)
	fakelag:Element("Dropdown", "amount", {options = {"static", "dynamic"}})
	fakelag:Element("Slider", "limit", {min = 1, max = 16, default = 8})
	fakelag:Element("ToggleColor", "visualize lag", {default = {Toggle = false, Color = Color3.fromRGB(255,255,255)}}, function(tbl)
		if tbl.Toggle then
			for _,obj in pairs(FakelagFolder:GetChildren()) do
				obj.Color = tbl.Color
			end
		else
			FakelagFolder:ClearAllChildren()
		end
	end)
	fakelag:Element("ToggleKeybind", "ping spike")
	coroutine.wrap(function()
	while wait(1/16) do
		LagTick = math.clamp(LagTick + 1, 0, values.rage.fakelag.limit.Slider)
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") and values.rage.fakelag.enabled.Toggle then
			if LagTick == (values.rage.fakelag.amount.Dropdown == "static" and values.rage.fakelag.limit.Slider or math.random(1, values.rage.fakelag.limit.Slider)) then
				game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9)
				FakelagFolder:ClearAllChildren()
				LagTick = 0
				if values.rage.fakelag["visualize lag"].Toggle then
					for _,hitbox in pairs(LocalPlayer.Character:GetChildren()) do
						if hitbox:IsA("BasePart") and hitbox.Name ~= "HumanoidRootPart" then
							local part = Instance.new("Part")
							part.CFrame = hitbox.CFrame
							part.Anchored = true
							part.CanCollide = false
							part.Material = Enum.Material.ForceField
							part.Color = values.rage.fakelag["visualize lag"].Color
							part.Name = hitbox.Name
							part.Transparency = 0
							part.Size = hitbox.Size
							part.Parent = FakelagFolder
						end
					end
				end
			else
				if values.rage.fakelag.enabled.Toggle then
					game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1)
				end
			end
		else
			FakelagFolder:ClearAllChildren()
			game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9)
		end
	end
	end)()
	 

	local exploits = rage:Sector("exploits", "Left") 
	exploits:Element("ToggleKeybind", "double tap")
	exploits:Element("ToggleKeybind", "triple tap")
	exploits:Element("ToggleKeybind", "kill all")
	exploits:Element("Slider", "qp vertical pos", {min = -500, max = 500, default = 200})  
	exploits:Element("ToggleKeybind", "quick peek",{},function(tbl)
		if tbl.Toggle and tbl.Active and LocalPlayer.Character and Peek == false then
			if values.rage.exploits["loop peek"].Toggle == true and values.rage.exploits["quick peek"].Active == true then
				while values.rage.exploits["loop peek"].Toggle == true do
					Peek = true
					LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,values.rage.exploits["qp vertical pos"].Slider,0)
					wait(0.2)
					Peek = false
					LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame - Vector3.new(0,values.rage.exploits["qp vertical pos"].Slider,0)
					wait(0.2)
				end
			else
				Peek = true
				LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame + Vector3.new(0,values.rage.exploits["qp vertical pos"].Slider,0)
				wait(0.2)
				Peek = false
				LocalPlayer.Character.HumanoidRootPart.CFrame = LocalPlayer.Character.HumanoidRootPart.CFrame - Vector3.new(0,values.rage.exploits["qp vertical pos"].Slider,0)
			end
		elseif  not tbl.Active then
			Peek = false
		end
	end)  
	exploits:Element("Toggle","loop peek")
	exploits:Element("Toggle","debris clear",{},function(tbl)
		while values.rage.exploits["debris clear"].Toggle == true do
			wait(1)
			for i,v in pairs(workspace.Debris:GetDescendants()) do
				game:GetService("ReplicatedStorage").Events.DestroyObject:FireServer(v)
			end 
		end
	end)
	local AutoPeek = {
		OldPeekPosition = CFrame.new()
	}

	exploits:Element("ToggleKeybind","auto peek",{},function(tbl)
		if tbl.Toggle and tbl.Active and LocalPlayer.Character then
			AutoPeek.OldPeekPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
		end
	end)
	exploits:Element("ToggleKeybind","fakeframe",{},function(tbl)
				spawn(function()
					while values.rage.exploits["fakeframe"].Toggle == true and values.rage.exploits["fakeframe"].Active == true do
						wait()
						game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1)  
					end
					game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9)
				end)
			end)

	OldClientFireBullet = Client.firebullet
	Client.firebullet = function(...)
		if values.rage.exploits["auto peek"].Toggle and values.rage.exploits["auto peek"].Active and LocalPlayer.Character then
			LocalPlayer.Character.HumanoidRootPart.CFrame = AutoPeek.OldPeekPosition
		end
		return OldClientFireBullet(...)
	end



	local players = visuals:Sector("players", "Left") 
	players:Element("Toggle", "teammates") 
	players:Element("ToggleColor", "box", {default = {Color = COL3RGB(255,255,255)}}) 
	players:Element("ToggleColor", "name", {default = {Color = COL3RGB(255,255,255)}}) 
	players:Element("Toggle", "health", {default = {Color = COL3RGB(255,255,255)}})  
	players:Element("ToggleColor", "weapon", {default = {Color = COL3RGB(255,255,255)}}) 
	players:Element("ToggleColor", "weapon icon", {default = {Color = COL3RGB(255,255,255)}}) 
	players:Element("Jumbobox", "indicators", {options = {"armor"}}) 
	players:Element("Jumbobox", "outlines", {options = {"drawings", "text"}, default = {Jumbobox = {"drawings", "text"}}}) 
	players:Element("Dropdown", "font", {options = {"Plex", "Monospace", "System", "UI"}}) 
	players:Element("Slider", "size", {min = 12, max = 16, default = 13}) 
	players:Element("ToggleTrans", "chams", nil, function(tbl)
		for _,Player in pairs(Players:GetPlayers()) do
			if Player.Character then
				for _2,Obj in pairs(Player.Character:GetDescendants()) do
					if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then
						if tbl.Toggle then
							if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
								Obj.Visible = true
							else
								Obj.Visible = false
							end
						else
							Obj.Visible = false
						end
						Obj.Color3 = tbl.Color
					end
				end
			end
		end
	end)
	local effects = visuals:Sector("effects", "Right") 
	effects:Element("ToggleTrans", "weapon chams", {default = {Color = COL3RGB(255,255,255), Transparency = 0}}, function(tbl) 
		if WeaponObj == nil then return end 
		if tbl.Toggle then 
			for i,v in pairs(WeaponObj) do 
				UpdateWeapon(v) 
			end 
		else 
			for i,v in pairs(WeaponObj) do 
				if v:IsA("MeshPart") then v.TextureID = v.OriginalTexture.Value end 
				if v:IsA("Part") and v:FindFirstChild("Mesh") and not v:IsA("BlockMesh") then 
					v.Mesh.TextureId = v.Mesh.OriginalTexture.Value 
					v.Mesh.VertexColor = Vec3(1,1,1) 
				end 
				v.Color = v.OriginalColor.Value 
				v.Material = v.OriginalMaterial.Value 
				v.Transparency = 0 
			end 
		end 
	end) 
	effects:Element("Dropdown", "weapon material", {options = {"Smooth", "Flat", "ForceField", "Glass"}}, function(tbl) 
		if WeaponObj == nil then return end 
		if values.visuals.effects["weapon chams"].Toggle then 
			for i,v in pairs(WeaponObj) do 
				UpdateWeapon(v) 
			end 
		end 
	end) 
	effects:Element("Dropdown", "forcefield type", {options = {"normal", "pulse", "web", "swirl", "checkers", "candy cane", "player ff texture","shield forcefield", "dots", "scanning (suggested by blast)", "bubbles (suggested by blast)"}})
	effects:Element("Slider", "reflectance", {min = 0, max = 100, default = 0}, function(tbl) 
		if values.visuals.effects["weapon chams"].Toggle then 
			for i,v in pairs(WeaponObj) do 
				UpdateWeapon(v) 
			end 
		end 
	end) 
	effects:Element("ToggleTrans", "accessory chams", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
		if RArm == nil or LArm == nil then return end 
		if val.Toggle then 
			if RGlove ~= nil then 
				UpdateAccessory(RGlove) 
			end 
			if RSleeve ~= nil then 
				UpdateAccessory(RSleeve) 
			end 
			if LGlove ~= nil then 
				UpdateAccessory(LGlove) 
			end 
			if LSleeve ~= nil then 
				UpdateAccessory(LSleeve) 
			end 
		else 
			if RGlove then 
				ReverseAccessory(RGlove) 
			end 
			if LGlove then 
				ReverseAccessory(LGlove) 
			end 
			if RSleeve then 
				ReverseAccessory(RSleeve) 
			end 
			if LSleeve then 
				ReverseAccessory(LSleeve) 
			end 
		end 
	end) 
	effects:Element("Dropdown", "accessory material", {options = {"Smooth","ForceField"}}, function(val) 
		if RArm == nil or LArm == nil then return end 
		if values.visuals.effects["accessory chams"].Toggle then 
			if RGlove ~= nil then 
				UpdateAccessory(RGlove) 
			end 
			if RSleeve ~= nil then 
				UpdateAccessory(RSleeve) 
			end 
			if LGlove ~= nil then 
				UpdateAccessory(LGlove) 
			end 
			if LSleeve ~= nil then 
				UpdateAccessory(LSleeve) 
			end 
		end 
	end) 
	effects:Element("ToggleTrans", "arm chams", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
		if RArm == nil then return end 
		if LArm == nil then return end 
		if val.Toggle then 
			RArm.Color = val.Color 
			LArm.Color = val.Color 
			RArm.Transparency = val.Transparency 
			LArm.Transparency = val.Transparency 
		else 
			RArm.Color = RArm.Color3Value.Value 
			LArm.Color = RArm.Color3Value.Value 
			RArm.Transparency = 0 
			LArm.Transparency = 0 
		end 
	end) 

	effects:Element("Jumbobox", "removals", {options = {"scope", "scope lines", "flash", "smoke", "decals", "shadows", "clothes"}}, function(val) 
		local tbl = val.Jumbobox 
		if TBLFIND(tbl, "decals") then 
			Client.createbullethole = function() end 
			for i,v in pairs(workspace.Debris:GetChildren()) do 
				if v.Name == "Bullet" or v.Name == "SurfaceGui" then 
					v:Destroy() 
				end 
			end 
		else 
			Client.createbullethole = oldcreatebullethole 
		end 
		if TBLFIND(tbl, "clothes") then 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
				if LocalPlayer.Character:FindFirstChild("Shirt") then 
					LocalPlayer.Character:FindFirstChild("Shirt").ShirtTemplate = "" 
				end 
				if LocalPlayer.Character:FindFirstChild("Pants") then 
					LocalPlayer.Character:FindFirstChild("Pants").PantsTemplate = "" 
				end 
			end 
		else 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
				if LocalPlayer.Character:FindFirstChild("Shirt") then 
					LocalPlayer.Character:FindFirstChild("Shirt").ShirtTemplate = LocalPlayer.Character:FindFirstChild("Shirt").OriginalTexture.Value 
				end 
				if LocalPlayer.Character:FindFirstChild("Pants") then 
					LocalPlayer.Character:FindFirstChild("Pants").PantsTemplate = LocalPlayer.Character:FindFirstChild("Pants").OriginalTexture.Value 
				end 
			end 
		end 
		if TBLFIND(tbl, "scope") then 
			Crosshairs.Scope.ImageTransparency = 1 
			Crosshairs.Scope.Scope.ImageTransparency = 1 
			Crosshairs.Frame1.Transparency = 1 
			Crosshairs.Frame2.Transparency = 1 
			Crosshairs.Frame3.Transparency = 1 
			Crosshairs.Frame4.Transparency = 1 
		else 
			Crosshairs.Scope.ImageTransparency = 0 
			Crosshairs.Scope.Scope.ImageTransparency = 0 
			Crosshairs.Frame1.Transparency = 0 
			Crosshairs.Frame2.Transparency = 0 
			Crosshairs.Frame3.Transparency = 0 
			Crosshairs.Frame4.Transparency = 0 
		end 
		PlayerGui.Blnd.Enabled = not TBLFIND(tbl, "flash") and true or false 
		Lighting.GlobalShadows = not TBLFIND(tbl, "shadows") and true or false 
		if RayIgnore:FindFirstChild("Smokes") then 
			if TBLFIND(tbl, "smoke") then 
				for i,smoke in pairs(RayIgnore.Smokes:GetChildren()) do 
					smoke.ParticleEmitter.Rate = 0 
				end 
			else 
				for i,smoke in pairs(RayIgnore.Smokes:GetChildren()) do 
					smoke.ParticleEmitter.Rate = smoke.OriginalRate.Value 
				end 
			end 
		end 
	end) 
	effects:Element("Toggle", "force crosshair") 
	effects:Element("ToggleColor", "world color", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
		if val.Toggle then 
			Camera.ColorCorrection.TintColor = val.Color 
		else 
			Camera.ColorCorrection.TintColor = COL3RGB(255,255,255) 
		end 
	end)
	effects:Element("ToggleColor", "indoor ambient", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
		if val.Toggle then 
			game.Lighting.Ambient = val.Color
		else 
			game.Lighting.Ambient = COL3RGB(255,255,255) 
		end 
	end)
	effects:Element("ToggleColor", "outdoor ambient", {default = {Color = COL3RGB(255,255,255)}}, function(val) 
		if val.Toggle then 
			game.Lighting.OutdoorAmbient = val.Color
		else 
			game.Lighting.OutdoorAmbient = COL3RGB(255,255,255) 
		end 
	end)
	effects:Element("Toggle", "shadowmap technology", nil, function(val) sethiddenproperty(Lighting, "Technology", val.Toggle and "ShadowMap" or "Legacy") end) 
	local self = visuals:Sector("self", "Right") 
	self:Element("ToggleKeybind", "third person", {}, function(tbl) 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
			if tbl.Toggle then 
				if tbl.Active then 
					LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider 
					LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider 
					LocalPlayer.CameraMaxZoomDistance = values.visuals.self.distance.Slider 
					LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider 
				else 
					LocalPlayer.CameraMaxZoomDistance = 0 
					LocalPlayer.CameraMinZoomDistance = 0 
					LocalPlayer.CameraMaxZoomDistance = 0 
					LocalPlayer.CameraMinZoomDistance = 0 
				end 
			else 
				LocalPlayer.CameraMaxZoomDistance = 0 
				LocalPlayer.CameraMinZoomDistance = 0 
			end 
		end 
	end) 
	self:Element("Toggle", "no arm third person")
	self:Element("Slider", "distance", {min = 6, max = 18, default = 12}, function(tbl) 
		if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
			if values.visuals.self["third person"].Toggle then 
				if values.visuals.self["third person"].Active then 
					LocalPlayer.CameraMaxZoomDistance = tbl.Slider 
					LocalPlayer.CameraMinZoomDistance = tbl.Slider 
					LocalPlayer.CameraMaxZoomDistance = tbl.Slider 
					LocalPlayer.CameraMinZoomDistance = tbl.Slider 
				else 
					LocalPlayer.CameraMaxZoomDistance = 0 
					LocalPlayer.CameraMinZoomDistance = 0 
				end 
			else 
				LocalPlayer.CameraMaxZoomDistance = 0 
				LocalPlayer.CameraMinZoomDistance = 0 
			end 
		end 
	end) 
	LocalPlayer:GetPropertyChangedSignal("CameraMinZoomDistance"):Connect(function(current) 
		if values.visuals.self["third person"].Toggle then 
			if values.visuals.self["third person"].Active then 
				if current ~= values.visuals.self.distance.Slider then 
					LocalPlayer.CameraMinZoomDistance = values.visuals.self.distance.Slider 
				end 
			end 
		end 
	end) 
	self:Element("Slider", "fov changer", {min = 0, max = 120, default = 80}, function(value) 
		RunService.RenderStepped:Wait() 
		if LocalPlayer.Character == nil then return end 
		if fov == value.Slider then return end 
		if values.visuals.self["on scope"].Toggle or not LocalPlayer.Character:FindFirstChild("AIMING") then 
			Camera.FieldOfView = value.Slider 
		end 
	end) 
	self:Element("Toggle", "on scope") 
	self:Element("Toggle", "viewmodel changer") 
	self:Element("Slider", "viewmodel x", {min = -10, max = 10}, function(val) 
		ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
	end) 
	self:Element("Slider", "viewmodel y", {min = -10, max = 10}, function(val) 
		ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
	end) 
	self:Element("Slider", "viewmodel z", {min = -10, max = 10}, function(val) 
		ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
	end) 
	self:Element("Slider", "roll", {min = -100, max = 100}, function(val) 
		ViewmodelOffset = CF(values.visuals.self["viewmodel x"].Slider/7, values.visuals.self["viewmodel y"].Slider/7, values.visuals.self["viewmodel z"].Slider/7) * CFAngles(0, 0, values.visuals.self.roll.Slider/50) 
	end) 
	self:Element("ToggleTrans", "self chams", {default = {Color = COL3RGB(255,255,255)}}, function(tbl) 
		if tbl.Toggle then 
			for _,obj in pairs(SelfObj) do 
				if obj.Parent ~= nil then 
					obj.Material = values.visuals.self["self chams material"].Dropdown 
					obj.Color = tbl.Color 
					obj.Transparency = tbl.Transparency 
				end 
			end 
		else 
			for _,obj in pairs(SelfObj) do 
				if obj.Parent ~= nil then 
					obj.Material = obj.OriginalMaterial.Value 
					obj.Color = obj.OriginalColor.Value 
				end 
			end 
		end 
	end) 

	self:Element("Dropdown", "self chams material", {options = {"ForceField", "Neon", "Glass"}}, function(val)
		if TBLFIND(val, "ForceField") then
			for _,obj in pairs(SelfObj) do 
				if obj.Parent ~= nil then 
					obj.Material = Enum.Material.ForceField
					obj.Color = tbl.Color
				end
			end
		else
			if TBLFIND(val, "Neon") then
				for _,obj in pairs(SelfObj) do 
					if obj.Parent ~= nil then
						obj.Material = Enum.Material.Neon
						obj.Color = tbl.Color
					end
				end
			else
				if TBLFIND(val, "Glass") then
					for _,obj in pairs(SelfObj) do
						if obj.Parent ~= nil then
							obj.Material = Enum.Material.Glass
							obj.Color = tbl.Color
						end
					end
				end
			end
		end
	end)

	self:Element("Slider", "scope blend", {min = 0, max = 100, default = 0}) 

	local ads = Client.updateads 
	Client.updateads = function(self, ...) 
		local args = {...} 
		coroutine.wrap(function() 
			wait() 
			if LocalPlayer.Character ~= nil then 
				for _,part in pairs(LocalPlayer.Character:GetDescendants()) do 
					if part:IsA("Part") or part:IsA("MeshPart") then 
						if part.Transparency ~= 1 then 
							part.Transparency = LocalPlayer.Character:FindFirstChild("AIMING") and values.visuals.self["scope blend"].Slider/100 or 0 
						end 
					end 
					if part:IsA("Accessory") then 
						part.Handle.Transparency = LocalPlayer.Character:FindFirstChild("AIMING") and values.visuals.self["scope blend"].Slider/100 or 0 
					end 
				end 
			end 
		end)() 
		return ads(self, ...) 
	end 

	local world = visuals:Sector("world", "Left") 
	world:Element("ToggleTrans", "molly radius", {default = {Color = COL3RGB(255, 255, 255)}}, function(tbl) 
		if RayIgnore:FindFirstChild("Fires") == nil then return end 
		if tbl.Toggle then 
			for i,fire in pairs(RayIgnore:FindFirstChild("Fires"):GetChildren()) do 
				fire.Transparency = tbl.Transparency 
				fire.Color = tbl.Color 
			end 
		else 
			for i,fire in pairs(RayIgnore:FindFirstChild("Fires"):GetChildren()) do 
				fire.Transparency = 1 
			end 
		end 
	end) 
	world:Element("ToggleColor", "smoke radius", {default = {Color = COL3RGB(255, 255, 255)}}, function(tbl) 
		if RayIgnore:FindFirstChild("Smokes") == nil then return end 
		if tbl.Toggle then 
			for i,smoke in pairs(RayIgnore:FindFirstChild("Smokes"):GetChildren()) do 
				smoke.Transparency = 0 
				smoke.Color = tbl.Color 
			end 
		else 
			for i,smoke in pairs(RayIgnore:FindFirstChild("Smokes"):GetChildren()) do 
				smoke.Transparency = 1 
			end 
		end 
	end) 
	world:Element("ToggleColor", "bullet tracers", {default = {Color = COL3RGB(255, 255, 255)}}) 
	world:Element("Slider", "time changer", {min = 0, max = 15, default = 0}, function(tbl) 
	while wait() do
		  if game.Lighting.ClockTime ~= tbl.Slider then
			 game.Lighting.ClockTime = tbl.Slider
		  end
	   end
	end)     
	world:Element("ToggleColor", "impacts", {default = {Color = COL3RGB(255, 255, 255)}}) 
	world:Element("ToggleColor", "hit chams", {default = {Color = COL3RGB(255, 255, 255)}}) 
	world:Element("Dropdown", "hitsound", {options = {"none", "moan", "moan2", "moan3", "moan4", "skeet", "neverlose", "rust", "bag", "baimware", "bruh", "MC \"ouh!\"" , "ding"}}) 
	world:Element("Slider", "sound volume", {min = 1, max = 5, default = 3}) 
	world:Element("Dropdown", "skybox", {options = {"none", "nebula", "minecraft", "vaporwave", "clouds"}}, function(tbl) 
		local sky = tbl.Dropdown 
		if sky ~= "none" then 
			if Lighting:FindFirstChildOfClass("Sky") then Lighting:FindFirstChildOfClass("Sky"):Destroy() end 
			local skybox = INST("Sky") 
			skybox.SkyboxLf = Skyboxes[sky].SkyboxLf 
			skybox.SkyboxBk = Skyboxes[sky].SkyboxBk 
			skybox.SkyboxDn = Skyboxes[sky].SkyboxDn 
			skybox.SkyboxFt = Skyboxes[sky].SkyboxFt 
			skybox.SkyboxRt = Skyboxes[sky].SkyboxRt 
			skybox.SkyboxUp = Skyboxes[sky].SkyboxUp 
			skybox.Name = "override" 
			skybox.Parent = Lighting 
		else 
			if Lighting:FindFirstChildOfClass("Sky") then Lighting:FindFirstChildOfClass("Sky"):Destroy() end 
			if oldSkybox ~= nil then oldSkybox:Clone().Parent = Lighting end 
		end 
	end) 
	world:Element("ToggleColor", "item esp", {default = {Color = COL3RGB(255, 255, 255)}}, function(tbl) 
		for i,weapon in pairs(workspace.Debris:GetChildren()) do 
			if weapon:IsA("BasePart") and Weapons:FindFirstChild(weapon.Name) then 
				weapon.BillboardGui.ImageLabel.Visible = tbl.Toggle and TBLFIND(values.visuals.world["types"].Jumbobox, "icon") and true or false 
			end 
		end 
	end) 
	world:Element("Jumbobox", "types", {options = {"icon"}}, function(tbl) 
		for i,weapon in pairs(workspace.Debris:GetChildren()) do 
			if weapon:IsA("BasePart") and Weapons:FindFirstChild(weapon.Name) then 
				weapon.BillboardGui.ImageLabel.Visible = values.visuals.world["item esp"].Toggle and TBLFIND(tbl.Jumbobox, "icon") and true or false 
				weapon.BillboardGui.ImageLabel.ImageColor3 = values.visuals.world["item esp"].Color 
			end 
		end 
	end) 

	local crosshaireditor = misc:Sector("crosshair editor", "Right") 
	local ui = misc:Sector("ui", "Left") 
	ui:Element("Toggle", "asianhook watermark", {}, function(tbl)
		if tbl.Toggle then

			local AsianHookWM = Instance.new("ScreenGui")
			AsianHookWM.Name = "AsianHookWM"
			AsianHookWM.Parent = game.CoreGui
			AsianHookWM.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

			local Watermark = Instance.new("Frame")
			Watermark.Name = "Watermark"
			Watermark.Parent = AsianHookWM
			Watermark.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
			Watermark.Position = UDim2.new(0, 15, 0, 15)
			Watermark.Size = UDim2.new(0, 140, 0, 50)

			local Logo = Instance.new("Frame")
			Logo.Name = "Logo"
			Logo.Parent = Watermark
			Logo.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
			Logo.BorderSizePixel = 0
			Logo.Size = UDim2.new(0, 50, 0, 50)

			local Asianhook = Instance.new("ImageLabel")
			Asianhook.Name = "Asianhook"
			Asianhook.Parent = Logo
			Asianhook.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			Asianhook.BackgroundTransparency = 1.000
			Asianhook.BorderSizePixel = 0
			Asianhook.Size = UDim2.new(0, 50, 0, 50)
			Asianhook.Image = "rbxassetid://8561734844"

			local UICorner = Instance.new("UICorner")
			UICorner.CornerRadius = UDim.new(0, 5)
			UICorner.Parent = Watermark

			local Name = Instance.new("TextLabel")
			Name.Name = "Name"
			Name.Parent = Watermark
			Name.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			Name.BackgroundTransparency = 1.000
			Name.Position = UDim2.new(0.400000006, 0, 0, 0)
			Name.Size = UDim2.new(0, 75, 0, 25)
			Name.Font = Enum.Font.Code
			Name.LineHeight = 0.690
			Name.Text = "AsianHook"
			Name.TextColor3 = Color3.fromRGB(255, 255, 255)
			Name.TextSize = 15.000
			Name.TextStrokeTransparency = 0.000
			Name.TextXAlignment = Enum.TextXAlignment.Left

			local time1 = Instance.new("TextLabel")
			time1.Name = "time"
			time1.Parent = Watermark
			time1.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			time1.BackgroundTransparency = 1.000
			time1.Position = UDim2.new(0.400000006, 0, 0.5, 0)
			time1.Size = UDim2.new(0, 75, 0, 25)
			time1.Font = Enum.Font.Code
			time1.LineHeight = 1.500
			time1.Text = "dox$ $time"
			time1.TextColor3 = Color3.fromRGB(255, 255, 255)
			time1.TextSize = 14.000
			time1.TextStrokeTransparency = 0.000
			time1.TextXAlignment = Enum.TextXAlignment.Left


			local function to12H(hour)
				hour = hour % 24
				return (hour - 1) % 12 + 1
			end
			
			local function getTime()
				local date = os.date("*t")
				return ("%02d:%02d"):format(((date.hour % 24) - 1) % 12 + 1, date.min)
			end
			
			local TimeLabel = time1
			
			while wait(1) do
				local currentHour = os.date("*t")["hour"]
				if currentHour < 12 or currentHour == 24 then
					TimeLabel.Text = getTime()..' AM'
				else
					TimeLabel.Text = getTime()..' PM'
				end
			end

		else
			game.CoreGui.AsianHookWM:Destroy()
		end
	end)
	ui:Element("Toggle", "keybind list", nil, function(tbl) 
		library:SetKeybindVisible(tbl.Toggle) 
	end) 
	ui:Element("Toggle", "spectator list", nil, function(tbl)
		if tbl.Toggle then
			local SpectatorsList = IST("ScreenGui")
			local Spectators = Instance.new("Frame")
			local Container = Instance.new("Frame")
			local UIPadding = Instance.new("UIPadding")
			local Players = Instance.new("TextLabel")
			local UICorner = Instance.new("UICorner")
			local ImageLabel = Instance.new("ImageLabel")
			local name = Instance.new("TextLabel")
				
				SpectatorsList.Parent = game.CoreGui
				SpectatorsList.Name = "SpectatorsList"
				
				Spectators.Name = "Spectators"
				Spectators.Parent = game.CoreGui.SpectatorsList
				Spectators.BackgroundColor3 = Color3.fromRGB(23, 23, 23)
				Spectators.BorderColor3 = Color3.fromRGB(20, 20, 20)
				Spectators.Position = UDim2.new(-0.000526187476, 0, 0.498662233, 49)
				Spectators.Size = UDim2.new(0, 155, 0, 30)

				Container.Name = "Container"
				Container.Parent = Spectators
				Container.BackgroundTransparency = 1.000
				Container.BorderSizePixel = 0
				Container.Position = UDim2.new(0, 0, 0, 15)
				Container.Size = UDim2.new(1, 0, 0, 14)
				Container.ZIndex = 3

				UIPadding.Parent = Container
				UIPadding.PaddingLeft = UDim.new(0, 4)

				Players.Name = "Players"
				Players.Parent = Container
				Players.BackgroundTransparency = 1.000
				Players.Position = UDim2.new(0, 0, 1, 0)
				Players.Size = UDim2.new(0.980391979, 0, 1.14285719, 0)
				Players.ZIndex = 4
				Players.Font = Enum.Font.Code
				Players.Text = " >spectators"
				Players.TextColor3 = Color3.fromRGB(65025, 65025, 65025)
				Players.TextSize = 14.000
				Players.TextStrokeTransparency = 0.000
				Players.TextXAlignment = Enum.TextXAlignment.Left
				Players.TextYAlignment = Enum.TextYAlignment.Top

				UICorner.CornerRadius = UDim.new(0, 5)
				UICorner.Parent = Spectators

				ImageLabel.Parent = Spectators
				ImageLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
				ImageLabel.BorderSizePixel = 0
				ImageLabel.Size = UDim2.new(0, 30, 0, 30)
				ImageLabel.Image = "rbxassetid://8561734844"

				name.Name = "name"
				name.Parent = Spectators
				name.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
				name.BackgroundTransparency = 1.000
				name.BorderColor3 = Color3.fromRGB(255, 255, 255)
				name.Position = UDim2.new(0.222000003, 1, 0, 0)
				name.Size = UDim2.new(0, 120, 0, 30)
				name.ZIndex = 2
				name.Font = Enum.Font.Code
				name.Text = "spectators list"
				name.TextColor3 = Color3.fromRGB(255, 255, 255)
				name.TextSize = 14.000
				name.TextXAlignment = Enum.TextXAlignment.Left

				function GetSpectators()
					local CurrentSpectators = ""
					for i,v in pairs(game.Players:GetChildren()) do 
						pcall(function()
							if v ~= game.Players.LocalPlayer then
								if not v.Character then 
									if (v.CameraCF.Value.p - game.Workspace.CurrentCamera.CFrame.p).Magnitude < 10 then 
										if CurrentSpectators == "" then
												CurrentSpectators = " >"..v.Name
											else
												CurrentSpectators = CurrentSpectators.. "\n >" ..v.Name
											end
										end
									end
								end
							end)
						end
					return CurrentSpectators
				end

				spawn(function()
					while wait(0.1) do
						if SpectatorsList.Enabled then
							Players.Text = GetSpectators()
						end
					end
				end)
		else
			game.CoreGui.SpectatorsList:Destroy()
		end
	end)
	local function UpdateCrosshair() 
		if values.misc["crosshair editor"].enabled.Toggle then 
			local length = values.misc["crosshair editor"].length.Slider 
			Crosshair.LeftFrame.Size = UDIM2(0, length, 0, 2) 
			Crosshair.RightFrame.Size = UDIM2(0, length, 0, 2) 
			Crosshair.TopFrame.Size = UDIM2(0, 2, 0, length) 
			Crosshair.BottomFrame.Size = UDIM2(0, 2, 0, length) 
			for _,frame in pairs(Crosshair:GetChildren()) do 
				if FIND(frame.Name, "Frame") then 
					frame.BorderColor3 = COL3(0,0,0) 
					if values.misc["crosshair editor"].border.Toggle then 
						frame.BorderSizePixel = 1 
					else 
						frame.BorderSizePixel = 1 
					end 
				end 
			end 
		else 
			Crosshair.LeftFrame.Size = UDIM2(0, 10, 0, 2) 
			Crosshair.RightFrame.Size = UDIM2(0, 10, 0, 2) 
			Crosshair.TopFrame.Size = UDIM2(0, 2, 0, 10) 
			Crosshair.BottomFrame.Size = UDIM2(0, 2, 0, 10) 
			for _,frame in pairs(Crosshair:GetChildren()) do 
				if FIND(frame.Name, "Frame") then 
					frame.BorderSizePixel = 1 
				end 
			end 
		end 
	end 
	crosshaireditor:Element("Toggle", "enabled", nil, UpdateCrosshair) 
	crosshaireditor:Element("Slider", "length", {min = 1, max = 15, default = 10}, UpdateCrosshair) 
	crosshaireditor:Element("Toggle", "border", nil, UpdateCrosshair) 

	local client = misc:Sector("client", "Right") 
	client:Element("Toggle", "infinite cash", nil, function(tbl) 
		if tbl.Toggle then 
			LocalPlayer.Cash.Value = 9e9
		end 
	end) 
	client:Element("Toggle", "infinite crouch") 
	client:Element("Jumbobox", "damage bypass", {options = {"fire", "fall"}}) 
	client:Element("Jumbobox", "gun modifiers", {options = {"recoil", "spread", "reload", "equip", "ammo", "automatic", "penetration", "firerate"}}) 
	client:Element("Toggle", "remove killers", {}, function(tbl) 
		if tbl.Toggle then 
			if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("Killers") then 
				local clone = workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Clone() 
				clone.Name = "KillersClone" 
				clone.Parent = workspace:FindFirstChild("Map") 

				workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Destroy() 
			end 
		else 
			if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("KillersClone") then 
				workspace:FindFirstChild("Map"):FindFirstChild("KillersClone").Name = "Killers" 
			end 
		end 
	end) 
	client:Element("ToggleColor", "hitmarker", {default = {Color = COL3RGB(255,255,255)}}) 
	client:Element("Toggle", "buy any grenade") 
	client:Element("Toggle", "chat alive") 
	client:Element("Jumbobox", "shop", {options = {"inf time", "anywhere"}}) 
	client:Element("Toggle", "anti spectate") 
	client:Element("Toggle", "my eyes") 
	local oldgrenadeallowed = Client.grenadeallowed 
	Client.grenadeallowed = function(...) 
		if values.misc.client["buy any grenade"].Toggle then 
			return true 
		end 

		return oldgrenadeallowed(...) 
	end 

	local movement = misc:Sector("movement", "Left") 
	movement:Element("ToggleKeybind", "bunny hop") 
	movement:Element("Dropdown", "direction", {options = {"forward", "directional", "directional 2"}}) 
	movement:Element("Dropdown", "type", {options = {"gyro", "cframe"}}) 
	movement:Element("Slider", "speed", {min = 15, max = 300, default = 40}) 
	movement:Element("ToggleKeybind", "noclip",{},function(tbl)
		spawn(function()
			while values.misc.movement["noclip"].Toggle and values.misc.movement["noclip"].Active do
				game:GetService("RunService").Stepped:Wait()
				if LocalPlayer.Character then
					for i,v in pairs(LocalPlayer.Character:GetDescendants()) do
						if v:IsA("BasePart") then
							v.CanCollide = false
						end
					end
				end
			end
		end)
	end)      
	movement:Element("ToggleKeybind", "jump bug") 
	movement:Element("ToggleKeybind", "edge jump") 
	movement:Element("ToggleKeybind", "edge bug") 

	local chat = misc:Sector("chat", "Left") 
	chat:Element("Toggle", "chat spam", nil, function(tbl) 
		if tbl.Toggle then 
			while values.misc.chat["chat spam"].Toggle do 
				game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer(values.misc.chat.type.Dropdown == "salad.shitk" and "salad.shitk" or "bloxsense.pub always on top", false, "Innocent", false, true) 
				wait(values.misc.chat["speed (ms)"].Slider/1000) 
				 
			end 
		end 
	end) 
	world:Element('Toggle', 'Killsoundtoggle')
	world:Element('TextBox', 'Killsound', {placeholder = "ID HERE"})
	chat:Element("Dropdown", "type", {options = {"salad.shitk", "bs.pubwinning"}}) 
	chat:Element("Slider", "speed (ms)", {min = 15, max = 300, default = 50}) 
	chat:Element("Toggle", "kill say") 
	chat:Element("TextBox", "message", {placeholder = "message"}) 
	chat:Element("Toggle", "no filter") 

	local grenades = misc:Sector("grenades", "Right") 
	grenades:Element("ToggleKeybind", "spam grenades") 
	coroutine.wrap(function() 
		while true do 
			wait(0.5) 
			if values.misc.grenades["spam grenades"].Toggle and values.misc.grenades["spam grenades"].Active then 
				local oh1 = game:GetService("ReplicatedStorage").Weapons[values.misc.grenades.grenade.Dropdown].Model 
				local oh3 = 25 
				local oh4 = 35 
				local oh6 = "" 
				local oh7 = "" 
				game:GetService("ReplicatedStorage").Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vec3(0,-100,0), oh6, oh7) 
			end 
		end 
	end)() 
	grenades:Element("Dropdown", "grenade", {options = {"Flashbang", "Smoke Grenade", "Molotov", "HE Grenade", "Decoy Grenade"}}) 
	grenades:Element("Button", "crash server", {}, function() 
		RunService.RenderStepped:Connect(function() 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
				local oh1 = game:GetService("ReplicatedStorage").Weapons[values.misc.grenades.grenade.Dropdown].Model 
				local oh3 = 25 
				local oh4 = 35 
				local oh6 = "" 
				local oh7 = "" 
				local oh8 = game:GetService("ReplicatedStorage").Events.RemoteEvent:FireServer({[1] = "createparticle", [2] = "bullethole", [3] = Player.Character.Head, [4] = Vec3(0,0,0)}) 
				game:GetService("ReplicatedStorage").Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vec3(0,-100,0), oh6, oh7, oh8) 
			end 
		end) 
	end)
			grenades:Element("ToggleKeybind", "ping exploit", {Type = "Toggle", Key = "T"}, function(tbl)   
			if tbl.Toggle then 
					game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer("good night server", false, "Innocent", false, true) 
			end				
				spawn(function()
					while values.misc.grenades["ping exploit"].Toggle and values.misc.grenades["ping exploit"].Active do
							pcall(function()
								game:GetService("RunService").RenderStepped:Wait()
								for i = 1,values.misc.grenades["ping limit"].Slider,1 do
									game:GetService("ReplicatedStorage").Events.DropMag:FireServer(LocalPlayer.Character.Gun.Mag)
									for i,v in pairs(workspace["Ray_Ignore"]:GetChildren()) do
										if v.Name == "MagDrop" then
											v:Destroy()
										end
									end
								end
							end)
						
					end 
				end)    
			end)   
	grenades:Element("Slider", "ping limit", {min = 1, max = 10, default = 2})  
	grenades:Element("Toggle", "anti-ping", {}, function(tbl)      
				spawn(function()
					while values.misc.grenades["anti-ping"].Toggle do
						pcall(function()
							game:GetService("RunService").RenderStepped:Wait()
							for i,v in pairs(workspace["Ray_Ignore"]:GetChildren()) do
								if v.Name == "MagDrop" then
									v:Destroy()
								end
							end
						end)
					end 
				end)    
			end)  

	local Dance = INST("Animation") 
	Dance.AnimationId = "rbxassetid://5917459365" 

	local LoadedAnim 

	local animations = misc:Sector("animations", "Left") 
	animations:Element("ToggleKeybind", "enabled", nil, function(tbl) 
		pcall(function() 
			LoadedAnim:Stop() 
		end) 
		if not tbl.Toggle or tbl.Toggle and not tbl.Active then 
		else 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
				LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance) 
				LoadedAnim.Priority = Enum.AnimationPriority.Action 
				LoadedAnim:Play() 
			end 
		end 
	end) 
	animations:Element("Dropdown", "animation", {options = {"Default", "Floss", "head spin", "air anti aim", "dolphin", "not my fault", "sneaky", "T"}}, function(tbl)
		Dance.AnimationId = tbl.Dropdown == "Default" and "rbxassetid://3732699835" or tbl.Dropdown == "Floss" and "rbxassetid://5917459365" or tbl.Dropdown == "head spin" and "rbxassetid://3361426436" or tbl.Dropdown == "air anti aim" and "rbxassetid://4555782893" or tbl.Dropdown == "dolphin" and "rbxassetid://5918726674" or tbl.Dropdown == "not my fault" and "rbxassetid://6797891807" or tbl.Dropdown == "Sneaky" and "rbxassetid://896541152" or tbl.Dropdown == "T" and "rbxassetid://3338010159"
		pcall(function() 
			LoadedAnim:Stop() 
		end) 

		if values.misc.animations.enabled.Toggle and values.misc.animations.enabled.Active then 
			if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then 
				LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance) 
				LoadedAnim.Priority = Enum.AnimationPriority.Action 
				LoadedAnim:Play() 
			end 
		end 
	end) 
end


local objects = {} 
local utility = {} 
do 
	utility.default = { 
		Line = { 
			Thickness = 1.5, 
			Color = COL3RGB(255, 255, 255), 
			Visible = false 
		}, 
		Text = { 
			Size = 13, 
			Center = true, 
			Outline = true, 
			Font = Drawing.Fonts.Plex, 
			Color = COL3RGB(255, 255, 255), 
			Visible = false 
		}, 
		Square = { 
			Thickness = 1.5, 
			Filled = false, 
			Color = COL3RGB(255, 255, 255), 
			Visible = false 
		}, 
	} 
	function utility.create(type, isOutline) 
		local drawing = Drawing.new(type) 
		for i, v in pairs(utility.default[type]) do 
			drawing[i] = v 
		end 
		if isOutline then 
			drawing.Color = COL3(0,0,0) 
			drawing.Thickness = 3 
		end 
		return drawing 
	end 
	function utility.add(plr) 
		if not objects[plr] then 
			objects[plr] = { 
				Name = utility.create("Text"), 
				Weapon = utility.create("Text"), 
				Armor = utility.create("Text"), 
				BoxOutline = utility.create("Square", true), 
				Box = utility.create("Square"), 
				HealthOutline = utility.create("Line", true), 
				Health = utility.create("Line"), 
			} 
		end 
	end 
	for _,plr in pairs(Players:GetPlayers()) do 
		if Player ~= LocalPlayer then 
			utility.add(plr) 
		end 
	end 
	Players.PlayerAdded:Connect(utility.add) 
	Players.PlayerRemoving:Connect(function(plr) 
		wait() 
		if objects[plr] then 
			for i,v in pairs(objects[plr]) do 
				for i2,v2 in pairs(v) do 
					if v then 
						v:Remove() 
					end 
				end 
			end 

			objects[plr] = nil 
		end 
	end) 
end 
local Items = INST("ScreenGui") 
Items.Name = "Items" 
Items.Parent = game.CoreGui 
Items.ResetOnSpawn = false 
Items.ZIndexBehavior = "Global" 
do 
	function add(plr) 
		local ImageLabel = INST("ImageLabel") 
		ImageLabel.BackgroundColor3 = COL3RGB(255, 255, 255) 
		ImageLabel.BackgroundTransparency = 1.000 
		ImageLabel.Size = UDIM2(0, 62, 0, 25) 
		ImageLabel.Visible = false 
		ImageLabel.Image = "rbxassetid://1784884358" 
		ImageLabel.ScaleType = Enum.ScaleType.Fit 
		ImageLabel.Name = plr.Name 
		ImageLabel.AnchorPoint = Vec2(0.5,0.5) 
		ImageLabel.Parent = Items 
	end 
	for _,plr in pairs(Players:GetPlayers()) do 
		if Player ~= LocalPlayer then 
			add(plr) 
		end 
	end 
	Players.PlayerAdded:Connect(add) 
	Players.PlayerRemoving:Connect(function(plr) 
		wait() 
		Items[plr.Name]:Destroy() 
	end) 
end 
local debrisitems = {} 
workspace.Debris.ChildAdded:Connect(function(obj) 
	if obj:IsA("BasePart") and Weapons:FindFirstChild(obj.Name) then 
		RunService.RenderStepped:Wait() 

		local BillboardGui = INST("BillboardGui") 
		BillboardGui.AlwaysOnTop = true 
		BillboardGui.Size = UDIM2(0, 40, 0, 40) 
		BillboardGui.Adornee = obj 

		local ImageLabel = INST("ImageLabel") 
		ImageLabel.Parent = BillboardGui 
		ImageLabel.BackgroundTransparency = 1 
		ImageLabel.Size = UDIM2(1, 0, 1, 0) 
		ImageLabel.ImageColor3 = values.visuals.world["item esp"].Color 
		ImageLabel.Image = GetIcon.getWeaponOfKiller(obj.Name) 
		ImageLabel.ScaleType = Enum.ScaleType.Fit 
		ImageLabel.Visible = values.visuals.world["item esp"].Toggle and TBLFIND(values.visuals.world["types"].Jumbobox, "icon") and true or false 

		BillboardGui.Parent = obj 
	end 
end) 
for _, obj in pairs(workspace.Debris:GetChildren()) do 
	if obj:IsA("BasePart") and Weapons:FindFirstChild(obj.Name) then 
		RunService.RenderStepped:Wait() 

		local BillboardGui = INST("BillboardGui") 
		BillboardGui.AlwaysOnTop = true 
		BillboardGui.Size = UDIM2(0, 40, 0, 40) 
		BillboardGui.Adornee = obj 

		local ImageLabel = INST("ImageLabel") 
		ImageLabel.Parent = BillboardGui 
		ImageLabel.BackgroundTransparency = 1 
		ImageLabel.Size = UDIM2(1, 0, 1, 0) 
		ImageLabel.ImageColor3 = values.visuals.world["item esp"].Color 
		ImageLabel.Image = GetIcon.getWeaponOfKiller(obj.Name) 
		ImageLabel.ScaleType = Enum.ScaleType.Fit 
		ImageLabel.Visible = values.visuals.world["item esp"].Toggle and TBLFIND(values.visuals.world["types"].Jumbobox, "icon") and true or false 

		BillboardGui.Parent = obj 
	end 
end 
local function YROTATION(cframe) 
	local x, y, z = cframe:ToOrientation() 
	return CF(cframe.Position) * CFAngles(0,y,0) 
end 
local function XYROTATION(cframe) 
	local x, y, z = cframe:ToOrientation() 
	return CF(cframe.Position) * CFAngles(x,y,0) 
end 
local weps = { 
	Pistol = {"USP", "P2000", "Glock", "DualBerettas", "P250", "FiveSeven", "Tec9", "CZ", "DesertEagle", "R8"}, 
	SMG = {"MP9", "MAC10", "MP7", "UMP", "P90", "Bizon"}, 
	Rifle = {"M4A4", "M4A1", "AK47", "Famas", "Galil", "AUG", "SG"}, 
	Sniper = {"AWP", "Scout", "G3SG1"} 
} 
local weps2 = { 
	Pistol = {"USP", "P2000", "Glock", "DualBerettas", "P250", "FiveSeven", "Tec9", "CZ", "DesertEagle", "R8"}, 
	SMG = {"MP9", "MAC10", "MP7", "UMP", "P90", "Bizon"}, 
	Rifle = {"M4A4", "M4A1", "AK47", "Famas", "Galil", "AUG", "SG"}, 
	Sniper = {"AWP", "Scout", "G3SG1"} 
} 
local function GetWeaponRage(weapon) 
	return TBLFIND(weps.Pistol, weapon) and "pistol" or TBLFIND(weps.Rifle, weapon) and "rifle" or weapon == "AWP" and "awp" or weapon == "G3SG1"  and "auto" or weapon == "Scout" and "scout" or "default" 
end 
local function GetStatsRage(weapon) 
	if weapon == "default" then 
		return values.rage.weapons.default 
	else 
		if values.rage.weapons[weapon]["override default"].Toggle then 
			return values.rage.weapons[weapon] 
		else 
			return values.rage.weapons.default 
		end 
	end 
end 
local function GetWeaponLegit(weapon) 
	return TBLFIND(weps2.Pistol, weapon) and "pistol" or TBLFIND(weps2.Rifle, weapon) and "rifle" or TBLFIND(weps2.SMG, weapon) and "smg" or TBLFIND(weps2.Sniper, weapon) and "sniper" or "default" 
end 
local function GetStatsLegit(weapon) 
	if weapon == "default" then 
		return values.legit.main.default 
	else 
		if values.legit.main[weapon]["override default"].Toggle then 
			return values.legit.main[weapon] 
		else 
			return values.legit.main.default 
		end 
	end 
end 
local Jitter = false 
local Spin = 0 
local RageTarget 
local Filter = false 
local LastStep 
local TriggerDebounce = false 
local DisableAA = false 



local Fov = Drawing.new("Circle") 
Fov.Filled = false
Fov.Color = COL3RGB(15,15,15) 
Fov.Transparency = 0.5 
Fov.Position = UserInputService:GetMouseLocation()
Fov.Radius = 120 
Fov.Thickness = 1
RunService.RenderStepped:Connect(function(step) 
	Fov.Radius = values.legit.aimbot["field of view"].Slider 
	Fov.Visible =  values.legit.aimbot["draw fov"].Toggle 
	Fov.Color =  values.legit.aimbot["draw fov"].Color 
	LastStep = step 
	Ping = game.Stats.PerformanceStats.Ping:GetValue() 
	RageTarget = nil 
	local CamCFrame = Camera.CFrame 
	local CamLook = CamCFrame.LookVector 
	local PlayerIsAlive = false 
	local Character = LocalPlayer.Character 
	RageTarget = nil 
	Spin = CLAMP(Spin + values.rage.angles["spin speed"].Slider, 0, 360) 
	if Spin == 360 then Spin = 0 end 
	if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character:FindFirstChild("Humanoid").Health > 0 and LocalPlayer.Character:FindFirstChild("UpperTorso") then 
		PlayerIsAlive = true 
	end 
	for i,v in pairs(ChamItems) do 
		if v.Parent == nil then 
			TBLREMOVE(ChamItems, i) 
		end 
	end 
	Fov.Position = Vec2(Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2) 
	if PlayerIsAlive then 
		local SelfVelocity = LocalPlayer.Character.HumanoidRootPart.Velocity 
		if values.rage.fakelag["ping spike"].Toggle and values.rage.fakelag["ping spike"].Active then 
			for count = 1, 20  do 
				game:GetService("ReplicatedStorage").Events.RemoteEvent:FireServer({[1] = "createparticle", [2] = "bullethole", [3] = LocalPlayer.Character.Head, [4] = Vec3(0,0,0)}) 
			end 
		end 
		local Root = LocalPlayer.Character.HumanoidRootPart 
		if values.misc.client["infinite crouch"].Toggle then 
			Client.crouchcooldown = 0 
		end 
		if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "firerate") then 
			Client.DISABLED = false 
		end
		if values.rage.exploits["kill all"].Toggle and values.rage.exploits["kill all"].Active and LocalPlayer.Character:FindFirstChild("UpperTorso") and LocalPlayer.Character:FindFirstChild("Gun") then
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character and Player.Team ~= LocalPlayer.Team and Player.Character:FindFirstChild("UpperTorso") then
					local oh1 = Player.Character.Head
					local oh2 = Player.Character.Head.CFrame.p
					local oh3 = Client.gun.Name
					local oh4 = 4096
					local oh5 = LocalPlayer.Character.Gun
					local oh8 = 15
					local oh9 = false
					local oh10 = false
					local oh11 = Vector3.new(0,0,0)
					local oh12 = 46868
					local oh13 = Vector3.new(0, 0, 0)
					game:GetService("ReplicatedStorage").Events.HitPart:FireServer(oh1, oh2, oh3, oh4, oh5, oh6, oh7, oh8, oh9, oh10, oh11, oh12, oh13)
				end
			end
		end
		if TBLFIND(values.visuals.effects.removals.Jumbobox, "scope lines") then 
			NewScope.Enabled = LocalPlayer.Character:FindFirstChild("AIMING") and true or false 
			Crosshairs.Scope.Visible = false 
		else 
			NewScope.Enabled = false 
		end 
		local RageGuy 
		if workspace:FindFirstChild("Map") and Client.gun ~= "none" and Client.gun.Name ~= "C4" then 
			if values.rage.aimbot.enabled.Toggle then 
				local Origin = values.rage.aimbot.origin.Dropdown == "character" and LocalPlayer.Character.LowerTorso.Position + Vec3(0, 2.5, 0) or CamCFrame.p 
				local Stats = GetStatsRage(GetWeaponRage(Client.gun.Name)) 
				for _,Player in pairs(Players:GetPlayers()) do 
					if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "firerate") then 
						Client.DISABLED = false 
					end 
					if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 and Player.Team ~= "TTT" and Player ~= LocalPlayer then 
						if TBLFIND(values.rage.aimbot.resolver.Jumbobox, "pitch") then 
							Player.Character.UpperTorso.Waist.C0 = CFAngles(0, 0, 0)      
							Player.Character.LowerTorso.Root.C0 = CFAngles(0,0,0)
							Player.Character.Head.Neck.C0 = CFrame.new(0,1,0) * CFAngles(0, 0, 0) 
						end 
						if TBLFIND(values.rage.aimbot.resolver.Jumbobox, "roll") then 
							Player.Character.Humanoid.MaxSlopeAngle = 0 
						end 						
						if TBLFIND(values.rage.aimbot.resolver.Jumbobox, "animation") then     
							for i2,Animation in pairs(Player.Character.Humanoid:GetPlayingAnimationTracks()) do
								Animation:Stop()
							end
						end     
					end
					if Player.Character and Player.Character:FindFirstChild("Humanoid") and not Client.DISABLED and Player.Character:FindFirstChild("Humanoid").Health > 0 and Player.Team ~= "TTT" and not Player.Character:FindFirstChildOfClass("ForceField") and GetDeg(CamCFrame, Player.Character.HumanoidRootPart.Position) <= Stats["max fov"].Slider and Player ~= LocalPlayer then 
						if Player.Team ~= LocalPlayer.Team or values.rage.aimbot.teammates.Toggle and Player:FindFirstChild("Status") and Player.Status.Team.Value ~= LocalPlayer.Status.Team.Value and Player.Status.Alive.Value then 
							if Client.gun:FindFirstChild("Melee") and values.rage.aimbot["knifebot"].Toggle then 
								local Ignore = {unpack(Collision)} 
								INSERT(Ignore, workspace.Map.Clips) 
								INSERT(Ignore, workspace.Map.SpawnPoints) 
								INSERT(Ignore, LocalPlayer.Character) 
								if Player.Character:FindFirstChild("BackC4") then 
									INSERT(Ignore, Player.Character.BackC4) 
								end 
								if Player.Character:FindFirstChild("Gun") then 
									INSERT(Ignore, Player.Character.Gun) 
								end 

								local Ray = RAY(Origin, (Player.Character.Head.Position - Origin).unit * 20) 
								local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore, false, true) 

								if Hit and Hit.Parent == Player.Character then 
									RageGuy = Hit 
									RageTarget = Hit 
									if not values.rage.aimbot["silent aim"].Toggle then 
										Camera.CFrame = CF(CamCFrame.Position, Hit.Position) 
									end 
									Filter = true 
									Client.firebullet() 
									Filter = false 

									local Arguments = { 
										[1] = Hit, 
										[2] = Hit.Position, 
										[3] = Client.gun.Name, 
										[4] = 4096, 
										[5] = LocalPlayer.Character.Gun, 
										[8] = 1, 
										[9] = false, 
										[10] = false, 
										[11] = Vec3(), 
										[12] = 16868, 
										[13] = Vec3() 
									} 
									game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments)) 
								end 
							else 
								local Ignore = {unpack(Collision)} 
								INSERT(Ignore, workspace.Map.Clips) 
								INSERT(Ignore, workspace.Map.SpawnPoints) 
								INSERT(Ignore, LocalPlayer.Character) 
								INSERT(Ignore, Player.Character.HumanoidRootPart) 
								if Player.Character:FindFirstChild("BackC4") then 
									INSERT(Ignore, Player.Character.BackC4) 
								end 
										local Ignore = {unpack(Collision)}      
										INSERT(Ignore, workspace.Map.Clips)      
										INSERT(Ignore, workspace.Map.SpawnPoints)      
										INSERT(Ignore, LocalPlayer.Character)      
										INSERT(Ignore, Player.Character.HumanoidRootPart)      
										if Player.Character:FindFirstChild("BackC4") then      
											INSERT(Ignore, Player.Character.BackC4)      
										end      
										if Player.Character:FindFirstChild("Gun") then      
											INSERT(Ignore, Player.Character.Gun)      
										end      

								local Hitboxes = {} 
								for _,Hitbox in ipairs(Stats.hitboxes.Jumbobox) do 
									if Stats["prefer baim"].Toggle then 
										if Hitbox == "head" and (not values.rage.aimbot["auto baim"].Toggle and not values.rage.aimbot["auto baim"].Active or Player.Character:FindFirstChild("FakeHead")) then 
											INSERT(Hitboxes, Player.Character.Head) 
									elseif Hitbox == "torso" then 
											INSERT(Hitboxes, Player.Character.UpperTorso) 
										else 
											INSERT(Hitboxes, Player.Character.LowerTorso) 
										end 
									else 
										if Hitbox == "torso" then 
											INSERT(Hitboxes, Player.Character.UpperTorso) 
										elseif Hitbox == "pelvis" then 
											INSERT(Hitboxes, Player.Character.LowerTorso) 
										elseif not values.rage.aimbot["auto baim"].Toggle and not values.rage.aimbot["auto baim"].Active or Player.Character:FindFirstChild("FakeHead") then 
											INSERT(Hitboxes, Player.Character.Head) 
										end 
									end 
								end     

								for _,Hitbox in ipairs(Hitboxes) do 
									local Ignore2 = {unpack(Ignore)} 
									for _,Part in pairs(Player.Character:GetChildren()) do 
										if Part ~= Hitbox then INSERT(Ignore2, Part) end 
									end 
									if values.rage.aimbot["autowall"].Toggle then 
									    local Hits = {}
										local EndHit, Hit, Pos
										local Penetration = Client.gun.Penetration.Value * 0.01
										local Ray1 = Ray.new(Origin, (Hitbox.Position - Origin).unit * (Hitbox.Position - Origin).magnitude)
										repeat
											Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore2, false, true)
											if Hit ~= nil and Hit.Parent ~= nil then
												if Hit and Multipliers[Hit.Name] ~= nil then
													EndHit = Hit
												else
													table.insert(Ignore2, Hit)
													table.insert(Hits, {["Position"] = Pos,["Hit"] = Hit})
												end
											end
										until EndHit ~= nil or #Hits >= 4 or Hit == nil
										if EndHit ~= nil and Multipliers[EndHit.Name] ~= nil and #Hits <= 4 then
											if #Hits == 0 then
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name]
												if Player:FindFirstChild("Kevlar") then
													if string.find(EndHit.Name, "Head") then
														if Player:FindFirstChild("Helmet") then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100
												if Damage >= Stats["minimum damage"].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot["silent aim"].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot["automatic fire"].Dropdown == "standard" then
														Client.firebullet()
														if values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
                                                            Client.firebullet()
														end
														if values.rage.exploits["triple tap"].Toggle and values.rage.exploits["triple tap"].Active then
															Client.firebullet()
                                                            Client.firebullet()
														end
														CreateHitElement("Hit "..EndHit.Parent.Name.." in the "..EndHit.Name,Color3.new(1,1,1)) 
													elseif values.rage.aimbot["automatic fire"].Dropdown == "hitpart" then
														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
                                                            Client.firebullet()
														end														
														if values.rage.exploits["triple tap"].Toggle and values.rage.exploits["triple tap"].Active then
															Client.firebullet()
															Client.firebullet()
															local Arguments = {
																[1] = EndHit,
																[2] = EndHit.Position,
																[3] = LocalPlayer.Character.EquippedTool.Value,
																[4] = 100,
																[5] = LocalPlayer.Character.Gun,
																[8] = 1,
																[9] = false,
																[10] = false,
																[11] = Vector3.new(),
																[12] = 100,
																[13] = Vector3.new()
															}
															game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														end
														CreateHitElement("Hit "..EndHit.Parent.Name.." in the "..EndHit.Name,Color3.new(1,1,1)) 
													end
													Filter = false
													break
												end
											else
												local penetration = Client.gun.Penetration.Value * 0.01
												local limit = 0
												local dmgmodifier = 1
												for i = 1, #Hits do
													local data = Hits[i]
													local part = data["Hit"]
													local pos = data["Position"]
													local modifier = 1
													if part.Material == Enum.Material.DiamondPlate then
														modifier = 3
													end
													if part.Material == Enum.Material.CorrodedMetal or part.Material == Enum.Material.Metal or part.Material == Enum.Material.Concrete or part.Material == Enum.Material.Brick then
														modifier = 2
													end
													if part.Name == "Grate" or part.Material == Enum.Material.Wood or part.Material == Enum.Material.WoodPlanks then
														modifier = 0.1
													end
													if part.Name == "nowallbang" then
														modifier = 100
													end
													if part:FindFirstChild("PartModifier") then
														modifier = part.PartModifier.Value
													end
													if part.Transparency == 1 or part.CanCollide == false or part.Name == "Glass" or part.Name == "Cardboard" then
														modifier = 0
													end
													local direction = (Hitbox.Position - pos).unit * math.clamp(Client.gun.Range.Value, 1, 100)
													local ray = Ray.new(pos + direction * 1, direction * -2)
													local _,endpos = workspace:FindPartOnRayWithWhitelist(ray, {part}, true)
													local thickness = (endpos - pos).Magnitude
													thickness = thickness * modifier
													limit = math.min(penetration, limit + thickness)
													dmgmodifier = 1 - limit / penetration
												end
												local Damage = Client.gun.DMG.Value * Multipliers[EndHit.Name] * dmgmodifier
												if Player:FindFirstChild("Kevlar") then
													if string.find(EndHit.Name, "Head") then
														if Player:FindFirstChild("Helmet") then
															Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
														end
													else
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												end
												Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - EndHit.Position).Magnitude/500))/100
												if Damage >= Stats["minimum damage"].Slider then
													RageGuy = EndHit
													RageTarget = EndHit
													if not values.rage.aimbot["silent aim"].Toggle then
														Camera.CFrame = CFrame.new(CamCFrame.Position, EndHit.Position)
													end
													Filter = true
													if values.rage.aimbot["automatic fire"].Dropdown == "standard" then
														Client.firebullet()
														if values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
                                                            Client.firebullet()
														end														
														if values.rage.exploits["triple tap"].Toggle and values.rage.exploits["triple tap"].Active then
															Client.firebullet()
															Client.firebullet()
															Client.firebullet()
														end
														CreateHitElement("Hit "..EndHit.Parent.Name.." in the "..EndHit.Name,Color3.new(1,1,1)) 
													elseif values.rage.aimbot["automatic fire"].Dropdown == "hitpart" then
														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														CreateHitElement("Hit "..EndHit.Parent.Name.." in the "..EndHit.Name,Color3.new(1,1,1)) 
														if values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
                                                            Client.firebullet()
														end														
														if values.rage.exploits["triple tap"].Toggle and values.rage.exploits["triple tap"].Active then
															Client.firebullet()
															Client.firebullet()
															Client.firebullet()
															local Arguments = {
																[1] = EndHit,
																[2] = EndHit.Position,
																[3] = LocalPlayer.Character.EquippedTool.Value,
																[4] = 100,
																[5] = LocalPlayer.Character.Gun,
																[8] = 1,
																[9] = false,
																[10] = false,
																[11] = Vector3.new(),
																[12] = 100,
																[13] = Vector3.new()
															}
															game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														end
													end
													Filter = false
													break
												end
											end
										end
									else
										local Ray = Ray.new(Origin, (Hitbox.Position - Origin).unit * (Hitbox.Position - Origin).magnitude)
										local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray, Ignore2, false, true)
										if Hit and Multipliers[Hit.Name] ~= nil then
											local Damage = Client.gun.DMG.Value * Multipliers[Hit.Name]
											if Player:FindFirstChild("Kevlar") then
												if string.find(Hit.Name, "Head") then
													if Player:FindFirstChild("Helmet") then
														Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
													end
												else
													Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value
												end
											end
											Damage = Damage * (Client.gun.RangeModifier.Value/100 ^ ((Origin - Hit.Position).Magnitude/500))
											if Damage >= Stats["minimum damage"].Slider then
												RageGuy = Hit
												RageTarget = Hit
												if not values.rage.aimbot["silent aim"].Toggle then
													Camera.CFrame = CFrame.new(CamCFrame.Position, Hit.Position)
												end
												Filter = true
												if values.rage.aimbot["automatic fire"].Dropdown == "standard" then
													Client.firebullet()
														if values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
                                                            Client.firebullet()
														end													
													if values.rage.exploits["triple tap"].Toggle and values.rage.exploits["triple tap"].Active then
														Client.firebullet()
														Client.firebullet()
													end
													CreateHitElement("Hit "..EndHit.Parent.Name.." in the "..EndHit.Name,Color3.new(1,1,1)) 
												elseif values.rage.aimbot["automatic fire"].Dropdown == "hitpart" then
													CreateHitElement("Hit "..EndHit.Parent.Name.." in the "..EndHit.Name,Color3.new(1,1,1)) 
													Client.firebullet()
													local Arguments = {
														[1] = EndHit,
														[2] = EndHit.Position,
														[3] = LocalPlayer.Character.EquippedTool.Value,
														[4] = 100,
														[5] = LocalPlayer.Character.Gun,
														[8] = 1,
														[9] = false,
														[10] = false,
														[11] = Vector3.new(),
														[12] = 100,
														[13] = Vector3.new()
													}
													game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
														if values.rage.exploits["double tap"].Toggle and values.rage.exploits["double tap"].Active then
                                                            Client.firebullet()
														end													
													if values.rage.exploits["triple tap"].Toggle and values.rage.exploits["triple tap"].Active then
														Client.firebullet()
														Client.firebullet()
														local Arguments = {
															[1] = EndHit,
															[2] = EndHit.Position,
															[3] = LocalPlayer.Character.EquippedTool.Value,
															[4] = 100,
															[5] = LocalPlayer.Character.Gun,
															[8] = 1,
															[9] = false,
															[10] = false,
															[11] = Vector3.new(),
															[12] = 100,
															[13] = Vector3.new()
														}
														game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments))
													end
												end
												Filter = false
												break
											end
										end
									end
								end
							end
						end 
					end 
				end 
			elseif values.legit.aimbot["aim assist"].Toggle and values.legit.aimbot["aim assist"].Active and not library.uiopen then 
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name)) 
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris} 
				local Closest = 9999 
				local Target 

				if not TBLFIND(Stats.conditions.Jumbobox, "smoke") then 
					INSERT(Ignore, workspace.Ray_Ignore) 
				end 

				if not TBLFIND(Stats.conditions.Jumbobox, "blind") or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then 
					if not TBLFIND(Stats.conditions.Jumbobox, "standing") or SelfVelocity.Magnitude < 3 then 
						for _,Player in pairs(Players:GetPlayers()) do 
							if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 then 
								if not values.legit.settings["forcefield check"].Toggle or not Player.Character:FindFirstChildOfClass("ForceField") then 
									if Player.Team ~= LocalPlayer.Team or values.legit.settings["free for all"].Toggle then 
										local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position) 
										if onScreen then 
											local Magnitude = (Vec2(Pos.X, Pos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
											if Magnitude < Stats["field of view"].Slider then 
												local Hitbox = Stats.hitbox.Dropdown == "head" and Player.Character.Head or Stats.hitbox.Dropdown == "chest" and Player.Character.UpperTorso 
												if Stats.hitbox.Dropdown == "closest" then 
													local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position) 
													local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position) 
													local HeadDistance = (Vec2(HeadPos.X, HeadPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
													local TorsoDistance = (Vec2(TorsoPos.X, TorsoPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
													if HeadDistance < TorsoDistance then 
														Hitbox = Player.Character.Head 
													else 
														Hitbox = Player.Character.UpperTorso 
													end 
												end 
												if Hitbox ~= nil then 
													if not TBLFIND(Stats.conditions.Jumbobox, "visible") then 
														Target = Hitbox 
													else 
														local Ray1 = RAY(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude) 
														local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true) 
														if Hit and Hit:FindFirstAncestor(Player.Name) then 
															Target = Hitbox 
														end 
													end 
												end 
											end 
										end 
									end 
								end 
							end 
						end 
					end 
				end 

				if Target ~= nil then 
					local Pos = Camera:WorldToScreenPoint(Target.Position) 
					local Magnitude = Vec2(Pos.X - Mouse.X, Pos.Y - Mouse.Y) 
					mousemoverel(Magnitude.x/Stats.smoothing.Slider, Magnitude.y/Stats.smoothing.Slider) 
				end 
			end 
			if not values.rage.aimbot.enabled.Toggle and values.legit.aimbot["triggerbot"].Toggle and values.legit.aimbot["triggerbot"].Active and not TriggerDebounce then 
				local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name)) 
				if Stats.triggerbot.Toggle then 
					if not TBLFIND(Stats.conditions.Jumbobox, "blind") or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then 
						if not TBLFIND(Stats.conditions.Jumbobox, "standing") or SelfVelocity.Magnitude < 3 then 
							if Mouse.Target and Mouse.Target.Parent and Players:GetPlayerFromCharacter(Mouse.Target.Parent) and Multipliers[Mouse.Target.Name] ~= nil and Client.gun.DMG.Value * Multipliers[Mouse.Target.Name] >= Stats["minimum dmg"].Slider then 
								local OldTarget = Mouse.Target 
								local Player = Players:GetPlayerFromCharacter(Mouse.Target.Parent) 
								if Player.Team ~= LocalPlayer.Team or values.legit.settings["free for all"].Toggle then 
									coroutine.wrap(function() 
										TriggerDebounce = true 
										wait(Stats["delay (ms)"].Slider/1000) 
										repeat RunService.RenderStepped:Wait() 
											if not Client.DISABLED then 
												Client.firebullet() 
											end 
										until Mouse.Target == nil or Player ~= Players:GetPlayerFromCharacter(Mouse.Target.Parent) 
										TriggerDebounce = false 
									end)() 
								end 
							end 
						end 
					end 
				end 
			end 
		end 
		BodyVelocity:Destroy() 
		BodyVelocity = INST("BodyVelocity") 
		if UserInputService:IsKeyDown("Space") and values.misc.movement["bunny hop"].Toggle then 
			local add = 0 
			if values.misc.movement.direction.Dropdown == "directional" or values.misc.movement.direction.Dropdown == "directional 2" then 
				if UserInputService:IsKeyDown("A") then add = 90 end 
				if UserInputService:IsKeyDown("S") then add = 180 end 
				if UserInputService:IsKeyDown("D") then add = 270 end 
				if UserInputService:IsKeyDown("A") and UserInputService:IsKeyDown("W") then add = 45 end 
				if UserInputService:IsKeyDown("D") and UserInputService:IsKeyDown("W") then add = 315 end 
				if UserInputService:IsKeyDown("D") and UserInputService:IsKeyDown("S") then add = 225 end 
				if UserInputService:IsKeyDown("A") and UserInputService:IsKeyDown("S") then add = 145 end 
			end 
			local rot = YROTATION(CamCFrame) * CFAngles(0,RAD(add),0) 
			BodyVelocity.Parent = LocalPlayer.Character.UpperTorso 
			LocalPlayer.Character.Humanoid.Jump = true 
			BodyVelocity.MaxForce = Vector3.new(99999,0,99999)
			BodyVelocity.Velocity = Vec3(rot.LookVector.X,0,rot.LookVector.Z) * (values.misc.movement["speed"].Slider * 2) 
			if add == 0 and values.misc.movement.direction.Dropdown == "directional" and not UserInputService:IsKeyDown("W") then 
				BodyVelocity:Destroy() 
			elseif values.misc.movement.type.Dropdown == "cframe" then 
			    BodyVelocity:Destroy()
				Root.CFrame = Root.CFrame + Vec3(rot.LookVector.X,0,rot.LookVector.Z) * values.misc.movement["speed"].Slider/50 
			end 
		end 
		if values.misc.movement["edge jump"].Toggle and values.misc.movement["edge jump"].Active then 
			if LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then 
				coroutine.wrap(function() 
					RunService.RenderStepped:Wait() 
					if LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild("Humanoid") and LocalPlayer.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then 
						LocalPlayer.Character.Humanoid:ChangeState("Jumping") 
					end 
				end)() 
			end 
		end 
		Jitter = not Jitter 
		LocalPlayer.Character.Humanoid.AutoRotate = false 
		if values.rage.angles.enabled.Toggle and not DisableAA then 
			local Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) 
			if values.rage.angles["yaw base"].Dropdown == "spin" then 
				Angle = Angle + RAD(Spin) 
			end 
			if values.rage.angles["yaw base"].Dropdown == "random" then 
				Angle = Angle + RAD(RANDOM(0, 360)) 
			end 
			if values.rage.angles["yaw base"].Dropdown == "anti crippin'" then 
				Angle = Angle + CLAMP(Spin + 100, 0, 180) 
			end 
				if values.rage.angles["yaw base"].Dropdown == "keybind yaw" then 
               			 if UserInputService:IsKeyDown("W") then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
                		elseif values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
                		end
                		if UserInputService:IsKeyDown("A") then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(90)
                		elseif values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
                		end
                		if UserInputService:IsKeyDown("S") then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(180)
                		elseif values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
                		end
                		if UserInputService:IsKeyDown("D") then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(-90)
                		elseif values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
                		Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
                		end
            		end 
				if values.rage.angles["reset yaw"].Toggle and values.rage.angles["reset yaw"].Active then
                Angle = -ATAN2(CamLook.Z, CamLook.X) + RAD(-90) + RAD(0)
            end
			local Offset = RAD(-values.rage.angles["yaw offset"].Slider - (values.rage.angles.jitter.Toggle and Jitter and values.rage.angles["jitter offset"].Slider or 0)) 
			local CFramePos = CF(Root.Position) * CFAngles(0, Angle + Offset, 0) 
			if values.rage.angles["yaw base"].Dropdown == "targets" then 
				local part 
				local closest = 9999 
				for _,plr in pairs(Players:GetPlayers()) do 
					if plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("Humanoid").Health > 0 and plr.Team ~= LocalPlayer.Team then 
						local pos, onScreen = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position) 
						local magnitude = (Vec2(pos.X, pos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
						if closest > magnitude then 
							part = plr.Character.HumanoidRootPart 
							closest = magnitude 
						end 
					end 
				end 
				if part ~= nil then 
					CFramePos = CF(Root.Position, part.Position) * CFAngles(0, Offset, 0) 
				end 
			end 

			Root.CFrame = YROTATION(CFramePos) 
			if values.rage.angles["body roll"].Dropdown == "180" then
				Root.CFrame = Root.CFrame * CFAngles(values.ragebot.angles["body roll"].Dropdown == "180" and RAD(180) or 0, 1, 0)
				LocalPlayer.Character.Humanoid.HipHeight = 4
			else
				LocalPlayer.Character.Humanoid.HipHeight = 2
			end

			Root.CFrame = YROTATION(CFramePos) 
			if values.rage.angles["body roll"].Dropdown == "360" then 
				Root.CFrame = Root.CFrame * CFAngles(values.rage.angles["body roll"].Dropdown == "360" and RAD(-values.rage.angles["body roll offset"].Slider or 0) or 0, 1, 0)  
				LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1
			else 
				LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1
			end
			local Pitch = values.rage.angles["pitch"].Dropdown == "up" and 1 or values.rage.angles["pitch"].Dropdown == "down" and -1 or values.rage.angles["pitch"].Dropdown == "180v2" and 2 or values.rage.angles["pitch"].Dropdown == "180v3" and -9 or values.rage.angles["pitch"].Dropdown == "random" and RANDOM(-25, 25)/25 or values.rage.angles["pitch"].Dropdown == "random2" and RANDOM(-99999999, 100)/100 or values.rage.angles["pitch"].Dropdown == "totally normal" and -71 or values.rage.angles["pitch"].Dropdown == "totally normal2" and 71 or values.rage.angles["pitch"].Dropdown == "custom" and values.rage.angles["pitch angle"].Slider or values.rage.angles["pitch"].Dropdown == "up2" and 12 or values.rage.angles["pitch"].Dropdown == "down2" and -12 or values.rage.angles["pitch"].Dropdown == "fake headless" and -99 or values.rage.angles["pitch"].Dropdown == "sucking dick" and -62 or values.rage.angles["pitch"].Dropdown == "huge" and math.huge or 2.5 
			if values.rage.angles["extend pitch"].Toggle and (values.rage.angles["pitch"].Dropdown == "up" or values.rage.angles["pitch"].Dropdown == "down" or values.rage.angles["pitch"].Dropdown == "180" or values.rage.angles["pitch"].Dropdown == "fake headless" or values.rage.angles["pitch"].Dropdown == "sucking dick") then 
				Pitch = (Pitch*2)/1.6 
            end
			if values.rage.angles["reset pitch"].Toggle and values.rage.angles["reset pitch"].Active then
                Pitch = 0
			end
			game.ReplicatedStorage.Events.ControlTurn:FireServer(Pitch, LocalPlayer.Character:FindFirstChild("Climbing") and true or false) 
		else 
			LocalPlayer.Character.Humanoid.HipHeight = values.rage.angles["high pos"].Slider or 1 
			Root.CFrame = CF(Root.Position) * CFAngles(0, -ATAN2(CamLook.Z, CamLook.X) + RAD(270), 0) 
			game.ReplicatedStorage.Events.ControlTurn:FireServer(CamLook.Y, LocalPlayer.Character:FindFirstChild("Climbing") and true or false) 
		end
		if values.rage.others["remove head (gay)"].Toggle then 
			if LocalPlayer.Character:FindFirstChild("FakeHead") then 
				LocalPlayer.Character.FakeHead:Destroy() 
			end 
			if LocalPlayer.Character:FindFirstChild("HeadHB") then 
				LocalPlayer.Character.HeadHB:Destroy() 
			end 
		end 
		if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "recoil") then 
			Client.resetaccuracy() 
			Client.RecoilX = 0 
			Client.RecoilY = 0 
		end 
	end 
	for _,Player in pairs(Players:GetPlayers()) do 
		if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Character.HumanoidRootPart:FindFirstChild("OldPosition") then 
			coroutine.wrap(function() 
				local Position = Player.Character.HumanoidRootPart.Position 
				RunService.RenderStepped:Wait() 
				if Player.Character and Player ~= LocalPlayer and Player.Character:FindFirstChild("HumanoidRootPart") then 
					if Player.Character.HumanoidRootPart:FindFirstChild("OldPosition") then 
						Player.Character.HumanoidRootPart.OldPosition.Value = Position 
					else 
						local Value = INST("Vector3Value") 
						Value.Name = "OldPosition" 
						Value.Value = Position 
						Value.Parent = Player.Character.HumanoidRootPart 
					end 
				end 
			end)() 
		end 
	end 
	for _,Player in pairs(Players:GetPlayers()) do 
		local tbl = objects[Player] 
		if tbl == nil then return end 
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and Player.Team ~= "TTT" and (Player.Team ~= LocalPlayer.Team or values.visuals.players.teammates.Toggle) and Player.Character:FindFirstChild("Gun") and Player.Character:FindFirstChild("Humanoid") and Player ~= LocalPlayer then 
			local HumanoidRootPart = Player.Character.HumanoidRootPart 
			local RootPosition = HumanoidRootPart.Position 
			local Pos, OnScreen = Camera:WorldToViewportPoint(RootPosition) 
			local Size = (Camera:WorldToViewportPoint(RootPosition - Vec3(0, 3, 0)).Y - Camera:WorldToViewportPoint(RootPosition + Vec3(0, 2.6, 0)).Y) / 2 

			local Drawings, Text = TBLFIND(values.visuals.players.outlines.Jumbobox, "drawings") ~= nil, TBLFIND(values.visuals.players.outlines.Jumbobox, "text") ~= nil 

			tbl.Box.Color = values.visuals.players.box.Color 
			tbl.Box.Size = Vec2(Size * 1.5, Size * 1.9) 
			tbl.Box.Position = Vec2(Pos.X - Size*1.5 / 2, (Pos.Y - Size*1.6 / 2)) 

			if values.visuals.players.box.Toggle then 
				tbl.Box.Visible = OnScreen 
				if Drawings then 
					tbl.BoxOutline.Size = tbl.Box.Size 
					tbl.BoxOutline.Position = tbl.Box.Position 
					tbl.BoxOutline.Visible = OnScreen 
				else 
					tbl.BoxOutline.Visible = false 
				end 
			else 
				tbl.Box.Visible = false 
				tbl.BoxOutline.Visible = false 
			end 

			if values.visuals.players.health.Toggle then 
				tbl.Health.Color = COL3(0,1,0) 
				tbl.Health.From = Vec2((tbl.Box.Position.X - 5), tbl.Box.Position.Y + tbl.Box.Size.Y) 
				tbl.Health.To = Vec2(tbl.Health.From.X, tbl.Health.From.Y - CLAMP(Player.Character.Humanoid.Health / Player.Character.Humanoid.MaxHealth, 0, 1) * tbl.Box.Size.Y) 
				tbl.Health.Visible = OnScreen 
				if Drawings then 
					tbl.HealthOutline.From = Vec2(tbl.Health.From.X, tbl.Box.Position.Y + tbl.Box.Size.Y + 1) 
					tbl.HealthOutline.To = Vec2(tbl.Health.From.X, (tbl.Health.From.Y - 1 * tbl.Box.Size.Y) -1) 
					tbl.HealthOutline.Visible = OnScreen 
				else 
					tbl.HealthOutline.Visible = false 
				end 
			else 
				tbl.Health.Visible = false 
				tbl.HealthOutline.Visible = false 
			end 

			if values.visuals.players.weapon.Toggle then 
				tbl.Weapon.Color = values.visuals.players.weapon.Color 
				tbl.Weapon.Text = Player.Character.EquippedTool.Value 
				tbl.Weapon.Position = Vec2(tbl.Box.Size.X/2 + tbl.Box.Position.X, tbl.Box.Size.Y + tbl.Box.Position.Y + 1) 
				tbl.Weapon.Font = Drawing.Fonts[values.visuals.players.font.Dropdown] 
				tbl.Weapon.Outline = Text 
				tbl.Weapon.Size = values.visuals.players.size.Slider 
				tbl.Weapon.Visible = OnScreen 
			else 
				tbl.Weapon.Visible = false 
			end 

			if values.visuals.players["weapon icon"].Toggle then 
				Items[Player.Name].ImageColor3 = values.visuals.players["weapon icon"].Color 
				Items[Player.Name].Image = GetIcon.getWeaponOfKiller(Player.Character.EquippedTool.Value) 
				Items[Player.Name].Position = UDIM2(0, tbl.Box.Size.X/2 + tbl.Box.Position.X, 0, tbl.Box.Size.Y + tbl.Box.Position.Y + (values.visuals.players.weapon.Toggle and -10 or -22)) 
				Items[Player.Name].Visible = OnScreen 
			else 
				Items[Player.Name].Visible = false 
			end 

			if values.visuals.players.name.Toggle then 
				tbl.Name.Color = values.visuals.players.name.Color 
				tbl.Name.Text = Player.Name 
				tbl.Name.Position = Vec2(tbl.Box.Size.X/2 + tbl.Box.Position.X,  tbl.Box.Position.Y - 16) 
				tbl.Name.Font = Drawing.Fonts[values.visuals.players.font.Dropdown] 
				tbl.Name.Outline = Text 
				tbl.Name.Size = values.visuals.players.size.Slider 
				tbl.Name.Visible = OnScreen 
			else 
				tbl.Name.Visible = false 
			end 
			local LastInfoPos = tbl.Box.Position.Y - 1 
			if TBLFIND(values.visuals.players.indicators.Jumbobox, "armor") and Player:FindFirstChild("Kevlar") then 
				tbl.Armor.Color = COL3RGB(0, 150, 255) 
				tbl.Armor.Text = Player:FindFirstChild("Helmet") and "HK" or "K" 
				tbl.Armor.Position = Vec2(tbl.Box.Size.X + tbl.Box.Position.X + 12, LastInfoPos) 
				tbl.Armor.Font = Drawing.Fonts[values.visuals.players.font.Dropdown] 
				tbl.Armor.Outline = Text 
				tbl.Armor.Size = values.visuals.players.size.Slider 
				tbl.Armor.Visible = OnScreen 

				LastInfoPos = LastInfoPos + values.visuals.players.size.Slider 
			else 
				tbl.Armor.Visible = false 
			end 
		else 
			if Player.Name ~= LocalPlayer.Name then 
				Items[Player.Name].Visible = false 
				for i,v in pairs(tbl) do 
					v.Visible = false 
				end 
			end 
		end 
	end 
end) 

local mt = getrawmetatable(game) 
local oldNamecall = mt.__namecall 
local oldIndex = mt.__index 
local oldNewIndex = mt.__newindex 
setreadonly(mt,false) 
mt.__namecall = function(self, ...) 
	local method = tostring(getnamecallmethod()) 
	local args = {...} 

if method == "SetPrimaryPartCFrame" and self.Name == "Arms" then 
    if values.visuals.self["third person"].Toggle and values.visuals.self["third person"].Active and values.visuals.self["no arm third person"].Toggle and LocalPlayer.Character then 
        args[1] = args[1] * CF(99, 99, 99) 
    else 
        if values.visuals.self["viewmodel changer"].Toggle then 
            args[1] = args[1] * ViewmodelOffset
        end 
    end
end
	if method == "SetPrimaryPartCFrame" and self.Name ~= "Arms" then 
		args[1] = args[1] + Vec3(0, 3, 0) 
		coroutine.wrap(function() 
			DisableAA = true 
			wait(2) 
			DisableAA = false 
		end)() 
	end 
	if method == "Kick" then 
		return 
	end 
	if method == "FireServer" then 
		if LEN(self.Name) == 38 then 
			return 
		elseif self.Name == "FallDamage" and TBLFIND(values.misc.client["damage bypass"].Jumbobox, "fall") or values.misc.movement["jump bug"].Toggle and values.misc.movement["jump bug"].Active then 
			return 
		elseif self.Name == "BURNME" and TBLFIND(values.misc.client["damage bypass"].Jumbobox, "fire") then 
			return 
		elseif self.Name == "ControlTurn" and not checkcaller() then 
			return 
		end 
		if self.Name == "PlayerChatted" and values.misc.client["chat alive"].Toggle then 
			args[2] = false 
			args[3] = "Innocent" 
			args[4] = false 
			args[5] = false 
		end 
		if self.Name == "ReplicateCamera" and values.misc.client["anti spectate"].Toggle then 
			args[1] = CF() 
		end 
		if self.Name == "ReplicateCamera" and values.misc.client["my eyes"].Toggle then 
			args[1] =  args[1] * CFrame.Angles(0, 0, RAD(RANDOM(0, 360)))
		end 
	end 
	if method == "FindPartOnRayWithWhitelist" and not checkcaller() and Client.gun ~= "none" and Client.gun.Name ~= "C4" then 
		if #args[2] == 1 and args[2][1].Name == "SpawnPoints" then 
			local Team = LocalPlayer.Status.Team.Value 

			if TBLFIND(values.misc.client.shop.Jumbobox, "anywhere") then 
				return Team == "T" and args[2][1].BuyArea or args[2][1].BuyArea2 
			end 
		end 
	end 
	if method == "FindPartOnRayWithIgnoreList" and args[2][1] == workspace.Debris then 
		if not checkcaller() or Filter then 
			if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "penetration") then 
				INSERT(args[2], workspace.Map) 
			end 
			if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "spread") then 
				args[1] = RAY(Camera.CFrame.p, Camera.CFrame.LookVector * Client.gun.Range.Value) 
			end 
			local Stats = GetStatsLegit(GetWeaponLegit(Client.gun.Name)) 
			if values.legit.aimbot["silent aim"].Toggle and values.legit.aimbot["silent aim"].Active and Stats["silent aim"].Toggle then 
				local Ignore = {LocalPlayer.Character, Camera, workspace.Map.Clips, workspace.Map.SpawnPoints, workspace.Debris} 
				local Closest = 9999 
				local Target 

				if not TBLFIND(Stats.conditions.Jumbobox, "smoke") then 
					INSERT(Ignore, workspace.Ray_Ignore) 
				end 

				coroutine.wrap(function() 
					if not TBLFIND(Stats.conditions.Jumbobox, "blind") or LocalPlayer.PlayerGui.Blnd.Blind.BackgroundTransparency > 0.9 then 
						if not TBLFIND(Stats.conditions.Jumbobox, "blind") or SelfVelocity.Magnitude < 3 then 
							for _,Player in pairs(Players:GetPlayers()) do 
								if Player.Character and Player.Character:FindFirstChild("Humanoid") and Player.Character:FindFirstChild("Humanoid").Health > 0 then 
									if not values.legit.settings["forcefield check"].Toggle or not Player.Character:FindFirstChildOfClass("ForceField") then 
										if Player.Team ~= LocalPlayer.Team or values.legit.settings["free for all"].Toggle then 
											local Pos, onScreen = Camera:WorldToViewportPoint(Player.Character.HumanoidRootPart.Position) 
											if onScreen then 
												local Magnitude = (Vec2(Pos.X, Pos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
												if Magnitude < Stats["field of view"].Slider then 
													local Hitbox = Stats.priority.Dropdown == "head" and Player.Character.Head or Stats.priority.Dropdown == "chest" and Player.Character.UpperTorso 
													if Stats.priority.Dropdown == "closest" then 
														local HeadPos = Camera:WorldToViewportPoint(Player.Character.Head.Position) 
														local TorsoPos = Camera:WorldToViewportPoint(Player.Character.UpperTorso.Position) 
														local HeadDistance = (Vec2(HeadPos.X, HeadPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
														local TorsoDistance = (Vec2(TorsoPos.X, TorsoPos.Y) - Vec2(Mouse.X, Mouse.Y)).Magnitude 
														if HeadDistance < TorsoDistance then 
															Hitbox = Player.Character.Head 
														else 
															Hitbox = Player.Character.UpperTorso 
														end 
													end 
													if Hitbox ~= nil then 
														if not TBLFIND(Stats.conditions.Jumbobox, "visible") then 
															Target = Hitbox 
														else 
															local Ray1 = RAY(Camera.CFrame.Position, (Hitbox.Position - Camera.CFrame.Position).unit * (Hitbox.Position - Camera.CFrame.Position).magnitude) 
															local Hit, Pos = workspace:FindPartOnRayWithIgnoreList(Ray1, Ignore, false, true) 
															if Hit and Hit:FindFirstAncestor(Player.Name) then 
																Target = Hitbox 
															end 
														end 
													end 
												end 
											end 
										end 
									end 
								end 
							end 
						end 
					end 

					local Hit = RANDOM(1, 100) <= Stats.hitchance.Slider 
					if Target ~= nil and Hit then 
						args[1] = RAY(Camera.CFrame.Position, (Target.Position - Camera.CFrame.Position).unit * (Target.Position - Camera.CFrame.Position).magnitude) 
					end 
				end)() 
			end 
			if RageTarget ~= nil then 
				local Origin = values.rage.aimbot.origin.Dropdown == "character" and LocalPlayer.Character.LowerTorso.Position + Vec3(0, 2.5, 0) or Camera.CFrame.p 
				if values.rage.aimbot["delay shot"].Toggle then 
					spawn(function() 
						args[1] = RAY(Origin, (RageTarget.Position - Origin).unit * (RageTarget.Position - Origin).magnitude) 
					end) 
				else 
					args[1] = RAY(Origin, (RageTarget.Position - Origin).unit * (RageTarget.Position - Origin).magnitude) 
				end 
			end 
		end 
	end 
	if method == "InvokeServer" then 
		if self.Name == "Moolah" then 
			return 
		elseif self.Name == "Hugh" then 
			return 
		elseif self.Name == "Filter" and values.misc.chat["no filter"].Toggle then 
			return args[1] 
		end 
	end 
	if method == "LoadAnimation" and self.Name == "Humanoid" then 
		if values.rage.others["leg movement"].Dropdown == "slide" then 
			if FIND(args[1].Name, "Walk") or FIND(args[1].Name, "Run") then 
				args[1] = FakeAnim 
			end 
		end 
		if values.rage.others["leg movement"].Dropdown == "slide2" then 
			if FIND(args[1].Name, "Walk") or FIND(args[1].Name, "Run") or FIND(args[1].Name, "Jump") then 
				args[1] = FakeAnim 
			end 
		end 
		if values.rage.others["leg movement"].Dropdown == "slide3" then 
			if FIND(args[1].Name, "Jump") then 
				args[1] = FakeAnim 
			end 
		end 
		if values.rage.others["no animations"].Toggle then 
			args[1] = FakeAnim 
		end 
	end 
	if method == "FireServer" and self.Name == "HitPart" then
		if values.rage.aimbot["force hit"].Toggle and RageTarget ~= nil then
			args[1] = RageTarget
            args[2] = RageTarget.Position
		end
		if values.rage.aimbot["prediction"].Dropdown ~= "off" and RageTarget ~= nil then
			coroutine.wrap(function()
				if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then
					if values.rage.aimbot["prediction"].Dropdown == "cframe" then
						local Velocity = (RageTarget.Parent.HumanoidRootPart.Position - RageTarget.Parent.HumanoidRootPart.OldPosition.Value)/LastStep
						local Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
						if Velocity.magnitude >= 8 then
							args[2] = args[2] + Direction * ((Velocity.magnitude*(Ping/1000) * (Ping > 200 and 1.5 or 2)))
							args[4] = 0
							args[12] = args[12] - 500
						end
					elseif values.rage.aimbot["prediction"].Dropdown == "velocity" then
						local Velocity = RageTarget.Parent.HumanoidRootPart.Velocity
						local Direction = Vector3.new(Velocity.X/Velocity.magnitude, 0, Velocity.Z/Velocity.magnitude)
						if Velocity.magnitude >= 8 then
							args[2] = args[2] + Direction * (Velocity.magnitude*(Ping/1000) * (Ping > 200 and 1.5 or 2))
							args[4] = 0
							args[12] = args[12] - 500
						end
					end
				end
			end)()
		end
		if (values.rage.aimbot["get real"].Toggle and RageTarget ~= nil) then 
			coroutine.wrap(function() 
				if Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageTarget then 
					local hrp = RageTarget.Parent.HumanoidRootPart.Position 
					local oldHrp = RageTarget.Parent.HumanoidRootPart.OldPosition.Value 

					local vel = (Vec3(hrp.X, 0, hrp.Z) - Vec3(oldHrp.X, 0, oldHrp.Z)) / LastStep 
					local dir = Vec3(vel.X / vel.magnitude, 0, vel.Z / vel.magnitude) 
					
					args[2] = args[2] + dir * (Ping / (POW(Ping, 1.5)) * (dir / (dir / 2))) 
					args[4] = 0 
					args[12] = args[12] - 500 
				end 
			end)() 
		end 
	        if values.visuals.world["bullet tracers"].Toggle then
			coroutine.wrap(function()
                local beam = Instance.new("Part")
                beam.Anchored = true
                beam.CanCollide = false
                beam.Material = Enum.Material.Neon
                beam.Color = values.visuals.world["bullet tracers"].Color
                beam.Size = Vector3.new(0.1, 0.1, (Camera.CFrame.Position - args[2]).Magnitude)
                beam.CFrame = CFrame.new(Camera.CFrame.Position, args[2]) * CFrame.new(0, 0, -beam.Size.Z / 2)
                beam.Parent = workspace.Debris
                library:Tween(beam, TweenInfo.new(1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1})
                wait(1.5)
                beam:Destroy()
            end)()
		end
		if values.visuals.world["impacts"].Toggle then 
			coroutine.wrap(function() 
				local hit = INST("Part") 
				hit.Transparency = 1 
				hit.Anchored = true 
				hit.CanCollide = false 
				hit.Size = Vec3(0.3,0.3,0.3) 
				hit.Position = args[2] 
				local selection = INST("SelectionBox") 
				selection.LineThickness = 0 
				selection.SurfaceTransparency = 0.5 
				selection.Color3 = values.visuals.world["impacts"].Color 
				selection.SurfaceColor3 = values.visuals.world["impacts"].Color 
				selection.Parent = hit 
				selection.Adornee = hit 
				hit.Parent = workspace.Debris 
				wait(5.9) 
				library:Tween(selection, TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {SurfaceTransparency = 1}) 
				hit:Destroy() 
			end)() 
			if values.visuals.world["hit chams"].Toggle then 
				coroutine.wrap(function() 
					if Players:GetPlayerFromCharacter(args[1].Parent) and Players:GetPlayerFromCharacter(args[1].Parent).Team ~= LocalPlayer.Team then 
						for _,hitbox in pairs(args[1].Parent:GetChildren()) do 
							if hitbox:IsA("BasePart") or hitbox.Name == "Head" then 
								coroutine.wrap(function() 
									local part = INST("Part") 
									part.CFrame = hitbox.CFrame 
									part.Anchored = true 
									part.CanCollide = false 
									part.Material = Enum.Material.ForceField 
									part.Color = values.visuals.world["hit chams"].Color 
									part.Size = hitbox.Size 
									part.Parent = workspace.Debris 
									library:Tween(part, TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Transparency = 1}) 
									wait(2) 
									part:Destroy() 
								end)() 
							end 
						end 
					end 
				end)() 
			end 
		end 
	end 

	return oldNamecall(self, unpack(args)) 
end 

mt.__index = newcclosure(function(self, key)
	local CallingScript = getcallingscript()

	if not checkcaller() and self == Viewmodels and LocalPlayer.Character ~= nil and LocalPlayer.Character:FindFirstChild("UpperTorso") then
		local WeaponName = string.gsub(key, "v_", "")
		if not string.find(WeaponName, "Arms") then
			if Weapons[WeaponName]:FindFirstChild("Melee") and values.skins.knife["knife changer"].Toggle then
				if Viewmodels:FindFirstChild("v_"..values.skins.knife.model.Scroll) then
					return Viewmodels:FindFirstChild("v_"..values.skins.knife.model.Scroll)
				else
					local Clone = Models.Knives[values.skins.knife.model.Scroll]:Clone()
					return Clone
				end
			end
		end
	end
	if key == "Value" then
		if self.Name == "Auto" and table.find(values.misc.client["gun modifiers"].Jumbobox, "automatic") then
			return true
		elseif self.Name == "ReloadTime" and table.find(values.misc.client["gun modifiers"].Jumbobox, "reload") then
			return 0.001
		elseif self.Name == "EquipTime" and table.find(values.misc.client["gun modifiers"].Jumbobox, "equip") then
			return 0.001
		elseif self.Name == "BuyTime" and table.find(values.misc.client.shop.Jumbobox, "inf time") then
			return 5
		end
	end

	return oldIndex(self, key)
end)

mt.__newindex = function(self, i, v) 
	if self:IsA("Humanoid") and i == "JumpPower" and not checkcaller() then 
		if values.misc.movement["jump bug"].Toggle and values.misc.movement["jump bug"].Active then 
			v = 24 
		end 
		if values.misc.movement["edge bug"].Toggle and values.misc.movement["edge bug"].Active then 
			v = 0 
		end 
	elseif self:IsA("Humanoid") and i == "CameraOffset" then 
		if values.rage.angles.enabled.Toggle and values.rage.angles["body roll"].Dropdown == "180" and not DisableAA then 
			v = v + Vec3(0, -3.5, 0) 
		end 
	end 

	return oldNewIndex(self, i, v) 
end 
Crosshairs.Scope:GetPropertyChangedSignal("Visible"):Connect(function(current) 
	if not TBLFIND(values.visuals.effects.removals.Jumbobox, "scope lines") then return end 

	if current ~= false then 
		Crosshairs.Scope.Visible = false 
	end 
end) 
Crosshair:GetPropertyChangedSignal("Visible"):Connect(function(current) 
	if not LocalPlayer.Character then return end 
	if not values.visuals.effects["force crosshair"].Toggle then return end 
	if LocalPlayer.Character:FindFirstChild("AIMING") then return end 

	Crosshair.Visible = true 
end) 

LocalPlayer.Additionals.TotalDamage:GetPropertyChangedSignal("Value"):Connect(function(current) 
	if current == 0 then return end 
	coroutine.wrap(function() 
		if values.misc.client.hitmarker.Toggle then 
			local Line = Drawing.new("Line") 
			local Line2 = Drawing.new("Line") 
			local Line3 = Drawing.new("Line") 
			local Line4 = Drawing.new("Line") 

			local x, y = Camera.ViewportSize.X/2, Camera.ViewportSize.Y/2 

			Line.From = Vec2(x + 4, y + 4) 
			Line.To = Vec2(x + 10, y + 10) 
			Line.Color = values.misc.client.hitmarker.Color 
			Line.Visible = true 

			Line2.From = Vec2(x + 4, y - 4) 
			Line2.To = Vec2(x + 10, y - 10) 
			Line2.Color = values.misc.client.hitmarker.Color 
			Line2.Visible = true 

			Line3.From = Vec2(x - 4, y - 4) 
			Line3.To = Vec2(x - 10, y - 10) 
			Line3.Color = values.misc.client.hitmarker.Color 
			Line3.Visible = true 

			Line4.From = Vec2(x - 4, y + 4) 
			Line4.To = Vec2(x - 10, y + 10) 
			Line4.Color = values.misc.client.hitmarker.Color 
			Line4.Visible = true 

			Line.Transparency = 1 
			Line2.Transparency = 1 
			Line3.Transparency = 1 
			Line4.Transparency = 1 

			Line.Thickness = 1 
			Line2.Thickness = 1 
			Line3.Thickness = 1 
			Line4.Thickness = 1 

			wait(0.3) 
			for i = 1,0,-0.1 do 
				wait() 
				Line.Transparency = i 
				Line2.Transparency = i 
				Line3.Transparency = i 
				Line4.Transparency = i 
			end 
			Line:Remove() 
			Line2:Remove() 
			Line3:Remove() 
			Line4:Remove() 
		end 
	end)() 
	if values.visuals.world.hitsound.Dropdown == "none" then return end 
	local sound = INST("Sound") 
	sound.Parent = game:GetService("SoundService") 
		sound.SoundId = values.visuals.world.hitsound.Dropdown == "skeet" and "rbxassetid://5447626464" or values.visuals.world.hitsound.Dropdown == "neverlose" and "rbxassetid://5043539486" or values.visuals.world.hitsound.Dropdown == "rust" and "rbxassetid://5043539486" or values.visuals.world.hitsound.Dropdown == "bag" and "rbxassetid://364942410" or values.visuals.world.hitsound.Dropdown == "baimware" and "rbxassetid://4275842574" or values.visuals.world.hitsound.Dropdown == "bruh" and "rbxassetid://535690488" or values.visuals.world.hitsound.Dropdown == "MC \"ouh!\"" and "rbxassetid://6361963422" or values.visuals.world.hitsound.Dropdown == "moan" and "rbxassetid://2440889605" or values.visuals.world.hitsound.Dropdown == "moan2" and "rbxassetid://2440891382" or values.visuals.world.hitsound.Dropdown == "moan3" and "rbxassetid://2440889869" or values.visuals.world.hitsound.Dropdown == "ding" and "rbxassetid://8322227470"
	sound.Volume = values.visuals.world["sound volume"].Slider 
	sound.PlayOnRemove = true 
	sound:Destroy() 
	
	end)
LocalPlayer.Status.Kills:GetPropertyChangedSignal("Value"):Connect(function(current) 
	if current == 0 then return end 
	if values.misc.chat["kill say"].Toggle then 
		game:GetService("ReplicatedStorage").Events.PlayerChatted:FireServer(values.misc.chat["message"].Text ~= "Eating Salad" and values.misc.chat["message"].Text or "SaladWare on top", false, "Innocent", false, true) 
	end 
end) 
game.Players.LocalPlayer.Status.Kills.Changed:Connect(function(val)
	if values.visuals.world['Killsoundtoggle'].Toggle ~= "" and val ~= 0 then
		local marker = Instance.new("Sound")
		marker.Parent = game:GetService("SoundService")
		marker.SoundId = "rbxassetid://"..values.visuals.world['Killsound'].Text
		marker.Volume = 3
		marker:Play()
	end
end)
RayIgnore.ChildAdded:Connect(function(obj) 
	if obj.Name == "Fires" then 
		obj.ChildAdded:Connect(function(fire) 
			if values.visuals.world["molly radius"].Toggle then 
				fire.Transparency = values.visuals.world["molly radius"].Transparency 
				fire.Color = values.visuals.world["molly radius"].Color 
			end 
		end) 
	end 
	if obj.Name == "Smokes" then 
		obj.ChildAdded:Connect(function(smoke) 
			RunService.RenderStepped:Wait() 
			local OriginalRate = INST("NumberValue") 
			OriginalRate.Value = smoke.ParticleEmitter.Rate 
			OriginalRate.Name = "OriginalRate" 
			OriginalRate.Parent = smoke 
			if TBLFIND(values.visuals.effects.removals.Jumbobox, "smokes") then 
				smoke.ParticleEmitter.Rate = 0 
			end 
			smoke.Material = Enum.Material.ForceField 
			if values.visuals.world["smoke radius"].Toggle then 
				smoke.Transparency = 0 
				smoke.Color = values.visuals.world["smoke radius"].Color 
			end 
		end) 
	end 
end) 
if RayIgnore:FindFirstChild("Fires") then 
	RayIgnore:FindFirstChild("Fires").ChildAdded:Connect(function(fire) 
		if values.visuals.world["molly radius"].Toggle then 
			fire.Transparency = values.visuals.world["molly radius"].Transparency 
			fire.Color = values.visuals.world["molly radius"].Color 
		end 
	end) 
end 
if RayIgnore:FindFirstChild("Smokes") then 
	for _,smoke in pairs(RayIgnore:FindFirstChild("Smokes"):GetChildren()) do 
		local OriginalRate = INST("NumberValue") 
		OriginalRate.Value = smoke.ParticleEmitter.Rate 
		OriginalRate.Name = "OriginalRate" 
		OriginalRate.Parent = smoke 
		smoke.Material = Enum.Material.ForceField 
	end 
	RayIgnore:FindFirstChild("Smokes").ChildAdded:Connect(function(smoke) 
		RunService.RenderStepped:Wait() 
		local OriginalRate = INST("NumberValue") 
		OriginalRate.Value = smoke.ParticleEmitter.Rate 
		OriginalRate.Name = "OriginalRate" 
		OriginalRate.Parent = smoke 
		if TBLFIND(values.visuals.effects.removals.Jumbobox, "smokes") then 
			smoke.ParticleEmitter.Rate = 0 
		end 
		smoke.Material = Enum.Material.ForceField 
		if values.visuals.world["smoke radius"].Toggle then 
			smoke.Transparency = 0 
			smoke.Color = values.visuals.world["smoke radius"].Color 
		end 
	end) 
end 
Camera.ChildAdded:Connect(function(obj) 
	if TBLFIND(values.misc.client["gun modifiers"].Jumbobox, "ammo") then 
		Client.ammocount = math.huge 
		Client.primarystored = math.huge 
		Client.ammocount2 = math.huge  
		Client.secondarystored = math.huge 
	end 
	RunService.RenderStepped:Wait() 
	if obj.Name ~= "Arms" then return end 
	local Model 
	for i,v in pairs(obj:GetChildren()) do 
		if v:IsA("Model") and (v:FindFirstChild("Right Arm") or v:FindFirstChild("Left Arm")) then 
			Model = v 
		end 
	end 
	if Model == nil then return end 
	for i,v in pairs(obj:GetChildren()) do 
		if (v:IsA("BasePart") or v:IsA("Part")) and v.Transparency ~= 1 and v.Name ~= "Flash" then 
			local valid = true 
			if v:IsA("Part") and v:FindFirstChild("Mesh") and not v:IsA("BlockMesh") then 
				valid = false 
				local success, err = pcall(function() 
					local OriginalTexture = INST("StringValue") 
					OriginalTexture.Value = v.Mesh.TextureId 
					OriginalTexture.Name = "OriginalTexture" 
					OriginalTexture.Parent = v.Mesh 
				end) 
				local success2, err2 = pcall(function() 
					local OriginalTexture = INST("StringValue") 
					OriginalTexture.Value = v.Mesh.TextureID 
					OriginalTexture.Name = "OriginalTexture" 
					OriginalTexture.Parent = v.Mesh 
				end) 
				if success or success2 then valid = true end 
			end 

			for i2,v2 in pairs(v:GetChildren()) do 
				if (v2:IsA("BasePart") or v2:IsA("Part")) then 
					INSERT(WeaponObj, v2) 
				end 
			end 

			if valid then 
				INSERT(WeaponObj, v) 
			end 
		end 
	end 

	local gunname = Client.gun ~= "none" and values.skins.knife["knife changer"].Toggle and Client.gun:FindFirstChild("Melee") and values.skins.knife.model.Scroll or Client.gun ~= "none" and Client.gun.Name 
	if values.skins.skins["skin changer"].Toggle and gunname ~= nil and Skins:FindFirstChild(gunname) then 
		if values.skins.skins.skin.Scroll[gunname] ~= "Inventory" then 
			MapSkin(gunname, values.skins.skins.skin.Scroll[gunname]) 
		end 
	end 
	for _,v in pairs(WeaponObj) do 
		if v:IsA("MeshPart") then 
			local OriginalTexture = INST("StringValue") 
			OriginalTexture.Value = v.TextureID 
			OriginalTexture.Name = "OriginalTexture" 
			OriginalTexture.Parent = v 
		end 

		local OriginalColor = INST("Color3Value") 
		OriginalColor.Value = v.Color 
		OriginalColor.Name = "OriginalColor" 
		OriginalColor.Parent = v 

		local OriginalMaterial = INST("StringValue") 
		OriginalMaterial.Value = v.Material.Name 
		OriginalMaterial.Name = "OriginalMaterial" 
		OriginalMaterial.Parent = v 

		if values.visuals.effects["weapon chams"].Toggle then 
			UpdateWeapon(v) 
		end 
	end 
	RArm = Model:FindFirstChild("Right Arm"); LArm = Model:FindFirstChild("Left Arm") 
	if RArm then 
		local OriginalColor = INST("Color3Value") 
		OriginalColor.Value = RArm.Color 
		OriginalColor.Name = "Color3Value" 
		OriginalColor.Parent = RArm 
		if values.visuals.effects["arm chams"].Toggle then 
			RArm.Color = values.visuals.effects["arm chams"].Color 
			RArm.Transparency = values.visuals.effects["arm chams"].Transparency 
		end 
		RGlove = RArm:FindFirstChild("Glove") or RArm:FindFirstChild("RGlove") 
		if values.skins.glove["glove changer"].Toggle and Client.gun ~= "none" then 
			if RGlove then RGlove:Destroy() end 
			RGlove = GloveModels[values.skins.glove.model.Dropdown].RGlove:Clone() 
			RGlove.Mesh.TextureId = Gloves[values.skins.glove.model.Dropdown][values.skins.glove.model.Scroll[values.skins.glove.model.Dropdown]].Textures.TextureId 
			RGlove.Parent = RArm 
			RGlove.Transparency = 0 
			RGlove.Welded.Part0 = RArm 
		end 
		if RGlove.Transparency == 1 then 
			RGlove:Destroy() 
			RGlove = nil 
		else 
			local GloveTexture = INST("StringValue") 
			GloveTexture.Value = RGlove.Mesh.TextureId 
			GloveTexture.Name = "StringValue" 
			GloveTexture.Parent = RGlove 

			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(RGlove) 
			end 
		end 
		RSleeve = RArm:FindFirstChild("Sleeve") 
		if RSleeve ~= nil then 
			local SleeveTexture = INST("StringValue") 
			SleeveTexture.Value = RSleeve.Mesh.TextureId 
			SleeveTexture.Name = "StringValue" 
			SleeveTexture.Parent = RSleeve 
			if values.visuals.effects["arm chams"].Toggle then 
				LArm.Color = values.visuals.effects["arm chams"].Color 
			end 
			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(RSleeve) 
			end 
		end 
	end 
	if LArm then 
		local OriginalColor = INST("Color3Value") 
		OriginalColor.Value = LArm.Color 
		OriginalColor.Name = "Color3Value" 
		OriginalColor.Parent = LArm 
		if values.visuals.effects["arm chams"].Toggle then 
			LArm.Color = values.visuals.effects["arm chams"].Color 
			LArm.Transparency = values.visuals.effects["arm chams"].Transparency 
		end 
		LGlove = LArm:FindFirstChild("Glove") or LArm:FindFirstChild("LGlove") 
		if values.skins.glove["glove changer"].Toggle and Client.gun ~= "none" then 
			if LGlove then LGlove:Destroy() end 
			LGlove = GloveModels[values.skins.glove.model.Dropdown].LGlove:Clone() 
			LGlove.Mesh.TextureId = Gloves[values.skins.glove.model.Dropdown][values.skins.glove.model.Scroll[values.skins.glove.model.Dropdown]].Textures.TextureId 
			LGlove.Transparency = 0 
			LGlove.Parent = LArm 
			LGlove.Welded.Part0 = LArm 
		end 
		if LGlove.Transparency == 1 then 
			LGlove:Destroy() 
			LGlove =  nil 
		else 
			local GloveTexture = INST("StringValue") 
			GloveTexture.Value = LGlove.Mesh.TextureId 
			GloveTexture.Name = "StringValue" 
			GloveTexture.Parent = LGlove 

			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(LGlove) 
			end 
		end 
		LSleeve = LArm:FindFirstChild("Sleeve") 
		if LSleeve ~= nil then 
			local SleeveTexture = INST("StringValue") 
			SleeveTexture.Value = LSleeve.Mesh.TextureId 
			SleeveTexture.Name = "StringValue" 
			SleeveTexture.Parent = LSleeve 

			if values.visuals.effects["accessory chams"].Toggle then 
				UpdateAccessory(LSleeve) 
			end 
		end 
	end 
end) 
Camera.ChildAdded:Connect(function(obj) 
	if obj.Name == "Arms" then 
		RArm, LArm, RGlove, RSleeve, LGlove, LSleeve = nil, nil, nil, nil, nil, nil 
		WeaponObj = {} 
	end 
end) 
Camera:GetPropertyChangedSignal("FieldOfView"):Connect(function(fov) 
	if LocalPlayer.Character == nil then return end 
	if fov == values.visuals.self["fov changer"].Slider then return end 
	if values.visuals.self["on scope"].Toggle or not LocalPlayer.Character:FindFirstChild("AIMING") then 
		Camera.FieldOfView = values.visuals.self["fov changer"].Slider 
	end 
end) 
LocalPlayer.Cash:GetPropertyChangedSignal("Value"):Connect(function(cash) 
	if values.misc.client["infinite cash"].Toggle and cash ~= 9e9  then 
		LocalPlayer.Cash.Value = 9e9
	end 
end) 
if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("Origin") then 
	if workspace.Map.Origin.Value == "de_cache" or workspace.Map.Origin.Value == "de_vertigo" or workspace.Map.Origin.Value == "de_nuke" or workspace.Map.Origin.Value == "de_aztec" then 
		oldSkybox = Lighting:FindFirstChildOfClass("Sky"):Clone() 
	end 
end 
workspace.ChildAdded:Connect(function(obj) 
	if obj.Name == "Map" then 
		wait(5) 
		if values.misc.client["remove killers"].Toggle then 
			if workspace:FindFirstChild("Map") and workspace:FindFirstChild("Map"):FindFirstChild("Killers") then 
				local clone = workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Clone() 
				clone.Name = "KillersClone" 
				clone.Parent = workspace:FindFirstChild("Map") 

				workspace:FindFirstChild("Map"):FindFirstChild("Killers"):Destroy() 
			end 
		end 
		if oldSkybox ~= nil then 
			oldSkybox:Destroy() 
			oldSkybox = nil 
		end 
		local Origin = workspace.Map:WaitForChild("Origin") 
		if workspace.Map.Origin.Value == "de_cache" or workspace.Map.Origin.Value == "de_vertigo" or workspace.Map.Origin.Value == "de_nuke" or workspace.Map.Origin.Value == "de_aztec" then 
			oldSkybox = Lighting:FindFirstChildOfClass("Sky"):Clone() 

			local sky = values.visuals.world.skybox.Dropdown 
			if sky ~= "none" then 
				Lighting:FindFirstChildOfClass("Sky"):Destroy() 
				local skybox = INST("Sky") 
				skybox.SkyboxLf = Skyboxes[sky].SkyboxLf 
				skybox.SkyboxBk = Skyboxes[sky].SkyboxBk 
				skybox.SkyboxDn = Skyboxes[sky].SkyboxDn 
				skybox.SkyboxFt = Skyboxes[sky].SkyboxFt 
				skybox.SkyboxRt = Skyboxes[sky].SkyboxRt 
				skybox.SkyboxUp = Skyboxes[sky].SkyboxUp 
				skybox.Name = "override" 
				skybox.Parent = Lighting 
			end 
		else 
			local sky = values.visuals.world.skybox.Dropdown 
			if sky ~= "none" then 
				local skybox = INST("Sky") 
				skybox.SkyboxLf = Skyboxes[sky].SkyboxLf 
				skybox.SkyboxBk = Skyboxes[sky].SkyboxBk 
				skybox.SkyboxDn = Skyboxes[sky].SkyboxDn 
				skybox.SkyboxFt = Skyboxes[sky].SkyboxFt 
				skybox.SkyboxRt = Skyboxes[sky].SkyboxRt 
				skybox.SkyboxUp = Skyboxes[sky].SkyboxUp 
				skybox.Name = "override" 
				skybox.Parent = Lighting 
			end 
		end 
	end 
end) 
Lighting.ChildAdded:Connect(function(obj) 
	if obj:IsA("Sky") and obj.Name ~= "override" then 
		oldSkybox = obj:Clone() 
	end 
end) 

local function CollisionTBL(obj) 
	if obj:IsA("Accessory") then 
		INSERT(Collision, obj) 
	end 
	if obj:IsA("Part") then 
		if obj.Name == "HeadHB" or obj.Name == "FakeHead" then 
			INSERT(Collision, obj) 
		end 
	end 
end 
LocalPlayer.CharacterAdded:Connect(function(char) 
	repeat RunService.RenderStepped:Wait() 
	until char:FindFirstChild("Gun") 
	SelfObj = {} 
	if values.skins.characters["character changer"].Toggle then 
		ChangeCharacter(ChrModels:FindFirstChild(values.skins.characters.skin.Scroll)) 
	end 
	if char:FindFirstChildOfClass("Shirt") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = char:FindFirstChildOfClass("Shirt").ShirtTemplate 
		String.Parent = char:FindFirstChildOfClass("Shirt") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			char:FindFirstChildOfClass("Shirt").ShirtTemplate = "" 
		end 
	end 
	if char:FindFirstChildOfClass("Pants") then 
		local String = INST("StringValue") 
		String.Name = "OriginalTexture" 
		String.Value = char:FindFirstChildOfClass("Pants").PantsTemplate 
		String.Parent = char:FindFirstChildOfClass("Pants") 

		if TBLFIND(values.visuals.effects.removals.Jumbobox, "clothes") then 
			char:FindFirstChildOfClass("Pants").PantsTemplate = "" 
		end 
	end 
	for i,v in pairs(char:GetChildren()) do 
		if v:IsA("BasePart") and v.Transparency ~= 1 then 
			INSERT(SelfObj, v) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Color 
			Color.Parent = v 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Material.Name 
			String.Parent = v 
		elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then 
			INSERT(SelfObj, v.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = v.Handle.Color 
			Color.Parent = v.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = v.Handle.Material.Name 
			String.Parent = v.Handle 
		end 
	end 
	if values.visuals.self["self chams"].Toggle then 
		for _,obj in pairs(SelfObj) do 
			if obj.Parent ~= nil then 
				obj.Material = values.visuals.self["self chams material"].Dropdown 
				obj.Color = values.visuals.self["self chams"].Color 
			end 
		end 
	end 
	LocalPlayer.Character.ChildAdded:Connect(function(Child) 
		if Child:IsA("Accessory") and Child.Handle.Transparency ~= 1 then 
			INSERT(SelfObj, Child.Handle) 
			local Color = INST("Color3Value") 
			Color.Name = "OriginalColor" 
			Color.Value = Child.Handle.Color 
			Color.Parent = Child.Handle 

			local String = INST("StringValue") 
			String.Name = "OriginalMaterial" 
			String.Value = Child.Handle.Material.Name 
			String.Parent = Child.Handle 

			if values.visuals.self["self chams"].Toggle then 
				for _,obj in pairs(SelfObj) do 
					if obj.Parent ~= nil then 
						obj.Material = values.visuals.self["self chams material"].Dropdown 
						obj.Color = values.visuals.self["self chams"].Color 
					end 
				end 
			end 
		end 
	end) 
    
	if values.misc.animations.enabled.Toggle and values.misc.animations.enabled.Active then 
		LoadedAnim = LocalPlayer.Character.Humanoid:LoadAnimation(Dance) 
		LoadedAnim.Priority = Enum.AnimationPriority.Action 
		LoadedAnim:Play() 
	end 
end) 
if LocalPlayer.Character ~= nil then
	for i,v in pairs(LocalPlayer.Character:GetChildren()) do
		if v:IsA("BasePart") and v.Transparency ~= 1 then
			table.insert(SelfObj, v)
			local Color = IST("Color3Value")
			Color.Name = "OriginalColor"
			Color.Value = v.Color
			Color.Parent = v

			local String = IST("StringValue")
			String.Name = "OriginalMaterial"
			String.Value = v.Material.Name
			String.Parent = v
		elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then
			table.insert(SelfObj, v.Handle)
			local Color = IST("Color3Value")
			Color.Name = "OriginalColor"
			Color.Value = v.Handle.Color
			Color.Parent = v.Handle

			local String = IST("StringValue")
			String.Name = "OriginalMaterial"
			String.Value = v.Handle.Material.Name
			String.Parent = v.Handle
		end
	end
	if values.visuals.self["self chams"].Toggle then
		for _,obj in pairs(SelfObj) do
			if obj.Parent ~= nil then
				obj.Material = Enum.Material.ForceField
				obj.Color = values.visuals.self["self chams"].Color
			end
		end
	end
	LocalPlayer.Character.ChildAdded:Connect(function(Child)
        if Child:IsA("Accessory") and Child.Handle.Transparency ~= 1 then
			table.insert(SelfObj, Child.Handle)
			local Color = IST("Color3Value")
			Color.Name = "OriginalColor"
			Color.Value = Child.Handle.Color
			Color.Parent = Child.Handle

			local String = IST("StringValue")
			String.Name = "OriginalMaterial"
			String.Value = Child.Handle.Material.Name
			String.Parent = Child.Handle

			if values.visuals.self["self chams"].Toggle then
				for _,obj in pairs(SelfObj) do
					if obj.Parent ~= nil then
						obj.Material = Enum.Material.ForceField
						obj.Color = values.visuals.self["self chams"].Color
					end
				end
			end
        end
    end)
end
Players.PlayerAdded:Connect(function(Player)
	Player:GetPropertyChangedSignal("Team"):Connect(function(new)
		wait()
		if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
			for _2,Obj in pairs(Player.Character:GetDescendants()) do
				if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then
					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							Obj.Visible = true
						else
							Obj.Visible = false
						end
					else
						Obj.Visible = false
					end
					Obj.Color3 = values.visuals.players.chams.Color
				end
			end
		end
	end)
    Player.CharacterAdded:Connect(function(Character)
        Character.ChildAdded:Connect(function(obj)
            wait(1)
			CollisionTBL(obj)
        end)
		wait(1)
		if Character ~= nil then
			local Value = IST("Vector3Value")
			Value.Name = "OldPosition"
			Value.Value = Character.HumanoidRootPart.Position
			Value.Parent = Character.HumanoidRootPart
			for _,obj in pairs(Character:GetChildren()) do
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then
					local VisibleCham = IST("BoxHandleAdornment")
					VisibleCham.Name = "VisibleCham"
					VisibleCham.AlwaysOnTop = false
					VisibleCham.ZIndex = 8
					VisibleCham.Size = obj.Size + Vc3(0.1,0.1,0.1)
					VisibleCham.AlwaysOnTop = false
					VisibleCham.Transparency = 0

					local WallCham = IST("BoxHandleAdornment")
					WallCham.Name = "WallCham"
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.Size = obj.Size + Vc3(0.1,0.1,0.1)
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = 0.7

					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							VisibleCham.Visible = true
							WallCham.Visible = true
						else
							VisibleCham.Visible = false
							WallCham.Visible = false
						end
					else
						VisibleCham.Visible = false
						WallCham.Visible = false
					end

					table.insert(ChamItems, VisibleCham)
					table.insert(ChamItems, WallCham)

					VisibleCham.Color3 = values.visuals.players.chams.Color
					WallCham.Color3 = values.visuals.players.chams.Color

					VisibleCham.AdornCullingMode = "Never"
					WallCham.AdornCullingMode = "Never"

					VisibleCham.Adornee = obj
					VisibleCham.Parent = obj

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
    end)
end)
for _,Player in pairs(Players:GetPlayers()) do
	if Player ~= LocalPlayer then
		Player:GetPropertyChangedSignal("Team"):Connect(function(new)
			wait()
			if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
				for _2,Obj in pairs(Player.Character:GetDescendants()) do
					if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then
						if values.visuals.players.chams.Toggle then
							if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
								Obj.Visible = true
							else
								Obj.Visible = false
							end
						else
							Obj.Visible = false
						end
						Obj.Color3 = values.visuals.players.chams.Color
					end
				end
			end
		end)
	else
		LocalPlayer:GetPropertyChangedSignal("Team"):Connect(function(new)
			wait()
			for _,Player in pairs(Players:GetPlayers()) do
				if Player.Character then
					for _2,Obj in pairs(Player.Character:GetDescendants()) do
						if Obj.Name == "VisibleCham" or Obj.Name == "WallCham" then
							if values.visuals.players.chams.Toggle then
								if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
									Obj.Visible = true
								else
									Obj.Visible = false
								end
							else
								Obj.Visible = false
							end
							Obj.Color3 = values.visuals.players.chams.Color
						end
					end
				end
			end
		end)
	end
	Player.CharacterAdded:Connect(function(Character)
        Character.ChildAdded:Connect(function(obj)
            wait(1)
			CollisionTBL(obj)
        end)
		wait(1)
		if Player.Character ~= nil and Player.Character:FindFirstChild("HumanoidRootPart") then
			local Value = IST("Vector3Value")
			Value.Value = Player.Character.HumanoidRootPart.Position
			Value.Name = "OldPosition"
			Value.Parent = Player.Character.HumanoidRootPart
			for _,obj in pairs(Player.Character:GetChildren()) do
				if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then
					local VisibleCham = IST("BoxHandleAdornment")
					VisibleCham.Name = "VisibleCham"
					VisibleCham.AlwaysOnTop = false
					VisibleCham.ZIndex = 5
					VisibleCham.Size = obj.Size + Vc3(0.1,0.1,0.1)
					VisibleCham.AlwaysOnTop = false
					VisibleCham.Transparency = 0

					local WallCham = IST("BoxHandleAdornment")
					WallCham.Name = "WallCham"
					WallCham.AlwaysOnTop = true
					WallCham.ZIndex = 5
					WallCham.Size = obj.Size + Vc3(0.1,0.1,0.1)
					WallCham.AlwaysOnTop = true
					WallCham.Transparency = 0.7

					if values.visuals.players.chams.Toggle then
						if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
							VisibleCham.Visible = true
							WallCham.Visible = true
						else
							VisibleCham.Visible = false
							WallCham.Visible = false
						end
					else
						VisibleCham.Visible = false
						WallCham.Visible = false
					end

					table.insert(ChamItems, VisibleCham)
					table.insert(ChamItems, WallCham)

					VisibleCham.Color3 = values.visuals.players.chams.Color
					WallCham.Color3 = values.visuals.players.chams.Color

					VisibleCham.AdornCullingMode = "Never"
					WallCham.AdornCullingMode = "Never"

					VisibleCham.Adornee = obj
					VisibleCham.Parent = obj

					WallCham.Adornee = obj
					WallCham.Parent = obj
				end
			end
		end
    end)
	if Player.Character ~= nil and Player.Character:FindFirstChild("UpperTorso") then
		local Value = IST("Vector3Value")
		Value.Name = "OldPosition"
		Value.Value = Player.Character.HumanoidRootPart.Position
		Value.Parent = Player.Character.HumanoidRootPart
		for _,obj in pairs(Player.Character:GetChildren()) do
			CollisionTBL(obj)
			if obj:IsA("BasePart") and Player ~= LocalPlayer and obj.Name ~= "HumanoidRootPart" and obj.Name ~= "Head" and obj.Name ~= "BackC4" and obj.Name ~= "HeadHB" then
				local VisibleCham = IST("BoxHandleAdornment")
				VisibleCham.Name = "VisibleCham"
				VisibleCham.AlwaysOnTop = false
				VisibleCham.ZIndex = 5
				VisibleCham.Size = obj.Size + Vc3(0.1,0.1,0.1)
				VisibleCham.AlwaysOnTop = false
				VisibleCham.Transparency = 0

				local WallCham = IST("BoxHandleAdornment")
				WallCham.Name = "WallCham"
				WallCham.AlwaysOnTop = true
				WallCham.ZIndex = 5
				WallCham.Size = obj.Size + Vc3(0.1,0.1,0.1)
				WallCham.AlwaysOnTop = true
				WallCham.Transparency = 0.7

				if values.visuals.players.chams.Toggle then
					if values.visuals.players.teammates.Toggle or Player.Team ~= LocalPlayer.Team then
						VisibleCham.Visible = true
						WallCham.Visible = true
					else
						VisibleCham.Visible = false
						WallCham.Visible = false
					end
				else
					VisibleCham.Visible = false
					WallCham.Visible = false
				end

				table.insert(ChamItems, VisibleCham)
				table.insert(ChamItems, WallCham)

				VisibleCham.Color3 = values.visuals.players.chams.Color
				WallCham.Color3 = values.visuals.players.chams.Color

				VisibleCham.AdornCullingMode = "Never"
				WallCham.AdornCullingMode = "Never"

				VisibleCham.Adornee = obj
				VisibleCham.Parent = obj

				WallCham.Adornee = obj
				WallCham.Parent = obj
			end
		end
	end
end
