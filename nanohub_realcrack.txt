repeat wait() until game:IsLoaded() makefolder("Nanohub") makefolder("Nanohub/CBRO") makefolder("Nanohub/CBRO/Configs") makefolder("Nanohub/CBRO/Luas") makefolder("Nanohub/CBRO/Models") if not isfile("Nanohub/CBRO/Friendlist.xyz") then writefile("Nanohub/CBRO/Friendlist.xyz", "") end local _VERSION = "v1.1" local _MAXVERSION = game:HttpGet("https://idkimwebsite.000webhostapp.com/version") local skeleton = {} local missingMBox = false function idk(...) if missingMBox ~= false then messagebox(...) else game.Players.LocalPlayer:Kick(...) end end if not messagebox then missingMBox = true return end if not writefile then return idk("Missing writefile", "Failed to load", 0) end if not isfile then return idk("Missing isfile", "Failed to load", 0) end if not newcclosure then return idk("Missing newcclosure", "Failed to load", 0) end if not getnamecallmethod then return idk("Missing getnamecallmethod", "Failed to load", 0) end if not getsenv then return idk("Missing getsenv", "Failed to load", 0) end getgenv().objects = {} local Hitboxes = { ["Head"] = {"Head"}; ["Chest"] = {"HumanoidRootPart","LowerTorso","UpperTorso"}; ["Arms"] = {"LeftUpperArm", "LeftLowerArm", "LeftHand", "RightUpperArm", "RightLowerArm", "RightHand"}; ["Legs"] = {"LeftUpperLeg", "LeftLowerLeg", "LeftFoot", "RightUpperLeg", "RightLowerLeg", "RightFoot"}; } local Player = game.Players.LocalPlayer local LoadedAnimation = nil local OldFps = nil local client = getsenv(Player.PlayerGui.Client) local RageHitpart = nil local RageTarget = nil local LegitHitpart = nil local SelectedHitboxes = {"Head","Chest"} local Camera = workspace.CurrentCamera local closestTarget = math.huge local oldSplatterBlood = client.splatterBlood local multies = { ["Head"] = 4, ["FakeHead"] = 4, ["HeadHB"] = 4, ["UpperTorso"] = 1, ["LowerTorso"] = 1.25, ["LeftUpperArm"] = 1, ["LeftLowerArm"] = 1, ["LeftHand"] = 1, ["RightUpperArm"] = 1, ["RightLowerArm"] = 1, ["RightHand"] = 1, ["LeftUpperLeg"] = 0.75, ["LeftLowerLeg"] = 0.75, ["LeftFoot"] = 0.75, ["RightUpperLeg"] = 0.75, ["RightLowerLeg"] = 0.75, ["RightFoot"] = 0.75, } local modelsName = { ["DesertEagle"] = {"Default", "Electric revolver"}; ["AWP"] = {"Default", "Arsenal"}; ["Scout"] = {"Default", "Sako 85"}; ["AK47"] = {"Default", "Potassium Power", "AKM"}; ["M4A4"] = {"Default", "L86A3"}; ["Bayonet"] = {"Default", "Darkheart", "Glacier Blade", "Katana"}; ["DualBerettas"] = {"Default", "Dual Volcanics"}; } local modelsWeapons = { "DesertEagle"; "AWP"; "Scout"; "AK47"; "M4A4"; "Bayonet"; "DualBerettas"; } local modelsAssets = { ["DesertEagle"] = { ["Electric revolver"] = "8484628003" }; ["AWP"] = { ["Arsenal"] = "8484928679"; ["Water gun"] = "8485102807" }; ["Scout"] = { ["Sako 85"] = "8484935361" }; ["AK47"] = { ["Potassium Power"] = "8485023995"; ["AKM"] = "8485033316" }; ["M4A4"] = { ["L86A3"] = "8485118523" }; ["Bayonet"] = { ["Darkheart"] = "8485562269"; ["Glacier Blade"] = "8485628964"; ["Katana"] = "8499924296"; }; ["DualBerettas"] = { ["Dual Volcanics"] = "8485649094" } } local ModelsConfig = {} for i, v in pairs(modelsName) do ModelsConfig[i] = v[1] end local FOVCircle = Drawing.new("Circle") local Ping = game.Stats.PerformanceStats.Ping:GetValue() local viewmodelsFolder = game.ReplicatedStorage.Viewmodels local fakelagFolder = Instance.new("Folder", workspace) local backtrackFolder = Instance.new("Folder", workspace) local FriendList = string.split(readfile("Nanohub/CBRO/Friendlist.xyz"), "\n") local SelfObj = {} local viewmodelsFolder = game.ReplicatedStorage.Viewmodels local viewmodelsClone = viewmodelsFolder:Clone() function modifyModel(t, w, i) if t == "replace" and viewmodelsFolder:FindFirstChild("v_" .. w) ~= nil then if viewmodelsFolder:FindFirstChild("v_" .. w) then viewmodelsFolder["v_" .. w]:Destroy() end local model = game:GetObjects("rbxassetid://" .. i)[1]:Clone() model.Name = "v_" .. w model.Parent = viewmodelsFolder elseif t == "remove" and viewmodelsFolder:FindFirstChild("v_" .. w) ~= nil then viewmodelsFolder["v_" .. w]:Destroy() viewmodelsClone["v_" .. w]:Clone().Parent = viewmodelsFolder end end function yrotate(cframe) local x, y, z = cframe:ToOrientation() return CFrame.new(cframe.Position) * CFrame.Angles(0,y,0) end function ChangeCharacter(NewCharacter, plr) plr = plr or Player if not isAlive(plr) then return end for _,Part in pairs (plr.Character:GetChildren()) do if Part:IsA("Accessory") then Part:Destroy() end if Part:IsA("BasePart") then if NewCharacter:FindFirstChild(Part.Name) then Part.Color = NewCharacter:FindFirstChild(Part.Name).Color Part.Transparency = NewCharacter:FindFirstChild(Part.Name).Transparency end if Part.Name == "FakeHead" then Part.Color = NewCharacter:FindFirstChild("Head").Color Part.Transparency = NewCharacter:FindFirstChild("Head").Transparency end end if (Part.Name == "Head" or Part.Name == "FakeHead") and Part:FindFirstChildOfClass("Decal") and NewCharacter.Head:FindFirstChildOfClass("Decal") then Part:FindFirstChildOfClass("Decal").Texture = NewCharacter.Head:FindFirstChildOfClass("Decal").Texture end end if NewCharacter:FindFirstChildOfClass("Shirt") then if plr.Character:FindFirstChildOfClass("Shirt") then plr.Character:FindFirstChildOfClass("Shirt"):Destroy() end local Clone = NewCharacter:FindFirstChildOfClass("Shirt"):Clone() Clone.Parent = plr.Character end if NewCharacter:FindFirstChildOfClass("Pants") then if plr.Character:FindFirstChildOfClass("Pants") then plr.Character:FindFirstChildOfClass("Pants"):Destroy() end local Clone = NewCharacter:FindFirstChildOfClass("Pants"):Clone() Clone.Parent = plr.Character end for _,Part in pairs (NewCharacter:GetChildren()) do if Part:IsA("Accessory") then local Clone = Part:Clone() for _,Weld in pairs (Clone.Handle:GetChildren()) do if Weld:IsA("Weld") and Weld.Part1 ~= nil then Weld.Part1 = plr.Character[Weld.Part1.Name] end end Clone.Parent = plr.Character end end if plr.Character:FindFirstChildOfClass("Shirt") then local String = Instance.new("StringValue") String.Name = "OriginalTexture" String.Value = plr.Character:FindFirstChildOfClass("Shirt").ShirtTemplate String.Parent = plr.Character:FindFirstChildOfClass("Shirt") end if plr.Character:FindFirstChildOfClass("Pants") then local String = Instance.new("StringValue") String.Name = "OriginalTexture" String.Value = plr.Character:FindFirstChildOfClass("Pants").PantsTemplate String.Parent = plr.Character:FindFirstChildOfClass("Pants") end for i,v in pairs(plr.Character:GetChildren()) do if v:IsA("BasePart") and v.Transparency ~= 1 then table.insert(SelfObj, v) local Color = Instance.new("Color3Value") Color.Name = "OriginalColor" Color.Value = v.Color Color.Parent = v local String = Instance.new("StringValue") String.Name = "OriginalMaterial" String.Value = v.Material.Name String.Parent = v elseif v:IsA("Accessory") and v.Handle.Transparency ~= 1 then table.insert(SelfObj, v.Handle) local Color = Instance.new("Color3Value") Color.Name = "OriginalColor" Color.Value = v.Handle.Color Color.Parent = v.Handle local String = Instance.new("StringValue") String.Name = "OriginalMaterial" String.Value = v.Handle.Material.Name String.Parent = v.Handle end end end function getTime() local dataTable = os.date("*t") local hour = dataTable["hour"] local min = dataTable["min"] local sec = dataTable["sec"] if tonumber(sec)<= 9 then sec = "0" .. sec;end if tonumber(min)<= 9 then min = "0" .. min;end if tonumber(hour)<= 9 then hour = "0" .. hour;end return hour .. ":" .. min .. ":" .. sec end function getWatermarkArgument(arg,Fps) local tbl = { Nick = getgenv().nanohub.Visuals.Watermark.Nick; DisplayNick = "nanohub.xyz"; FPS = Fps .. " FPS"; Time = getTime(); Name = "nanohub.xyz"; Ping = tostring(math.floor(Ping)) .. " ms"; } return tbl[arg] end local animations = { ["default"] = "rbxassetid://3732699835"; ["floss"] = "rbxassetid://5917459365"; ["dolphin"] = "rbxassetid://5918726674"; ["happy"] = "rbxassetid://4841405708"; ["baby"] = "rbxassetid://4265725525"; ["not my fault"] = "rbxassetid://6797891807"; ["air dance"] = "rbxassetid://4555782893" } local skyboxes = { ["galaxy"] = { SkyboxBk = "http://www.roblox.com/asset/?id=159454299", SkyboxDn = "http://www.roblox.com/asset/?id=159454296", SkyboxFt = "http://www.roblox.com/asset/?id=159454293", SkyboxLf = "http://www.roblox.com/asset/?id=159454286", SkyboxRt = "http://www.roblox.com/asset/?id=159454300", SkyboxUp = "http://www.roblox.com/asset/?id=159454288", }, ["purple"] = { SkyboxBk = "http://www.roblox.com/asset/?id=570557514", SkyboxDn = "http://www.roblox.com/asset/?id=570557775", SkyboxFt = "http://www.roblox.com/asset/?id=570557559", SkyboxLf = "http://www.roblox.com/asset/?id=570557620", SkyboxRt = "http://www.roblox.com/asset/?id=570557672", SkyboxUp = "http://www.roblox.com/asset/?id=570557727", }, ["purple night"] = { SkyboxBk = "http://www.roblox.com/asset/?id=296908715", SkyboxDn = "http://www.roblox.com/asset/?id=296908724", SkyboxFt = "http://www.roblox.com/asset/?id=296908740", SkyboxLf = "http://www.roblox.com/asset/?id=296908755", SkyboxRt = "http://www.roblox.com/asset/?id=296908764", SkyboxUp = "http://www.roblox.com/asset/?id=296908769", }, ["weirdcore"] = { SkyboxBk = "rbxassetid://6823346883", SkyboxDn = "rbxassetid://6823346883", SkyboxFt = "rbxassetid://6823346883", SkyboxLf = "rbxassetid://6823346883", SkyboxRt = "rbxassetid://6823346883", SkyboxUp = "rbxassetid://6823346883", }, ["jjba"] = { SkyboxBk = "rbxassetid://621159637", SkyboxDn = "rbxassetid://621159721", SkyboxFt = "rbxassetid://621159637", SkyboxLf = "rbxassetid://621159637", SkyboxRt = "rbxassetid://621159637", SkyboxUp = "rbxassetid://621159816", }, } local CustomMath = {} function CustomMath.getIntegrer(num) num = tostring(num) local integrer = "" local from = false for i = 1,#num do local current = string.sub(num,i,i) if not from and current == "." then from = true integrer = integrer .. "." elseif from then integrer = integrer .. current end end return tonumber(integrer) end function isAlive(player) local alive = false if player ~= nil and player.Parent == game.Players and player.Character ~= nil then if player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") ~= nil and player.Character.Humanoid.Health > 0 and player.Character:FindFirstChild("Head") then alive = true end end return alive end library = { Symbols = { Drop = utf8.char(9661); Dropped = utf8.char(9651) }; BlacklistedKeybinds = {"W","A","S","D","Unknown","Space","Escape","Backspace"}; Pointers = {}; CurrentTab = nil; ColorSequences = { [1] = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(100, 0, 150)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(161, 0, 161)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(100, 0, 150))}; [2] = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(170, 0, 255)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(170, 0, 255))}; }; Tabs = {}; EnabledKeybinds = {}; flags = {}; } function getParent() if gethui ~= nil then return gethui() else return game:GetService("CoreGui") end end local UIS = game:GetService("UserInputService") local TweenService = game:GetService("TweenService") local RunService = game:GetService("RunService") local TextService = game:GetService("TextService") local ScreenGui = Instance.new("ScreenGui") local Grad = Instance.new("Frame") local UIGradient = Instance.new("UIGradient") local tyan = Instance.new("ImageLabel") ScreenGui.Parent = getParent() ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling ScreenGui.Enabled = false Grad.Name = "Grad" Grad.Parent = ScreenGui Grad.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Grad.BackgroundTransparency = 0.700 Grad.BorderSizePixel = 0 Grad.Position = UDim2.new(0, 0, -0.0500000007, 0) Grad.Size = UDim2.new(1, 0, 1.04999995, 0) Grad.ZIndex = 2 UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(170, 0, 255)), ColorSequenceKeypoint.new(0.84, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))} UIGradient.Rotation = 270 UIGradient.Parent = Grad tyan.Name = "tyan" tyan.Parent = ScreenGui tyan.BackgroundColor3 = Color3.fromRGB(255, 255, 255) tyan.BackgroundTransparency = 1.000 tyan.BorderSizePixel = 0 tyan.Position = UDim2.new(0.624296069, 0, 0.352727264, 0) tyan.Size = UDim2.new(0.375140697, 0, 0.646666646, 0) tyan.Image = "rbxassetid://2709239901" local Watermark = Instance.new("ScreenGui") local WaterFrame = Instance.new("Frame") local _Text = Instance.new("TextLabel") Watermark.Name = "Watermark" Watermark.Parent = getParent() Watermark.ZIndexBehavior = Enum.ZIndexBehavior.Sibling Watermark.Enabled = false WaterFrame.Name = "WaterFrame" WaterFrame.Parent = Watermark WaterFrame.BackgroundColor3 = Color3.fromRGB(33, 33, 33) WaterFrame.BorderColor3 = Color3.fromRGB(170, 0, 255) WaterFrame.BorderSizePixel = 2 WaterFrame.Position = UDim2.new(1, -50, 0, 0) WaterFrame.Size = UDim2.new(0.185326934, 0, 0.0321212113, 0) _Text.Name = "_Text" _Text.Parent = WaterFrame _Text.BackgroundTransparency = 1.000 _Text.Position = UDim2.new(0.023, 0, 0, 0) _Text.Size = UDim2.new(0.977, 0, 1, 0) _Text.ZIndex = 0 _Text.TextColor3 = Color3.fromRGB(170, 0, 255) _Text.TextScaled = true _Text.TextWrapped = true _Text.TextXAlignment = Enum.TextXAlignment.Left function isAlive(player) local alive = false if player ~= nil and player.Parent == game.Players and player.Character ~= nil then if player.Character:FindFirstChild("HumanoidRootPart") and player.Character:FindFirstChild("Humanoid") ~= nil and player.Character.Humanoid.Health > 0 and player.Character:FindFirstChild("Head") then alive = true end end return alive end function tableRemove(tbl, value) local count = 0 for i,v in pairs(tbl) do count += 1 if v == value then table.remove(tbl, count) break end end end function getSection(size, count, offset) return (offset * 2) + (size * (count - 1)) end function getCanvas(YSizesTable, offset, count, padding) local num = offset * (count - 1) + padding for _, v in pairs(YSizesTable) do num += v end if num > 500 then num += 15 end return num end function getAdvancedSectionSize(ySizes, offset) local num = offset * 2 for i,v in pairs(ySizes) do num += v end return num end function library:CreateWindow(title) local UILib_fake = Instance.new("ScreenGui") local MainFrame = Instance.new("Frame") local UICorner = Instance.new("UICorner") local Title_text = Instance.new("TextLabel") local UIGradient_ = Instance.new("UIGradient") local TabButtons = Instance.new("Frame") local Grid_handler = Instance.new("UIGridLayout") local Tabs = Instance.new("Frame") local WarnFrame = Instance.new("Frame") local UICorner_ = Instance.new("UICorner") local Warn = Instance.new("Frame") local Alert = Instance.new("TextLabel") local Ok = Instance.new("TextButton") local Cancel = Instance.new("TextButton") local KeybindsFrame = Instance.new("Frame") local UICorner__ = Instance.new("UICorner") local Border = Instance.new("Frame") local UICorner_2_ = Instance.new("UICorner") local Main = Instance.new("Frame") local UICorner_3_ = Instance.new("UICorner") local KeyText = Instance.new("TextLabel") local List = Instance.new("Frame") local UIListLayout = Instance.new("UIListLayout") local UIPadding_ = Instance.new("UIPadding") local Background = Instance.new("ImageLabel", MainFrame) UILib_fake.Name = "Ui_Lib_v2.0" UILib_fake.ZIndexBehavior = Enum.ZIndexBehavior.Sibling UILib_fake.DisplayOrder = 999 UILib_fake.Enabled = true UILib_fake.Parent = getParent() MainFrame.Name = "MainFrame" MainFrame.Parent = UILib_fake MainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) MainFrame.Position = UDim2.new(0.303827763, 0, 0.136969686, 0) MainFrame.Size = UDim2.new(0, 492, 0, 598) MainFrame.Visible = false UICorner.Parent = MainFrame Title_text.Name = "Title_text" Title_text.Parent = MainFrame Title_text.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Title_text.BackgroundTransparency = 1.000 Title_text.Position = UDim2.new(0, 0, -1.27581847e-08, 0) Title_text.Size = UDim2.new(1.00000012, 0, 0.0632107034, 0) Title_text.Font = Enum.Font.Kalam Title_text.Text = title Title_text.TextColor3 = Color3.fromRGB(255, 255, 255) Title_text.TextScaled = true Title_text.TextWrapped = true UIGradient_.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(170, 0, 255)), ColorSequenceKeypoint.new(0.50, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(170, 0, 255))} UIGradient_.Parent = Title_text TabButtons.Name = "TabButtons" TabButtons.Parent = MainFrame TabButtons.BackgroundColor3 = Color3.fromRGB(255, 255, 255) TabButtons.BackgroundTransparency = 1.000 TabButtons.Position = UDim2.new(0, 0, 0.0618729107, 0) TabButtons.Size = UDim2.new(1, 0, 0.0615384616, 0) Grid_handler.Name = "Grid_handler" Grid_handler.Parent = TabButtons Grid_handler.SortOrder = Enum.SortOrder.LayoutOrder Grid_handler.CellPadding = UDim2.new(0, 0, 0, 0) Grid_handler.CellSize = UDim2.new(1, 0, 1, 0) Grid_handler.FillDirection = Enum.FillDirection.Vertical Tabs.Name = "Tabs" Tabs.Parent = MainFrame Tabs.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Tabs.BackgroundTransparency = 1.000 Tabs.Position = UDim2.new(-0.00203252025, 0, 0.138795987, 0) Tabs.Size = UDim2.new(1.00203228, 0, 0.861203909, 0) WarnFrame.Name = "WarnFrame" WarnFrame.Parent = MainFrame WarnFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) WarnFrame.BackgroundTransparency = 0.400 WarnFrame.BorderSizePixel = 0 WarnFrame.Size = UDim2.new(1, 0, 1, 0) WarnFrame.Visible = false UICorner_.Parent = WarnFrame Warn.Name = "Warn" Warn.Parent = WarnFrame Warn.BackgroundColor3 = Color3.fromRGB(0, 0, 0) Warn.BorderColor3 = Color3.fromRGB(170, 0, 255) Warn.Position = UDim2.new(0.278455287, 0, 0.347826093, 0) Warn.Size = UDim2.new(0.431300968, 0, 0.14882943, 0) Alert.Name = "Alert" Alert.Parent = Warn Alert.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Alert.BackgroundTransparency = 1.000 Alert.Size = UDim2.new(0.999998748, 0, 0.561797857, 0) Alert.Font = Enum.Font.Michroma Alert.TextColor3 = Color3.fromRGB(255, 255, 255) Alert.TextScaled = true Alert.TextSize = 14.000 Alert.TextWrapped = true Ok.Name = "Ok" Ok.Parent = Warn Ok.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Ok.BackgroundTransparency = 1.000 Ok.Position = UDim2.new(-2.87630229e-07, 0, 0.595505595, 0) Ok.Size = UDim2.new(0.5, 0, 0.359384596, 0) Ok.Font = Enum.Font.Michroma Ok.Text = "OK" Ok.TextColor3 = Color3.fromRGB(255, 255, 255) Ok.TextScaled = true Ok.TextSize = 14.000 Ok.TextWrapped = true Cancel.Name = "Cancel" Cancel.Parent = Warn Cancel.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Cancel.BackgroundTransparency = 1.000 Cancel.Position = UDim2.new(0.499999702, 0, 0.595505595, 0) Cancel.Size = UDim2.new(0.500000417, 0, 0.359550655, 0) Cancel.Font = Enum.Font.Michroma Cancel.Text = "Cancel" Cancel.TextColor3 = Color3.fromRGB(131, 131, 131) Cancel.TextScaled = true Cancel.TextSize = 14.000 Cancel.TextWrapped = true KeybindsFrame.Name = "KeybindsFrame" KeybindsFrame.Parent = UILib_fake KeybindsFrame.BackgroundColor3 = Color3.fromRGB(170, 0, 255) KeybindsFrame.Position = UDim2.new(-0.0176848881, 0, 0.306666672, 0) KeybindsFrame.Size = UDim2.new(0.151446939, 0, 0.0521212108, 0) KeybindsFrame.Visible = false UICorner__.CornerRadius = UDim.new(0, 10) UICorner__.Parent = KeybindsFrame Border.Name = "Border" Border.Parent = KeybindsFrame Border.BackgroundColor3 = Color3.fromRGB(170, 0, 255) Border.Position = UDim2.new(-0.0700000003, 0, -0.135000005, 0) Border.Size = UDim2.new(1.10000002, 0, 1.29999995, 0) UICorner_2_.CornerRadius = UDim.new(0, 10) UICorner_2_.Parent = Border Main.Name = "Main" Main.Parent = KeybindsFrame Main.BackgroundColor3 = Color3.fromRGB(0, 0, 0) Main.Size = UDim2.new(1, 0, 1, 0) UICorner_3_.CornerRadius = UDim.new(0, 10) UICorner_3_.Parent = Main KeyText.Parent = Main KeyText.BackgroundColor3 = Color3.fromRGB(255, 255, 255) KeyText.BackgroundTransparency = 1.000 KeyText.Position = UDim2.new(0.153927818, 0, 0, 0) KeyText.Size = UDim2.new(0.803609312, 0, 1, 0) KeyText.Font = Enum.Font.Code KeyText.Text = "keybinds" KeyText.TextColor3 = Color3.fromRGB(255, 255, 255) KeyText.TextScaled = true KeyText.TextSize = 14.000 KeyText.TextWrapped = true List.Name = "List" List.Parent = KeybindsFrame List.BackgroundColor3 = Color3.fromRGB(255, 255, 255) List.BackgroundTransparency = 1.000 List.Position = UDim2.new(0.11677283, 0, 1.44186044, 0) List.Size = UDim2.new(0.913227141, 0, 11.8604994, 0) UIListLayout.Parent = List UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder UIPadding_.Parent = List UIPadding_.PaddingLeft = UDim.new(0.05, 0) Background.BackgroundTransparency = 1 Background.Image = "rbxassetid://0" Background.ImageTransparency = 0.5 Background.Size = UDim2.new(1, 0, 1, 0) Background.ZIndex = 0 Instance.new("UICorner", Background) local ColorPickerDragging = false local dragToggle = nil local dragInput = nil local dragStart = nil local dragPos = nil local startPos = MainFrame.Position local function updateInput(input) local Delta = input.Position - dragStart local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y) if ColorPickerDragging == false then MainFrame.Position = Position end end MainFrame.InputBegan:Connect(function(input) if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) and UIS:GetFocusedTextBox() == nil then dragToggle = true dragStart = input.Position startPos = MainFrame.Position input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then dragToggle = false end end) end end) MainFrame.InputChanged:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then dragInput = input end end) UIS.InputChanged:Connect(function(input) if input == dragInput and dragToggle then updateInput(input) end end) RunService.RenderStepped:Connect(function() for _, key in pairs(library.EnabledKeybinds) do if key[2]:lower():find("ui") and key[1] == true and List:FindFirstChild(key[2] .. "_key") == nil and key[3] ~= ("..." or "NONE") then local Keybind = Instance.new("TextLabel") Keybind.Name = key[2] .. "_key" Keybind.Parent = List Keybind.TextStrokeTransparency = 0 Keybind.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Keybind.BackgroundTransparency = 1.000 Keybind.Position = UDim2.new(0.122056134, 0, 0.00392155722, 0) Keybind.Size = UDim2.new(1, 0, 0.0607841387, 0) Keybind.Font = Enum.Font.Code Keybind.Text = "[" .. key[3]:upper() .. "] " .. key[2]:lower() Keybind.TextColor3 = Color3.fromRGB(255, 255, 255) Keybind.TextScaled = true Keybind.TextSize = 14.000 Keybind.TextWrapped = true Keybind.TextXAlignment = Enum.TextXAlignment.Left elseif key[1] == false and List:FindFirstChild(key[2] .. "_key") then List[key[2] .. "_key"]:Destroy() end end end) local windowLib = {} function windowLib:CreateTab(title) local tabTitle = title local tab_btn = Instance.new("TextButton") local UIGradient_2 = Instance.new("UIGradient") local Tab = Instance.new("Frame") local Left = Instance.new("ScrollingFrame") local UIListLayout = Instance.new("UIListLayout") local UIPadding = Instance.new("UIPadding") local Right = Instance.new("ScrollingFrame") local UIListLayout_3 = Instance.new("UIListLayout") local UIPadding_2 = Instance.new("UIPadding") tab_btn.Name = title .. "_btn" tab_btn.Parent = TabButtons tab_btn.BackgroundColor3 = Color3.fromRGB(255, 255, 255) tab_btn.BackgroundTransparency = 1.000 tab_btn.BorderSizePixel = 0 tab_btn.Font = Enum.Font.Michroma tab_btn.Text = title tab_btn.TextColor3 = Color3.fromRGB(255, 255, 255) tab_btn.TextSize = 25 Grid_handler.CellSize = UDim2.new(1 / (#TabButtons:GetChildren() - 1),0,1,0) UIGradient_2.Color = library.ColorSequences[1] UIGradient_2.Parent = tab_btn Tab.Name = title .. "_tab" Tab.Parent = Tabs Tab.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Tab.BackgroundTransparency = 1.000 Tab.Size = UDim2.new(1, 0, 1, 0) Tab.Visible = false Left.Name = "Left" Left.Parent = Tab Left.Active = true Left.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Left.BackgroundTransparency = 1.000 Left.BorderSizePixel = 0 Left.Size = UDim2.new(0.5, 0, 1, 0) Left.BottomImage = "" Left.CanvasSize = UDim2.new(0, 0, 0, 0) Left.MidImage = "" Left.ScrollBarThickness = 0 Left.TopImage = "" UIListLayout.Parent = Left UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder UIListLayout.Padding = UDim.new(0, 15) UIPadding.Parent = Left UIPadding.PaddingLeft = UDim.new(0, 15) UIPadding.PaddingRight = UDim.new(0, 15) UIPadding.PaddingTop = UDim.new(0, 15) Right.Name = "Right" Right.Parent = Tab Right.Active = true Right.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Right.BackgroundTransparency = 1.000 Right.BorderSizePixel = 0 Right.Position = UDim2.new(0.501014352, 0, 0, 0) Right.Size = UDim2.new(0.5, 0, 1, 0) Right.BottomImage = "" Right.CanvasSize = UDim2.new(0, 0, 0, 0) Right.MidImage = "" Right.ScrollBarThickness = 0 Right.TopImage = "" UIListLayout_3.Parent = Right UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder UIListLayout_3.Padding = UDim.new(0, 15) UIPadding_2.Parent = Right UIPadding_2.PaddingLeft = UDim.new(0, 15) UIPadding_2.PaddingRight = UDim.new(0, 15) UIPadding_2.PaddingTop = UDim.new(0, 15) tab_btn.MouseButton1Click:Connect(function() windowLib:setCurrentTab(title) end) local tabLib = {Sides = {"Left", "Right"}} function tabLib:CreateSection(title, side) title = title or "Name" side = side or tabLib.Sides[math.random(1,2)] local Section = Instance.new("Frame") local Title = Instance.new("TextLabel") local BorderDown = Instance.new("Frame") local BorderUp2 = Instance.new("Frame") local BorderUp1 = Instance.new("Frame") local BorderRight = Instance.new("Frame") local BorderLeft = Instance.new("Frame") Section.Name = "Section" Section.Parent = Tab[side] Section.BackgroundTransparency = 1 Section.BorderColor3 = Color3.fromRGB(170, 0, 255) Section.Position = UDim2.new(0, 0, 0.0310679656, 0) Section.Size = UDim2.new(1, 0, 0, 10) tabLib:updateCanvas() Title.Name = "Title" Title.Parent = Section Title.BackgroundTransparency = 1 Title.BorderSizePixel = 0 Title.Position = UDim2.new(0, 35, 0, -10) Title.Size = UDim2.new(0, 60, 0, 20) Title.Font = Enum.Font.Michroma Title.Text = title Title.TextColor3 = Color3.fromRGB(255, 255, 255) Title.TextScaled = true Title.TextWrapped = true BorderDown.Name = "BorderDown" BorderDown.Parent = Section BorderDown.BackgroundColor3 = Color3.fromRGB(170, 0, 255) BorderDown.Position = UDim2.new(0, 0, 1, 0) BorderDown.Size = UDim2.new(1.00300002, 0, 0.0045, 0) BorderDown.BorderSizePixel = 1 BorderDown.BorderColor3 = Color3.fromRGB(170, 0, 255) BorderUp2.Name = "BorderUp2" BorderUp2.Parent = Section BorderUp2.BackgroundColor3 = Color3.fromRGB(170, 0, 255) BorderUp2.BorderSizePixel = 1 BorderUp2.BorderColor3 = Color3.fromRGB(170, 0, 255) BorderUp2.Position = UDim2.new(0.449999988, 0, 0, 0) BorderUp2.Size = UDim2.new(0.550000006, 0, 0.0045, 0) BorderUp1.Name = "BorderUp1" BorderUp1.Parent = Section BorderUp1.BackgroundColor3 = Color3.fromRGB(170, 0, 255) BorderUp1.BorderSizePixel = 1 BorderUp1.BorderColor3 = Color3.fromRGB(170, 0, 255) BorderUp1.Size = UDim2.new(0.150000006, 0, 0.0045, 0) BorderRight.Name = "BorderRight" BorderRight.Parent = Section BorderRight.BackgroundColor3 = Color3.fromRGB(170, 0, 255) BorderRight.BorderColor3 = Color3.fromRGB(27, 42, 53) BorderRight.BorderSizePixel = 1 BorderRight.BorderColor3 = Color3.fromRGB(170, 0, 255) BorderRight.Position = UDim2.new(1, 0, 0, 0) BorderRight.Size = UDim2.new(0.004, 0, 1, 0) BorderLeft.Name = "BorderLeft" BorderLeft.Parent = Section BorderLeft.BackgroundColor3 = Color3.fromRGB(170, 0, 255) BorderLeft.BorderColor3 = Color3.fromRGB(27, 42, 53) BorderLeft.BorderSizePixel = 1 BorderLeft.BorderColor3 = Color3.fromRGB(170, 0, 255) BorderLeft.Size = UDim2.new(0.004, 0, 1, 0) local sectionLib = {} function sectionLib:getPos() local pos = 10 for i,v in pairs(Section:GetChildren()) do if i > 1 then pos += v.Size.Y.Offset end end return pos end function sectionLib:getYSizes() local tbl = {} for i,v in pairs(Section:GetChildren()) do if i > 1 then table.insert(tbl, v.Size.Y.Offset) end end return tbl end function sectionLib:CreateButton(title, callback) title = title or "Button" callback = callback or function() end local Button = Instance.new("TextButton") Button.Name = "Button" Button.Parent = Section Button.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Button.BackgroundTransparency = 1.000 Button.Position = UDim2.new(0, 0, 0, sectionLib:getPos()) Button.Size = UDim2.new(1, 0, 0, 25) Button.Font = Enum.Font.Michroma Button.Text = title Button.TextColor3 = Color3.fromRGB(255, 255, 255) Button.TextScaled = true Button.TextSize = 14.000 Button.TextWrapped = true Section.Size = UDim2.new(1,0,0, getAdvancedSectionSize(sectionLib:getYSizes(), 10)) tabLib:updateCanvas() Button.MouseButton1Click:Connect(function() pcall(callback) end) end function sectionLib:CreateToggle(title, callback, default, flag) title = title or "Toggle" callback = callback or function() end default = default or false if flag ~= nil then library.flags[flag] = default end local Toggle = Instance.new("TextButton") local _CHECKBOX = Instance.new("Frame") Toggle.Name = "Toggle" Toggle.Parent = Section Toggle.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Toggle.BackgroundTransparency = 1.000 Toggle.Position = UDim2.new(0, 0, 0, sectionLib:getPos()) Toggle.Size = UDim2.new(1, 0, 0, 25) Toggle.Font = Enum.Font.Michroma Toggle.Text = title Toggle.TextColor3 = Color3.fromRGB(255, 255, 255) Toggle.TextSize = 19 Section.Size = UDim2.new(1,0,0, getAdvancedSectionSize(sectionLib:getYSizes(), 10)) tabLib:updateCanvas() _CHECKBOX.Name = "_CHECKBOX" _CHECKBOX.Parent = Toggle _CHECKBOX.BorderSizePixel = 0 _CHECKBOX.Position = UDim2.new(0.0554272681, 0, 0.119999997, 0) _CHECKBOX.Size = UDim2.new(0.0850000009, 0, 0.720000029, 0) local function getColor(toggle) if toggle == true then return Color3.fromRGB(170, 0, 255) else return Color3.fromRGB(79, 0, 132) end end _CHECKBOX.BackgroundColor3 = getColor(default) local toggle = default Toggle.MouseButton1Click:Connect(function() toggle = not toggle if flag ~= nil then library.flags[flag] = toggle end TweenService:Create(_CHECKBOX, TweenInfo.new(.2), {BackgroundColor3 = getColor(toggle)}):Play() callback(toggle) end) local toggleLib = {} function toggleLib:Get() return toggle end function toggleLib:Set(value) toggle = value if flag ~= nil then library.flags[flag] = toggle end TweenService:Create(_CHECKBOX, TweenInfo.new(.2), {BackgroundColor3 = getColor(toggle)}):Play() callback(toggle) end function toggleLib:AddKeybind(key, toList) toList = toList or true key = key or "..." if toList == true then library.EnabledKeybinds[title .. "_" .. Title.Text .. "_" .. tabTitle] = {toggle, title, key} end local _KEY = Instance.new("TextButton") local Corner = Instance.new("UICorner", _CHECKBOX) Corner.CornerRadius = UDim.new(0, 10) _KEY.Name = "_KEY" _KEY.Parent = Toggle _KEY.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _KEY.BackgroundTransparency = 1.000 _KEY.Position = UDim2.new(0.8, 0, 0, 0) _KEY.Size = UDim2.new(0.18, 0, 1, 0) _KEY.Font = Enum.Font.Michroma _KEY.Text = "[" .. key .. "]" _KEY.TextColor3 = Color3.fromRGB(255, 255, 255) _KEY.TextScaled = true _KEY.TextSize = 14.000 _KEY.TextWrapped = true local binding = false _KEY.MouseButton1Click:Connect(function() binding = true _KEY.Text = "[...]" end) UIS.InputBegan:Connect(function(input, typing) if not typing and binding and input.UserInputType == Enum.UserInputType.Keyboard then local KeyName = input.KeyCode.Name if not table.find(library.BlacklistedKeybinds, KeyName) then binding = false key = KeyName local keyNames = { ["minus"] = "-"; ["keypadminus"] = "-"; ["equals"] = "="; ["insert"] = "INS"; ["delete"] = "DEL"; } if keyNames[KeyName:lower()] ~= nil then _KEY.Text = "[" .. keyNames[KeyName:lower()] .. "]" else _KEY.Text = "[" .. key .. "]" end else key = "..." binding = false _KEY.Text = "[" .. key .. "]" end elseif not typing and not binding and input.UserInputType == Enum.UserInputType.Keyboard then local KeyName = input.KeyCode.Name if KeyName == key then toggle = not toggle if toList == true then library.EnabledKeybinds[title .. "_" .. Title.Text .. "_" .. tabTitle] = {toggle, title, key} end toggleLib:Set(toggle) end end end) local keybindLib = {} function keybindLib:Get() return key end function keybindLib:Set(keyName) key = keyName if keyName == "NONE" then key = "..." end if toList == true then library.EnabledKeybinds[title .. "_" .. Title.Text .. "_" .. tabTitle] = {toggle, title, key} end _KEY.Text = "[" .. key .. "]" end library.Pointers[title .. "_" .. Title.Text .. "_" .. tabTitle .. "_keybind"] = keybindLib return keybindLib end library.Pointers[title .. "_" .. Title.Text .. "_" .. tabTitle] = toggleLib return toggleLib end function sectionLib:CreateTextbox(title, callback) callback = callback or function() end local TextBox = Instance.new("TextBox") TextBox.Parent = Section TextBox.BackgroundColor3 = Color3.fromRGB(255, 255, 255) TextBox.BackgroundTransparency = 1.000 TextBox.Position = UDim2.new(0, 0, 0, sectionLib:getPos()) TextBox.Size = UDim2.new(1, 0, 0, 25) TextBox.Font = Enum.Font.Michroma TextBox.PlaceholderText = title TextBox.Text = "" TextBox.TextColor3 = Color3.fromRGB(255, 255, 255) TextBox.TextScaled = true TextBox.TextSize = 14.000 TextBox.TextWrapped = true TextBox.ClearTextOnFocus = false Section.Size = UDim2.new(1,0,0, getAdvancedSectionSize(sectionLib:getYSizes(), 10)) tabLib:updateCanvas() TextBox.FocusLost:Connect(function() callback(TextBox.Text) end) local textLib = {} function textLib:Get() return TextBox.Text end function textLib:Set(value) TextBox.Text = value pcall(callback, TextBox.Text) end library.Pointers[title .. "_" .. Title.Text .. "_" .. tabTitle] = textLib return textLib end function sectionLib:CreateDropdown(title, options, callback, multi) title = title or "Dropdown" options = options or {"1","2"} callback = callback or function() end multi = multi or false local Dropdown = Instance.new("TextButton") local _ICON = Instance.new("TextLabel") local _DROP = Instance.new("Frame") local UIListLayout_2 = Instance.new("UIListLayout") Dropdown.Name = "Dropdown" Dropdown.Parent = Section Dropdown.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Dropdown.BackgroundTransparency = 1.000 Dropdown.Position = UDim2.new(0, 0, 0, sectionLib:getPos()) Dropdown.Size = UDim2.new(1, 0, 0, 25) Dropdown.ZIndex = 2 Dropdown.Font = Enum.Font.Michroma Dropdown.Text = title Dropdown.TextColor3 = Color3.fromRGB(255, 255, 255) Dropdown.TextScaled = true Dropdown.TextSize = 14.000 Dropdown.TextWrapped = true Section.Size = UDim2.new(1,0,0, getAdvancedSectionSize(sectionLib:getYSizes(), 10)) tabLib:updateCanvas() _ICON.Name = "_ICON" _ICON.Parent = Dropdown _ICON.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _ICON.BackgroundTransparency = 1.000 _ICON.Position = UDim2.new(0.0230946951, 0, 0, 0) _ICON.Size = UDim2.new(0.147806048, 0, 1, 0) _ICON.Font = Enum.Font.Michroma _ICON.Text = utf8.char(9661) _ICON.TextColor3 = Color3.fromRGB(255, 255, 255) _ICON.TextScaled = true _ICON.TextSize = 14.000 _ICON.TextWrapped = true _DROP.Name = "_DROP" _DROP.Parent = Dropdown _DROP.BackgroundColor3 = Color3.fromRGB(0, 0, 0) _DROP.BorderColor3 = Color3.fromRGB(170, 0, 255) _DROP.Position = UDim2.new(.1, 0, 1, 0) _DROP.Size = UDim2.new(0.9, 0, 0, 50) _DROP.Visible = false _DROP.ZIndex = 2 _DROP.ClipsDescendants = true UIListLayout_2.Parent = _DROP UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder local selected = {options[1]} local function updateDropSize(count, size) _DROP.Size = UDim2.new(.8, 0, 0 , count * size + 3) end local function updateColors() for i,v in pairs(selected) do for _,v2 in pairs(_DROP:GetChildren()) do if v2:IsA("TextButton") then if not multi then if "_" .. v == v2.Name then TweenService:Create(v2, TweenInfo.new(.2), {TextColor3 = Color3.fromRGB(170, 0, 255)}):Play() else TweenService:Create(v2, TweenInfo.new(.2), {TextColor3 = Color3.fromRGB(79, 0, 132)}):Play() end else if table.find(selected, string.sub(v2.Name,2,-1)) then TweenService:Create(v2, TweenInfo.new(.2), {TextColor3 = Color3.fromRGB(170, 0, 255)}):Play() else TweenService:Create(v2, TweenInfo.new(.2), {TextColor3 = Color3.fromRGB(79, 0, 132)}):Play() end end end end end end for i,v in pairs(options) do local _OPTION = Instance.new("TextButton") _OPTION.Name = "_" .. v _OPTION.Parent = _DROP _OPTION.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _OPTION.BackgroundTransparency = 1.000 _OPTION.BorderSizePixel = 0 _OPTION.Size = UDim2.new(1, 0, 0, 25) _OPTION.Font = Enum.Font.Michroma _OPTION.Text = v _OPTION.TextColor3 = Color3.fromRGB(170, 0, 255) _OPTION.TextScaled = true _OPTION.TextSize = 14.000 _OPTION.TextWrapped = true _OPTION.MouseButton1Click:Connect(function() if not multi then selected = {v} callback(selected) updateColors() else if not table.find(selected, v) then table.insert(selected, v) else if #selected > 1 then tableRemove(selected, v) end end callback(selected) updateColors() end end) updateDropSize(#_DROP:GetChildren() - 1, 25) end updateColors() local function toggleList() local oldSize = _DROP.Size _DROP.Size = UDim2.new(.8, 0, 0, 0) _DROP.Visible = not _DROP.Visible TweenService:Create(_DROP, TweenInfo.new(.1), {Size = oldSize}):Play() Dropdown.ZIndex = (_DROP.Visible == true and 5 or 1) Section.ZIndex = (_DROP.Visible == true and 5 or 1) if _DROP.Visible then _ICON.Text = utf8.char(9651) else _ICON.Text = utf8.char(9661) end end Dropdown.MouseButton1Click:Connect(function() toggleList() end) local dropdownLib = {} function dropdownLib:Get() return selected end function dropdownLib:Set(value) selected = value updateColors() callback(value) end function dropdownLib:Refresh(options) selected = {options[1]} _DROP:ClearAllChildren() UIListLayout_2 = Instance.new("UIListLayout") UIListLayout_2.Parent = _DROP UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder for i,v in pairs(options) do local _OPTION = Instance.new("TextButton") _OPTION.Name = "_" .. v _OPTION.Parent = _DROP _OPTION.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _OPTION.BackgroundTransparency = 1.000 _OPTION.BorderSizePixel = 0 _OPTION.Size = UDim2.new(1, 0, 0, 25) _OPTION.Font = Enum.Font.Michroma _OPTION.Text = v _OPTION.TextColor3 = Color3.fromRGB(170, 0, 255) _OPTION.TextScaled = true _OPTION.TextSize = 14.000 _OPTION.TextWrapped = true _OPTION.MouseButton1Click:Connect(function() if not multi then selected = {v} callback(selected) updateColors() else if not table.find(selected, v) then table.insert(selected, v) else if #selected > 1 then tableRemove(selected, v) end end callback(selected) updateColors() end end) updateDropSize(#_DROP:GetChildren() - 1, 25) end updateColors() end library.Pointers[title .. "_" .. Title.Text .. "_" .. tabTitle] = dropdownLib return dropdownLib end function sectionLib:CreateSlider(title, min, max, default, callback) title = title or "Slider" callback = callback or function() end min = min or 0 max = max or 25 if min < 0 then min = 0 end local Slider = Instance.new("TextButton") local _TEXT = Instance.new("TextLabel") local _SLIDER = Instance.new("Frame") local UICorner = Instance.new("UICorner") local _BAR = Instance.new("Frame") local UICorner_2 = Instance.new("UICorner") local _VALUE = Instance.new("TextLabel") Slider.Name = title Slider.Parent = Section Slider.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Slider.BackgroundTransparency = 1.000 Slider.Position = UDim2.new(0, 0, 0, sectionLib:getPos()) Slider.Size = UDim2.new(1, 0, 0, 50) Slider.Font = Enum.Font.Michroma Slider.Text = "" Slider.TextColor3 = Color3.fromRGB(255, 255, 255) Slider.TextScaled = true Slider.TextSize = 14.000 Slider.TextWrapped = true Section.Size = UDim2.new(1,0,0, getAdvancedSectionSize(sectionLib:getYSizes(), 10)) tabLib:updateCanvas() _TEXT.Name = "_TEXT" _TEXT.Parent = Slider _TEXT.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _TEXT.BackgroundTransparency = 1.000 _TEXT.Size = UDim2.new(1, 0, 0.5, 0) _TEXT.Font = Enum.Font.Michroma _TEXT.Text = title _TEXT.TextColor3 = Color3.fromRGB(255, 255, 255) _TEXT.TextScaled = true _TEXT.TextSize = 14.000 _TEXT.TextWrapped = true _SLIDER.Name = "_SLIDER" _SLIDER.Parent = Slider _SLIDER.BackgroundColor3 = Color3.fromRGB(79, 0, 132) _SLIDER.BorderSizePixel = 0 _SLIDER.Position = UDim2.new(0.0549999997, 0, 0.550000012, 0) _SLIDER.Size = UDim2.new(0.873000026, 0, 0.400000006, 0) UICorner.Parent = _SLIDER _BAR.Name = "_BAR" _BAR.Parent = _SLIDER _BAR.BackgroundColor3 = Color3.fromRGB(170, 0, 255) _BAR.BorderSizePixel = 0 _BAR.Size = UDim2.new(1 / (max / default), 0, 1, 0) UICorner_2.Parent = _BAR _VALUE.Name = "_VALUE" _VALUE.Parent = _SLIDER _VALUE.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _VALUE.BackgroundTransparency = 1.000 _VALUE.Size = UDim2.new(1, 0, 1, 0) _VALUE.Font = Enum.Font.Michroma _VALUE.Text = tostring(default) .. "/" .. tostring(max) _VALUE.TextColor3 = Color3.fromRGB(255, 255, 255) _VALUE.TextScaled = true _VALUE.TextWrapped = true local value = default local dragging = false local function Slide(input) local pos = UDim2.new(math.clamp((input.Position.X - _SLIDER.AbsolutePosition.X) / _SLIDER.AbsoluteSize.X, 0, 1), 0, 1, 0) TweenService:Create(_BAR, TweenInfo.new(.1), {Size = pos}):Play() local s = math.floor(((pos.X.Scale * max) / max) * (max - min) + min) value = s _VALUE.Text = tostring(s) .. "/" .. max callback(value) end _SLIDER.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then Slide(input) dragging = true end end) _SLIDER.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then dragging = false end end) UIS.InputChanged:Connect(function(input) if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then Slide(input) end end) local sliderLib = {} function sliderLib:Get() return value end function sliderLib:Set(val) if val < min then val = min elseif val > max then val = max end value = val _VALUE.Text = tostring(value) .. "/" .. tostring(max) TweenService:Create(_BAR, TweenInfo.new(.1), {Size = UDim2.new(value / max,0,1,0)}):Play() return callback(value) end library.Pointers[title .. "_" .. Title.Text .. "_" .. tabTitle] = sliderLib return sliderLib end function sectionLib:CreateColorPicker(title, default, callback) title = title or "Colorpicker" default = default or Color3.new(1,1,1) callback = callback or function() end local Colorpicker = Instance.new("TextButton") local _COLOR = Instance.new("Frame") local UICorner_2 = Instance.new("UICorner") local _PICKER = Instance.new("Frame") local _GRADIENT = Instance.new("ImageLabel") local _PICKER_2 = Instance.new("ImageLabel") local _SLIDER = Instance.new("Frame") local UIGradient2_ = Instance.new("UIGradient") local _BORDER = Instance.new("Frame") local Rainbow = Instance.new("TextButton") local _CHECK = Instance.new("Frame") local UICorner2_ = Instance.new("UICorner") local _TEXT = Instance.new("TextLabel") Colorpicker.Name = "Colorpicker" Colorpicker.Parent = Section Colorpicker.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Colorpicker.BackgroundTransparency = 1.000 Colorpicker.Position = UDim2.new(0, 0, 0, sectionLib:getPos()) Colorpicker.Size = UDim2.new(1, 0, 0, 25) Colorpicker.ZIndex = 2 Colorpicker.Font = Enum.Font.Michroma Colorpicker.Text = title Colorpicker.TextColor3 = Color3.fromRGB(255, 255, 255) Colorpicker.TextScaled = true Colorpicker.TextSize = 14.000 Colorpicker.TextWrapped = true Section.Size = UDim2.new(1,0,0, getAdvancedSectionSize(sectionLib:getYSizes(), 10)) tabLib:updateCanvas() _COLOR.Name = "_COLOR" _COLOR.Parent = Colorpicker _COLOR.BackgroundColor3 = default _COLOR.BorderSizePixel = 0 _COLOR.Position = UDim2.new(0.0554272681, 0, 0.119999997, 0) _COLOR.Size = UDim2.new(0.0850000009, 0, 0.720000029, 0) UICorner_2.CornerRadius = UDim.new(0, 10) UICorner_2.Parent = _COLOR _PICKER.Name = "_PICKER" _PICKER.Parent = Colorpicker _PICKER.BackgroundColor3 = Color3.fromRGB(0, 0, 0) _PICKER.BorderColor3 = Color3.fromRGB(170, 0, 255) _PICKER.Position = UDim2.new(0.0554274097, 0, 1.55999994, 0) _PICKER.Size = UDim2.new(0.88452661, 0, 7.96000099, 0) _PICKER.Visible = false _GRADIENT.Name = "_GRADIENT" _GRADIENT.Parent = _PICKER _GRADIENT.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _GRADIENT.BorderColor3 = Color3.fromRGB(170, 0, 255) _GRADIENT.Position = UDim2.new(0.0574412681, 0, 0.0663777143, 0) _GRADIENT.Size = UDim2.new(0.869451642, 0, 0.506464064, 0) _GRADIENT.Image = "rbxassetid://4155801252" _PICKER_2.Name = "_PICKER" _PICKER_2.Parent = _GRADIENT _PICKER_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _PICKER_2.BackgroundTransparency = 1.000 _PICKER_2.Position = UDim2.new(0.899999976, 0, 0, 0) _PICKER_2.Size = UDim2.new(0, 19, 0, 19) _PICKER_2.Image = "rbxassetid://4953646208" _SLIDER.Name = "_SLIDER" _SLIDER.Parent = _PICKER _SLIDER.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _SLIDER.BorderSizePixel = 0 _SLIDER.Position = UDim2.new(0.063000001, 0, 0.648999989, 0) _SLIDER.Size = UDim2.new(0.869000018, 0, 0.112999998, 0) UIGradient2_.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 4)), ColorSequenceKeypoint.new(0.20, Color3.fromRGB(255, 0, 251)), ColorSequenceKeypoint.new(0.40, Color3.fromRGB(0, 17, 255)), ColorSequenceKeypoint.new(0.60, Color3.fromRGB(0, 255, 255)), ColorSequenceKeypoint.new(0.80, Color3.fromRGB(21, 255, 0)), ColorSequenceKeypoint.new(0.90, Color3.fromRGB(234, 255, 0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 4))} UIGradient2_.Parent = _SLIDER _BORDER.Name = "_BORDER" _BORDER.Parent = _PICKER _BORDER.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _BORDER.BorderColor3 = Color3.fromRGB(170, 0, 255) _BORDER.Position = UDim2.new(0.0626631975, 0, 0.648818612, 0) _BORDER.Size = UDim2.new(0.869451642, 0, 0.112805441, 0) _BORDER.ZIndex = 0 Rainbow.Name = "Rainbow" Rainbow.Parent = _PICKER Rainbow.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Rainbow.BackgroundTransparency = 1.000 Rainbow.Position = UDim2.new(0.0574414246, 0, 0.809045076, 0) Rainbow.Size = UDim2.new(0.869451582, 0, 0.155756474, 0) Rainbow.Font = Enum.Font.SourceSans Rainbow.Text = "" Rainbow.TextColor3 = Color3.fromRGB(0, 0, 0) Rainbow.TextSize = 14.000 _CHECK.Name = "_CHECK" _CHECK.Parent = Rainbow _CHECK.BackgroundColor3 = Color3.fromRGB(79, 0, 132) _CHECK.Position = UDim2.new(0.0299999993, 0, 0.0649999976, 0) _CHECK.Size = UDim2.new(0.153152838, 0, 0.838473737, 0) UICorner2_.CornerRadius = UDim.new(1, 0) UICorner2_.Parent = _CHECK _TEXT.Name = "_TEXT" _TEXT.Parent = Rainbow _TEXT.BackgroundColor3 = Color3.fromRGB(255, 255, 255) _TEXT.BackgroundTransparency = 1.000 _TEXT.Position = UDim2.new(0.240240335, 0, 0, 0) _TEXT.Size = UDim2.new(0.759759665, 0, 1, 0) _TEXT.Font = Enum.Font.Michroma _TEXT.Text = "Rainbow" _TEXT.TextColor3 = Color3.fromRGB(255, 255, 255) _TEXT.TextScaled = true _TEXT.TextSize = 14.000 _TEXT.TextWrapped = true _TEXT.TextXAlignment = Enum.TextXAlignment.Left local color = default local dragging = false local colorH = 5 local colorS = 1 local colorV = 1 local colorInput,hueInput = nil,nil local Mouse = Player:GetMouse() local rainbow = false local currentCount = 0 local function zigzag(X) return math.acos(math.cos(X*math.pi))/math.pi end spawn(function() while wait() do if rainbow then callback(Color3.fromHSV(zigzag(currentCount), 1, 1)) _COLOR.BackgroundColor3 = Color3.fromHSV(zigzag(currentCount), 1, 1) currentCount += .01 end end end) local function updateColor() _COLOR.BackgroundColor3 = Color3.fromHSV(colorH, colorS, colorV) _GRADIENT.BackgroundColor3 = Color3.fromHSV(colorH, 1, 1) color = _COLOR.BackgroundColor3 callback(color) end local function getColor() if rainbow == true then return Color3.fromRGB(170, 0, 255) else return Color3.fromRGB(79, 0, 132) end end Rainbow.MouseButton1Click:Connect(function() rainbow = not rainbow _CHECK.BackgroundColor3 = getColor() if not rainbow then updateColor() end end) Colorpicker.MouseButton1Click:Connect(function() _PICKER.Visible = not _PICKER.Visible Colorpicker.ZIndex = (_PICKER.Visible == true and 6 or 1) Section.ZIndex = (_PICKER.Visible == true and 6 or 1) end) _GRADIENT.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then if (colorInput) then colorInput:Disconnect() end colorInput = RunService.RenderStepped:Connect(function() local ColorX = (math.clamp(Mouse.X - _SLIDER.AbsolutePosition.X, 0, _SLIDER.AbsoluteSize.X) / _SLIDER.AbsoluteSize.X) local ColorY = (math.clamp(Mouse.Y - _GRADIENT.AbsolutePosition.Y, 0, _GRADIENT.AbsoluteSize.Y) / _GRADIENT.AbsoluteSize.Y) colorS = ColorX colorV = 1 - ColorY _PICKER_2.Position = UDim2.new((ColorX > 0.89 and 0.89 or ColorX), 0, (ColorY > 0.84 and 0.84 or ColorY), 0) updateColor() end) ColorPickerDragging = true dragging = true end end) _GRADIENT.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then if (colorInput) then colorInput:Disconnect() end ColorPickerDragging = false dragging = false end end) _SLIDER.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then if (hueInput) then hueInput:Disconnect() end hueInput = RunService.RenderStepped:Connect(function() local HueY = (math.clamp(Mouse.X - _SLIDER.AbsolutePosition.X, 0, _SLIDER.AbsoluteSize.X) / _SLIDER.AbsoluteSize.X) colorH = 1 - HueY updateColor() end) ColorPickerDragging = true dragging = true end end) _SLIDER.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseButton1 then if (hueInput) then hueInput:Disconnect() end ColorPickerDragging = false dragging = false end end) local colorLib = {} function colorLib:Get() return {color, rainbow} end function colorLib:Set(value, val) val = val or false _COLOR.BackgroundColor3 = value _GRADIENT.BackgroundColor3 = value color = _COLOR.BackgroundColor3 rainbow = val _CHECK.BackgroundColor3 = getColor() callback(color) end library.Pointers[title .. "_" .. Title.Text .. "_" .. tabTitle] = colorLib return colorLib end return sectionLib end function tabLib:updateCanvas() local tbl = {} local tbl2 = {} for i,v in pairs(Left:GetChildren()) do if v:IsA("Frame") then table.insert(tbl, v.Size.Y.Offset) end end for i,v in pairs(Right:GetChildren()) do if v:IsA("Frame") then table.insert(tbl2, v.Size.Y.Offset) end end Left.CanvasSize = UDim2.new(0,0,0,getCanvas(tbl, 15, #Left:GetChildren() - 2, 15)) Right.CanvasSize = UDim2.new(0,0,0,getCanvas(tbl2, 15, #Right:GetChildren() - 2, 15)) end library.Tabs[title] = tabLib return tabLib end function windowLib:Rename(title) Title_text.Text = title end function windowLib:setImage(asset) Background.Image = asset end function windowLib:setKeybindsVisible(val) KeybindsFrame.Visible = val end function windowLib:setCurrentTab(title) if TabButtons:FindFirstChild(title .. "_btn") then library.CurrentTab = title for _,tab in pairs(Tabs:GetChildren()) do if tab.Name == title .. "_tab" then tab.Visible = true else tab.Visible = false end end for _,tab in pairs(TabButtons:GetChildren()) do if tab:IsA("TextButton") and tab.Name == title .. "_btn" then tab:FindFirstChildOfClass("UIGradient").Color = library.ColorSequences[2] elseif tab:IsA("TextButton") and tab.Name ~= title .. "_btn" then tab:FindFirstChildOfClass("UIGradient").Color = library.ColorSequences[1] end end end end function windowLib:updateTabColors() for _,tab in pairs(TabButtons:GetChildren()) do if tab:IsA("TextButton") and tab.Name == library.CurrentTab .. "_btn" then tab:FindFirstChildOfClass("UIGradient").Color = library.ColorSequences[2] elseif tab:IsA("TextButton") and tab.Name ~= library.CurrentTab .. "_btn" then tab:FindFirstChildOfClass("UIGradient").Color = library.ColorSequences[1] end end end function windowLib:GetTab(name) if TabButtons:FindFirstChild(name .. "_btn") then return library.Tabs[name] end end function windowLib:setCurrentTabIndex(index) windowLib:setCurrentTab(string.sub(Tabs:GetChildren()[index].Name,1,-5)) end function windowLib:SetFont(font) font = font or Enum.Font.Kalam Title_text.Font = font end function windowLib:SetElementsFont(font) font = font or Enum.Font.Michroma for _,v in pairs(Tabs:GetDescendants()) do if v:IsA("TextButton") or v:IsA("TextLabel") or v:IsA("TextBox") then v.Font = font end end end function windowLib:LoadConfig(path) local config = loadstring("return " .. readfile(path))() table.foreach(config, function(a,b) if library.Pointers[a] then spawn(function() if typeof(b) == "table" and typeof(b[1]) == "Color3" then library.Pointers[a]:Set(b[1], b[2]) else library.Pointers[a]:Set(b) end end) end end) end local OKConnection = nil local CancelConnection = nil function windowLib:Warning(text) if OKConnection then OKConnection:Disconnect() end if CancelConnection then CancelConnection:Disconnect() end WarnFrame.Visible = true Alert.Text = text local sound = Instance.new("Sound", game:GetService("SoundService")) sound.SoundId = "rbxassetid://7046168694" sound.Playing = true sound.Volume = 2 spawn(function() repeat wait() until sound.Playing == false sound:Destroy() end) local answer = nil OKConnection = Ok.MouseButton1Click:Connect(function() answer = true end) CancelConnection = Cancel.MouseButton1Click:Connect(function() answer = false end) repeat wait() until answer ~= nil WarnFrame.Visible = false return answer end function windowLib:Toggle(val) val = val or MainFrame.Visible MainFrame.Visible = not val ScreenGui.Enabled = (getgenv().nanohub.Visuals.Menu.Enabled == true and MainFrame.Visible or false) Tabs.Visible = false TabButtons.Visible = false Title_text.Visible = false MainFrame.Size = UDim2.new(0,0,0,0) spawn(function() TweenService:Create(MainFrame, TweenInfo.new(.2), {Size = UDim2.new(0, 492, 0, 598)}):Play() wait(.21) Tabs.Visible = true TabButtons.Visible = true Title_text.Visible = true end) function randomPos() return UDim2.new(math.random(1,9) / 10 , 0, -0.05 , 0) end local types = {"+","-"} function FSnowflake(clone) clone.Position = randomPos() spawn(function() local Type = types[math.random(1,#types)] local num = 1 local randNum = math.random(1,5) / 10 if Type == "+" then num += randNum else num -= randNum end TweenService:Create(clone, TweenInfo.new(2), { Position = UDim2.new(-.1,0,num,0) }):Play() wait(2.1) clone:Destroy() end) end while wait() do if not ScreenGui.Enabled then for _,v in pairs(ScreenGui:GetChildren()) do if v.Name == "Snowflake" then v:Destroy() end end local blur = game.Lighting:FindFirstChild("__blur") if blur then blur:Destroy() end break end if getgenv().nanohub.Visuals.Menu.Snowflakes then for i = 1, getgenv().nanohub.Visuals.Menu.SnowflakesAmount do local Snowflake = Instance.new("ImageLabel") local Glow = Instance.new("ImageLabel") Snowflake.Name = "Snowflake" Snowflake.Parent = ScreenGui Snowflake.BackgroundTransparency = 1 Snowflake.Size = UDim2.new(0.00499999989, 0, 0.00800000038, 0) Snowflake.ZIndex = 2 Snowflake.Image = "rbxassetid://502107146" Glow.Name = "Glow" Glow.Parent = Snowflake Glow.BackgroundColor3 = Color3.fromRGB(255, 255, 255) Glow.BackgroundTransparency = 1.000 Glow.Size = UDim2.new(1.10000002, 0, 1.10000002, 0) Glow.Image = "rbxassetid://4341732590" FSnowflake(Snowflake) end else for _,v in pairs(ScreenGui:GetChildren()) do if v.Name == "Snowflake" then v:Destroy() end end end if getgenv().nanohub.Visuals.Menu.Blur then local blur = game.Lighting:FindFirstChild("__blur") or Instance.new("BlurEffect") blur.Name = "__blur" blur.Parent = game.Lighting blur.Size = 24 blur.Enabled = true else local blur = game.Lighting:FindFirstChild("__blur") if blur then blur:Destroy() end end Grad.Visible = getgenv().nanohub.Visuals.Menu.Gradient tyan.Visible = getgenv().nanohub.Visuals.Menu.AnimeGirl UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, getgenv().nanohub.Visuals.Menu.GradientColor), ColorSequenceKeypoint.new(0.84, Color3.fromRGB(0, 0, 0)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))} end end local function tableToString(tbl) local str = "{" for i,v in pairs(tbl) do str = str .. "\"" .. tostring(v) .. "\";" end str = str .. "}" return str end function windowLib:GetConfig() local str = "{" for i,v in pairs(library.Pointers) do if typeof(v:Get()) == "string" then str = str .. "[\"" .. i .. "\"] = \"" .. tostring(v:Get()) .. "\";\n" elseif typeof(v:Get()) == "boolean" then if v:Get() == true then str = str .. "[\"" .. i .. "\"] = true;\n" else str = str .. "[\"" .. i .. "\"] = false;\n" end elseif typeof(v:Get()) == "number" then str = str .. "[\"" .. i .. "\"] = " .. tostring(v:Get()) .. ";\n" elseif typeof(v:Get()) == "table" then if typeof(v:Get()[1]) == "Color3" then str = str .. "[\"" .. i .. "\"] = " .. "{Color3.new(" .. tostring(v:Get()[1]) .. ")," .. tostring(v:Get()[2]) .. "};\n" else str = str .. "[\"" .. i .. "\"] = " .. tableToString(v:Get()) .. ";\n" end end end str = str .. "}" return str end return windowLib, UILib_fake end getgenv().nanohub = { Rage = { Aimbot = { Enabled = false; Teamcheck = false; AutoShoot = false; DoubleTap = false; KilLAll = false; Type = "old"; Prediction = "off"; Orign = "camera"; AutoWall = false; }; AntiAim = { Enabled = false; Yaw = "Default"; Pitch = "Default"; Strength = 0; Update = 20; }; Fakelag = { Enabled = false; Ticks = 1; Display = false; DisplayColor = Color3.new(1,0,0); Random = false; PingSpike = false; }; }; Visuals = { Yourself = { ThirdPerson = false; HideName = false; }; Players = { Chams = false; ChamsColor = Color3.new(0.458824, 0, 0.690196); ChamsTransparency = 50; OutlineChams = false; OutlineChamsColor = Color3.new(1, 0, 0); SkeletonEsp = false; SkeletonEspColor = Color3.new(1, 1, 1); Teammates = false; }; Viewmodel = { Enabled = false; X = 180; Y = 180; Z = 180; Roll = 180; Arms = false; ArmsColor = Color3.new(1,1,1); ArmsTransparency = 0; Weapon = false; WeaponColor = Color3.new(1,0,0); WeaponTransparency = 0; WeaponMaterial = "none"; HideGloves = false; HideSleeves = false; }; Client = { FOVChanger = false; FOV = 80; BulletTracers = false; BulletTracersColor = Color3.new(1,0,0); DisabledEffects = {"none"}; AlwaysNight = false; Skybox = "none" }; Watermark = { Enabled = false; Format = {"FPS"}; Nick = "default" }; Menu = { Enabled = true; Snowflakes = true; SnowflakesAmount = 3; Gradient = true; AnimeGirl = true; Blur = true; GradientColor = Color3.fromRGB(170, 0, 255) }; Character = { NoAnimations = false; }; Models = { SelectedWeapon = "DesertEagle" } }; Config = { Name = ""; }; ModelName = ""; LuaName = ""; Misc = { Movement = { Bunnyhop = false; BunnyhopSpeed = 10; BunnyhopType = "cframe"; EdgeJump = false; }; Chat = { Spam = false; SpamType = "nanohub"; SpamMessage = ""; }; Guns = { Enabled = false; Mods = {"ammo"} }; Animations = { Enabled = false; Selected = "default"; Speed = 1; }; Client = { InfMoney = false; }; Exploits = { Dudos = false; } }; Legit = { SilentAimbot = { Enabled = false; FOV = 80; Hitboxes = {"Head"}; Teammates = false; } }; } local Window, UILib = library:CreateWindow("Nanohub [BETA] | " .. tostring(_VERSION)) local RageTab = Window:CreateTab("rage") local LegitTab = Window:CreateTab("legit") local VisualsTab = Window:CreateTab("visuals") local MiscTab = Window:CreateTab("misc") local SettingsTab = Window:CreateTab("settings") Window:setCurrentTab("rage") local RageTabAimbot = RageTab:CreateSection("Ragebot", "Left") local RageTabAntiaim = RageTab:CreateSection("Anti-aim", "Left") local RageTabFakelag = RageTab:CreateSection("Fakelag", "Right") local VisualsTabPlayers = VisualsTab:CreateSection("Players", "Left") local VisualsTabModels = VisualsTab:CreateSection("Models", "Left") local VisualsTabViewmodel = VisualsTab:CreateSection("Viewmodel", "Left") local VisualsTabYourself = VisualsTab:CreateSection("Yourself", "Left") local VisualsTabClient = VisualsTab:CreateSection("Client", "Right") local VisualsTabCharacter = VisualsTab:CreateSection("Character", "Right") local VisualsTabWatermark = VisualsTab:CreateSection("Watermark", "Right") local VisualsTabMenu = VisualsTab:CreateSection("Menu", "Right") local MiscTabMovement = MiscTab:CreateSection("Movement", "Left") local MiscTabChat = MiscTab:CreateSection("Chat", "Left") local MiscTabAnimations = MiscTab:CreateSection("Animations", "Left") local MiscTabGuns = MiscTab:CreateSection("Guns", "Right") local MiscTabClient = MiscTab:CreateSection("Client", "Right") local MiscTabExploits = MiscTab:CreateSection("Exploits", "Left") local SettingsTabConfig = SettingsTab:CreateSection("Configs", "Left") local SettingsTabLuas = SettingsTab:CreateSection("Luas", "Left") local SettingsTabUI = SettingsTab:CreateSection("UI", "Left") local SettingsTabModels = SettingsTab:CreateSection("Models", "Left") local SettingsTabFriendlist = SettingsTab:CreateSection("Friendlist", "Right") local LegitTabSilentAimbot = LegitTab:CreateSection("Silent aim", "Left") local LegitTabFOV = LegitTab:CreateSection("FOV", "Left") RageTabAimbot:CreateToggle("Enabled", function(val) getgenv().nanohub.Rage.Aimbot.Enabled = val end) RageTabAimbot:CreateToggle("Auto shoot", function(val) getgenv().nanohub.Rage.Aimbot.AutoShoot = val end) RageTabAimbot:CreateToggle("Auto wall", function(val) getgenv().nanohub.Rage.Aimbot.AutoWall = val end) RageTabAimbot:CreateToggle("Teamcheck", function(val) getgenv().nanohub.Rage.Aimbot.Teamcheck = val end) RageTabAimbot:CreateDropdown("Hitboxes", {"Head", "Chest", "Arms", "Legs"}, function(val) SelectedHitboxes = val end, true) RageTabAimbot:CreateDropdown("Type", {"old", "new"}, function(val) getgenv().nanohub.Rage.Aimbot.Type = val[1] end) RageTabAimbot:CreateDropdown("Prediction", {"off", "cframe"}, function(val) getgenv().nanohub.Rage.Aimbot.Prediction = val[1] end) RageTabAimbot:CreateDropdown("Orign", {"camera", "character"}, function(val) getgenv().nanohub.Rage.Aimbot.Orign = val[1] end) RageTabAimbot:CreateToggle("Double tap", function(val) getgenv().nanohub.Rage.Aimbot.DoubleTap = val end):AddKeybind() RageTabAimbot:CreateToggle("Kill all", function(val) getgenv().nanohub.Rage.Aimbot.KillAll = val while wait() do if not getgenv().nanohub.Rage.Aimbot.KillAll then break end if isAlive(Player) and Player.Character:FindFirstChild("Gun") then for _,v in pairs(game.Players:GetPlayers()) do if isAlive(v) and v.Team ~= Player.Team and table.find(FriendList, v.Name) == nil then local Arguments = { [1] = v.Character.Head, [2] = v.Character.Head.Position, [3] = "Flip Knife", [4] = math.rad(1,100000), [5] = Player.Character.Gun, [8] = 10000, [9] = false, [10] = true, [11] = Vector3.new(), [12] = math.rad(1,100000), [13] = Vector3.new() } game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments)) end end end end end) RageTabAntiaim:CreateToggle("Enabled", function(val) getgenv().nanohub.Rage.AntiAim.Enabled = val closestTarget = math.huge while true do if not getgenv().nanohub.Rage.AntiAim.Enabled then break end closestTarget = math.huge wait(getgenv().nanohub.Rage.AntiAim.Update / 50) end end) RageTabAntiaim:CreateDropdown("Yaw", {"Default","Spin","Backwards","Targets","-Targets"}, function(val) getgenv().nanohub.Rage.AntiAim.Yaw = val[1] if val[1]:find("Targets") then closestTarget = math.huge end end) RageTabAntiaim:CreateDropdown("Pitch", {"Default","Up","Down","Boneless"}, function(val) getgenv().nanohub.Rage.AntiAim.Pitch = val[1] end) RageTabAntiaim:CreateSlider("Strength", 0, 69, 0, function(val) getgenv().nanohub.Rage.AntiAim.Strength = val end) RageTabAntiaim:CreateSlider("Distance update", 10, 500, 20, function(val) getgenv().nanohub.Rage.AntiAim.Update = val end) VisualsTabModels:CreateDropdown("Weapon", modelsWeapons, function(val) getgenv().nanohub.Visuals.Models.SelectedWeapon = val[1] getgenv().objects.ModelChanger:Refresh(modelsName[val[1]]) end) getgenv().objects.ModelChanger = VisualsTabModels:CreateDropdown("Models", modelsName["DesertEagle"], function(val) if val[1] ~= "Default" then local w = getgenv().nanohub.Visuals.Models.SelectedWeapon modifyModel("replace", w, modelsAssets[w][val[1]]) else local w = getgenv().nanohub.Visuals.Models.SelectedWeapon modifyModel("remove", w, 0) end ModelsConfig[getgenv().nanohub.Visuals.Models.SelectedWeapon] = val[1] end) VisualsTabYourself:CreateToggle("Third person", function(val) getgenv().nanohub.Visuals.Yourself.ThirdPerson = val end):AddKeybind() VisualsTabYourself:CreateToggle("Hide name", function(val) getgenv().nanohub.Visuals.Yourself.HideName = val end) VisualsTabPlayers:CreateToggle("Skeleton", function(val) getgenv().nanohub.Visuals.Players.SkeletonEsp = val for _,plr in pairs(skeleton) do for _,line in pairs(plr) do line:Remove() end end skeleton = {} end) VisualsTabPlayers:CreateColorPicker("Skel. color", Color3.new(1, 1, 1), function(val) getgenv().nanohub.Visuals.Players.SkeletonEspColor = val end) VisualsTabPlayers:CreateToggle("Chams", function(val) getgenv().nanohub.Visuals.Players.Chams = val while wait() do if not getgenv().nanohub.Visuals.Players.Chams then break end for _,plr in pairs(game.Players:GetPlayers()) do if (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then if plr ~= nil and isAlive(plr) then for _,part in pairs(plr.Character:GetChildren()) do if part:IsA("BasePart") and part.Name ~= ("HumanoidRootPart") and not part.Name:lower():find("head") and part:FindFirstChild("jeez") == nil then local handle = Instance.new("BoxHandleAdornment", part) handle.Name = "jeez" handle.AlwaysOnTop = true handle.ZIndex = 5 handle.Adornee = part handle.Size = part.Size handle.Color3 = getgenv().nanohub.Visuals.Players.ChamsColor handle.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 spawn(function() while wait() do if not getgenv().nanohub.Visuals.Players.Chams or not isAlive(plr) or not (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then break end handle.Color3 = getgenv().nanohub.Visuals.Players.ChamsColor handle.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 end handle:Destroy() end) elseif part:IsA("BasePart") and part.Name == "Head" and part:FindFirstChild("jeez") == nil then local round = Instance.new("CylinderHandleAdornment", part) round.Name = "jeez" round.AlwaysOnTop = true round.ZIndex = 5 round.Adornee = part round.Height = 1.1 round.Radius = 0.61 round.SizeRelativeOffset = Vector3.new(0, 0.05, 0) round.Angle = 360 round.CFrame = round.CFrame * CFrame.Angles(math.rad(90), 0, 0) round.Color3 = getgenv().nanohub.Visuals.Players.ChamsColor round.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 spawn(function() while wait() do if not getgenv().nanohub.Visuals.Players.Chams or not isAlive(plr) or not (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then break end round.Color3 = getgenv().nanohub.Visuals.Players.ChamsColor round.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 end round:Destroy() end) end end end end end end end) VisualsTabPlayers:CreateToggle("Outline chams", function(val) getgenv().nanohub.Visuals.Players.OutlineChams = val while wait() do if not getgenv().nanohub.Visuals.Players.Chams or not getgenv().nanohub.Visuals.Players.OutlineChams then break end for _,plr in pairs(game.Players:GetPlayers()) do if (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then if plr ~= nil and isAlive(plr) then for _,part in pairs(plr.Character:GetChildren()) do if part:IsA("BasePart") and part.Name ~= ("HumanoidRootPart") and not part.Name:lower():find("head") and part:FindFirstChild("jeezo") == nil then local handle = Instance.new("BoxHandleAdornment", part) handle.Name = "jeezo" handle.ZIndex = 5 handle.Adornee = part handle.Size = part.Size + Vector3.new(.3, .3, .3) handle.Color3 = getgenv().nanohub.Visuals.Players.OutlineChamsColor handle.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 spawn(function() while wait() do if not getgenv().nanohub.Visuals.Players.OutlineChams or not getgenv().nanohub.Visuals.Players.Chams or not isAlive(plr) or not (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then break end handle.Color3 = getgenv().nanohub.Visuals.Players.OutlineChamsColor handle.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 end handle:Destroy() end) elseif part:IsA("BasePart") and part.Name == "Head" and part:FindFirstChild("jeezo") == nil then local round = Instance.new("CylinderHandleAdornment", part) round.Name = "jeezo" round.ZIndex = 5 round.Adornee = part round.Height = 1.25 round.Radius = 0.76 round.SizeRelativeOffset = Vector3.new(0, 0.05, 0) round.Angle = 360 round.CFrame = round.CFrame * CFrame.Angles(math.rad(90), 0, 0) round.Color3 = getgenv().nanohub.Visuals.Players.OutlineChamsColor round.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 spawn(function() while wait() do if not getgenv().nanohub.Visuals.Players.OutlineChams or not getgenv().nanohub.Visuals.Players.Chams or not isAlive(plr) or not (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then break end round.Color3 = getgenv().nanohub.Visuals.Players.OutlineChamsColor round.Transparency = getgenv().nanohub.Visuals.Players.ChamsTransparency / 100 end round:Destroy() end) end end end end end end end) VisualsTabPlayers:CreateColorPicker("Outline color", Color3.new(1, 0, 0), function(val) getgenv().nanohub.Visuals.Players.OutlineChamsColor = val end) VisualsTabPlayers:CreateColorPicker("Chams color", Color3.new(0.458824, 0, 0.690196), function(val) getgenv().nanohub.Visuals.Players.ChamsColor = val end) VisualsTabPlayers:CreateSlider("Chams Transparency", 0, 100, 50, function(val) getgenv().nanohub.Visuals.Players.ChamsTransparency = val end) VisualsTabPlayers:CreateToggle("Teammates", function(val) getgenv().nanohub.Visuals.Players.Teammates = val end) MiscTabMovement:CreateToggle("Bhop", function(val) getgenv().nanohub.Misc.Movement.Bunnyhop = val end) MiscTabMovement:CreateSlider("Bhop speed", 1, 600, 10, function(val) getgenv().nanohub.Misc.Movement.BunnyhopSpeed = val end) MiscTabMovement:CreateDropdown("Bhop type", {"cframe", "gyro"}, function(val) getgenv().nanohub.Misc.Movement.BunnyhopType = val[1] end) MiscTabMovement:CreateToggle("Edge jump", function(val) getgenv().nanohub.Misc.Movement.EdgeJump = val end) MiscTabChat:CreateToggle("Spam", function(val) getgenv().nanohub.Misc.Chat.Spam = val end) MiscTabChat:CreateDropdown("Spam type", {"nanohub", "custom"}, function(val) getgenv().nanohub.Misc.Chat.SpamType = val[1] end) MiscTabChat:CreateTextbox("Spam custom message", function(val) getgenv().nanohub.Misc.Chat.SpamMessage = val end) SettingsTabConfig:CreateTextbox("Config name", function(val) getgenv().nanohub.Config.Name = val end) SettingsTabConfig:CreateButton("Load config", function() local path = "Nanohub/CBRO/Configs/" .. getgenv().nanohub.Config.Name .. ".cfg" if isfile(path) then local load = Window:Warning("Are you sure?") if load then Window:LoadConfig(path) end end end) SettingsTabConfig:CreateButton("Save config", function() local path = "Nanohub/CBRO/Configs/" .. getgenv().nanohub.Config.Name .. ".cfg" local save = Window:Warning("Are you sure?") if save then writefile(path, Window:GetConfig()) end end) local luas = {} for _,lua in pairs(listfiles("Nanohub/CBRO/Luas")) do table.insert(luas, string.sub(lua, 19, -1)) end local Luas = SettingsTabLuas:CreateDropdown("Select lua", luas, function(val) getgenv().nanohub.LuaName = val[1] end) SettingsTabLuas:CreateButton("Load", function() if isfile("Nanohub/CBRO/Luas/" .. getgenv().nanohub.LuaName) then loadstring(readfile("Nanohub/CBRO/Luas/" .. getgenv().nanohub.LuaName))() end end) SettingsTabLuas:CreateButton("Refresh", function() luas = {} for _,lua in pairs(listfiles("Nanohub/CBRO/Luas")) do table.insert(luas, string.sub(lua, 19, -1)) end Luas:Refresh(luas) end) SettingsTabUI:CreateToggle("Toggle UI", function(val) Window:Toggle(val) end):AddKeybind("Insert", false) local currentSequence = {ColorSequenceKeypoint.new(0, Color3.fromRGB(100, 0, 150)), ColorSequenceKeypoint.new(0.5, Color3.fromRGB(161, 0, 161)), ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 0, 150))} local currentSequence2 = {ColorSequenceKeypoint.new(0, Color3.fromRGB(170, 0, 255)), ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 0, 255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(170, 0, 255))} SettingsTabUI:CreateColorPicker("Tabs 1", Color3.fromRGB(100, 0, 150), function(val) currentSequence[1] = ColorSequenceKeypoint.new(0, val) currentSequence[3] = ColorSequenceKeypoint.new(1, val) library.ColorSequences[1] = ColorSequence.new{unpack(currentSequence)} Window:updateTabColors() end) SettingsTabUI:CreateColorPicker("Tabs 2", Color3.fromRGB(161, 0, 161), function(val) currentSequence[2] = ColorSequenceKeypoint.new(.5, val) library.ColorSequences[1] = ColorSequence.new{unpack(currentSequence)} Window:updateTabColors() end) SettingsTabUI:CreateColorPicker("Tabs 3", Color3.fromRGB(170, 0, 255), function(val) currentSequence2[1] = ColorSequenceKeypoint.new(0, val) currentSequence2[3] = ColorSequenceKeypoint.new(1, val) library.ColorSequences[2] = ColorSequence.new{unpack(currentSequence2)} Window:updateTabColors() end) SettingsTabUI:CreateColorPicker("Tabs 4", Color3.fromRGB(255, 0, 255), function(val) currentSequence2[2] = ColorSequenceKeypoint.new(.5, val) library.ColorSequences[2] = ColorSequence.new{unpack(currentSequence2)} Window:updateTabColors() end) SettingsTabUI:CreateColorPicker("Sections", Color3.fromRGB(170, 0, 255), function(val) for _, tab in pairs(UILib.MainFrame.Tabs:GetChildren()) do for _, side in pairs(tab:GetChildren()) do for _, section in pairs(side:GetChildren()) do if section:IsA("Frame") then section.BorderColor3 = val end end end end end) SettingsTabUI:CreateTextbox("Window name", function(val) Window:Rename(val == "" or val == nil and "Nanohub [BETA] | " .. tostring(_VERSION) or val .. " | " .. tostring(_VERSION)) end) SettingsTabUI:CreateTextbox("Background", function(val) Window:setImage(val) end) SettingsTabUI:CreateToggle("Keybinds", function(val) Window:setKeybindsVisible(val) end) SettingsTabUI:CreateDropdown("Title font", {"Kalam", "Code", "Michroma"}, function(val) Window:SetFont(val[1]) end) SettingsTabUI:CreateDropdown("Other font", {"Michroma", "Code", "Kalam"}, function(val) Window:SetElementsFont(val[1]) end) SettingsTabModels:CreateTextbox("Models config name", function(val) getgenv().nanohub.ModelName = val end) SettingsTabModels:CreateButton("Load", function() local path = "Nanohub/CBRO/Models/" .. getgenv().nanohub.ModelName .. ".mcfg" if isfile(path) then local load = Window:Warning("Are you sure to load it?") if load then local mCfg = loadstring("return " .. readfile(path))() for w,s in pairs(mCfg) do spawn(function() modifyModel((s == "Default" and "remove" or "replace"), w, (modelsAssets[w][s] ~= nil and modelsAssets[w][s] or 0)) end) end end end end) SettingsTabModels:CreateButton("Save", function() local path = "Nanohub/CBRO/Models/" .. getgenv().nanohub.ModelName .. ".mcfg" local save = Window:Warning("Are you sure to save it?") if save then local function tableToString(tbl) local str = "{" local t = tostring for i,v in pairs(tbl) do str = str .. "[\"" .. t(i) .. "\"] = \"" .. t(v) .. "\";" end str = str .. "}" return str end writefile(path, tableToString(ModelsConfig)) end end) RageTabFakelag:CreateToggle("Enabled", function(val) getgenv().nanohub.Rage.Fakelag.Enabled = val local ticks = 0 local nextRandom = math.random(1, getgenv().nanohub.Rage.Fakelag.Ticks) while wait() do if not getgenv().nanohub.Rage.Fakelag.Enabled then game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9) break end if (not getgenv().nanohub.Rage.Fakelag.PingSpike and getgenv().nanohub.Rage.Fakelag.Random == false and ticks > getgenv().nanohub.Rage.Fakelag.Ticks or ticks > nextRandom) then ticks = 0 nextRandom = math.random(1, getgenv().nanohub.Rage.Fakelag.Ticks) game:GetService("NetworkClient"):SetOutgoingKBPSLimit(9e9) fakelagFolder:ClearAllChildren() if isAlive(Player) and getgenv().nanohub.Rage.Fakelag.Display then for _,part in pairs(Player.Character:GetChildren()) do if part:IsA("BasePart") then local newPart = Instance.new("Part") newPart.Anchored = true newPart.CanCollide = false newPart.Size = part.Size newPart.Parent = fakelagFolder newPart.CFrame = part.CFrame newPart.Material = "Neon" newPart.Color = getgenv().nanohub.Rage.Fakelag.DisplayColor newPart.Transparency = 0.5 end end end elseif (not getgenv().nanohub.Rage.Fakelag.PingSpike and getgenv().nanohub.Rage.Fakelag.Random == false and ticks <= getgenv().nanohub.Rage.Fakelag.Ticks or ticks <= nextRandom) then ticks += 1 game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1) end end fakelagFolder:ClearAllChildren() end) RageTabFakelag:CreateToggle("Ping spike", function(val) getgenv().nanohub.Rage.Fakelag.PingSpike = val if val then fakelagFolder:ClearAllChildren() for _,part in pairs(Player.Character:GetChildren()) do if part:IsA("BasePart") then local newPart = Instance.new("Part") newPart.Anchored = true newPart.CanCollide = false newPart.Size = part.Size newPart.Parent = fakelagFolder newPart.CFrame = part.CFrame newPart.Material = "Neon" newPart.Color = getgenv().nanohub.Rage.Fakelag.DisplayColor newPart.Transparency = 0.5 end end else fakelagFolder:ClearAllChildren() end game:GetService("NetworkClient"):SetOutgoingKBPSLimit((val == true and 1 or 9e9)) end):AddKeybind() RageTabFakelag:CreateToggle("Random", function(val) getgenv().nanohub.Rage.Fakelag.Random = val end) RageTabFakelag:CreateSlider("Limit", 1, 100, 1, function(val) getgenv().nanohub.Rage.Fakelag.Ticks = val end) RageTabFakelag:CreateToggle("Display", function(val) getgenv().nanohub.Rage.Fakelag.Display = val end) RageTabFakelag:CreateColorPicker("Display color", Color3.new(1,0,0), function(val) getgenv().nanohub.Rage.Fakelag.DisplayColor = val end) MiscTabGuns:CreateToggle("Mods enabled", function(val) getgenv().nanohub.Misc.Guns.Enabled = val end) MiscTabGuns:CreateDropdown("Mods", {"ammo","firerate","spread","recoil"}, function(val) getgenv().nanohub.Misc.Guns.Mods = val end, true) VisualsTabViewmodel:CreateToggle("Arms", function(val) getgenv().nanohub.Visuals.Viewmodel.Arms = val end) VisualsTabViewmodel:CreateColorPicker("Arms color", Color3.new(1,1,1), function(val) getgenv().nanohub.Visuals.Viewmodel.ArmsColor = val end) VisualsTabViewmodel:CreateSlider("Arms transparency", 0, 100, 0, function(val) getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency = val / 100 end) VisualsTabViewmodel:CreateToggle("Hide gloves", function(val) getgenv().nanohub.Visuals.Viewmodel.HideGloves = val end) VisualsTabViewmodel:CreateToggle("Hide sleeves", function(val) getgenv().nanohub.Visuals.Viewmodel.HideSleeves = val end) VisualsTabViewmodel:CreateToggle("Weapon", function(val) getgenv().nanohub.Visuals.Viewmodel.Weapon = val end) VisualsTabViewmodel:CreateColorPicker("Weapon color", Color3.new(1,0,0), function(val) getgenv().nanohub.Visuals.Viewmodel.WeaponColor = val end) VisualsTabViewmodel:CreateSlider("Weapon transparency", 0, 100, 0, function(val) getgenv().nanohub.Visuals.Viewmodel.WeaponTransparency = val / 100 end) VisualsTabViewmodel:CreateDropdown("Material", {"ForceField", "Neon"}, function(val) getgenv().nanohub.Visuals.Viewmodel.WeaponMaterial = val[1] end) VisualsTabViewmodel:CreateToggle("Position", function(val) getgenv().nanohub.Visuals.Viewmodel.Enabled = val end) VisualsTabViewmodel:CreateSlider("X",-360 ,360 , 180, function(val) getgenv().nanohub.Visuals.Viewmodel.X = val end) VisualsTabViewmodel:CreateSlider("Y",-360 ,360 , 180, function(val) getgenv().nanohub.Visuals.Viewmodel.Y = val end) VisualsTabViewmodel:CreateSlider("Z",-360 ,360 , 180, function(val) getgenv().nanohub.Visuals.Viewmodel.Z = val end) VisualsTabViewmodel:CreateSlider("Roll",-360 ,360 , 180, function(val) getgenv().nanohub.Visuals.Viewmodel.Roll = val end) VisualsTabClient:CreateDropdown("Skybox", {"none", "galaxy", "purple", "purple night", "weirdcore", "jjba"}, function(val) getgenv().nanohub.Visuals.Client.Skybox =val[1] if val[1] ~= "none" then local skybox = game.Lighting:FindFirstChild("__skybox") or Instance.new("Sky") skybox.Parent = game.Lighting skybox.Name = "__skybox" skybox.SkyboxBk = skyboxes[val[1]].SkyboxBk skybox.SkyboxDn = skyboxes[val[1]].SkyboxDn skybox.SkyboxFt = skyboxes[val[1]].SkyboxFt skybox.SkyboxLf = skyboxes[val[1]].SkyboxLf skybox.SkyboxRt = skyboxes[val[1]].SkyboxRt skybox.SkyboxUp = skyboxes[val[1]].SkyboxUp else if game.Lighting:FindFirstChild("__skybox") then game.Lighting:FindFirstChild("__skybox"):Destroy() end end end) VisualsTabClient:CreateToggle("Always night", function(val) getgenv().nanohub.Visuals.Client.AlwaysNight = val end) VisualsTabClient:CreateToggle("FOV changer", function(val) getgenv().nanohub.Visuals.Client.FOVChanger = val end) VisualsTabClient:CreateSlider("FOV", 1, 120, 80, function(val) getgenv().nanohub.Visuals.Client.FOV = val end) VisualsTabClient:CreateToggle("Bullet tracers", function(val) getgenv().nanohub.Visuals.Client.BulletTracers = val end) VisualsTabClient:CreateColorPicker("Color", Color3.new(1,0,0), function(val) getgenv().nanohub.Visuals.Client.BulletTracersColor = val end) VisualsTabClient:CreateDropdown("Effects", {"none", "blood"}, function(val) getgenv().nanohub.Visuals.Client.DisabledEffects = val end, true) VisualsTabMenu:CreateToggle("Enabled", function(val) getgenv().nanohub.Visuals.Menu.Enabled = val end, true) VisualsTabMenu:CreateToggle("Gradient", function(val) getgenv().nanohub.Visuals.Menu.Gradient = val end, true) VisualsTabMenu:CreateColorPicker("Color", Color3.fromRGB(170, 0, 255), function(val) getgenv().nanohub.Visuals.Menu.GradientColor = val end) VisualsTabMenu:CreateToggle("Snowflakes", function(val) getgenv().nanohub.Visuals.Menu.Snowflakes = val end, true) VisualsTabMenu:CreateSlider("Amount", 1, 10, 3, function(val) getgenv().nanohub.Visuals.Menu.SnowflakesAmount = val end) VisualsTabMenu:CreateToggle("Anime girl", function(val) getgenv().nanohub.Visuals.Menu.AnimeGirl = val end, true) VisualsTabMenu:CreateTextbox("Id: rbxasset(id)", function(val) tyan.Image = val end) VisualsTabMenu:CreateToggle("Blur", function(val) getgenv().nanohub.Visuals.Menu.Blur = val end, true) LegitTabSilentAimbot:CreateToggle("Enabled", function(val) getgenv().nanohub.Legit.SilentAimbot.Enabled = val end) LegitTabSilentAimbot:CreateToggle("Teammates", function(val) getgenv().nanohub.Legit.SilentAimbot.Teammates = val end) LegitTabSilentAimbot:CreateSlider("FOV", 1, 600, 80, function(val) getgenv().nanohub.Legit.SilentAimbot.FOV = val end) LegitTabSilentAimbot:CreateDropdown("Hitboxes", {"Head", "Chest", "Arms", "Legs"}, function(val) getgenv().nanohub.Legit.SilentAimbot.Hitboxes = val end, true) LegitTabFOV:CreateToggle("Visible", function(val) FOVCircle.Transparency = (val == false and 1 or 0) end) LegitTabFOV:CreateColorPicker("Color", Color3.new(1,0,0), function(val) FOVCircle.Color = val end) LegitTabFOV:CreateSlider("Thickness", 1, 5, 1, function(val) FOVCircle.Thickness = val end) LegitTabFOV:CreateSlider("Sides", 0, 30, 0, function(val) FOVCircle.NumSides = val > 2 and val or 100 end) VisualsTabWatermark:CreateToggle("Enabled", function(val) getgenv().nanohub.Visuals.Watermark.Enabled = val end) VisualsTabWatermark:CreateDropdown("Format", {"FPS", "Ping", "Time", "Name", "Nick", "DisplayNick"}, function(val) getgenv().nanohub.Visuals.Watermark.Format = val end, true) VisualsTabWatermark:CreateTextbox("Nick", function(val) getgenv().nanohub.Visuals.Watermark.Nick = val end) MiscTabAnimations:CreateToggle("Enabled", function(val) getgenv().nanohub.Misc.Animations.Enabled = val end) MiscTabAnimations:CreateDropdown("Selected", {"default", "floss", "air dance", "baby", "happy", "dolphin","not my fault"}, function(val) getgenv().nanohub.Misc.Animations.Selected = val[1] if LoadedAnimation ~= nil then LoadedAnimation:Stop() LoadedAnimation = nil end end) MiscTabAnimations:CreateSlider("Speed", 1, 100, 1, function(val) getgenv().nanohub.Misc.Animations.Speed = val if LoadedAnimation ~= nil then LoadedAnimation:Stop() LoadedAnimation = nil end end) MiscTabClient:CreateToggle("Inf. money", function(val) getgenv().nanohub.Misc.Client.InfMoney = val end) MiscTabClient:CreateToggle("Fakeframe", function(val) if val == true then settings().Network.IncomingReplicationLag = 1000 local Effect = Instance.new("ColorCorrectionEffect", game:GetService("Lighting")) Effect.Brightness = 0 Effect.Contrast = 0 Effect.Saturation = -1 Effect.Enabled = true Effect.Name = "feiklag" else if game:GetService("Lighting"):FindFirstChild("feiklag") then game:GetService("Lighting")["feiklag"]:Destroy() end settings().Network.IncomingReplicationLag = 0 end end):AddKeybind() MiscTabExploits:CreateToggle("DDoS everyone", function(val) getgenv().nanohub.Misc.Exploits.Dudos = val end) MiscTabExploits:CreateButton("Crash server", function() RunService.RenderStepped:Connect(function() if isAlive(Player) then local oh1 = "Smoke Grenade" local oh3 = 25 local oh4 = 35 local oh6 = "" local oh7 = "" game.ReplicatedStorage.Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7) game.ReplicatedStorage.Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7) game.ReplicatedStorage.Events.ThrowGrenade:FireServer(oh1, nil, oh3, oh4, Vector3.new(0,-100,0), oh6, oh7) end end) end) MiscTabExploits:CreateButton("Invisible", function() if not isAlive(Player) then return end local StoredCF = Player.Character.PrimaryPart.CFrame local Part = Instance.new("Part",workspace) Part.Size = Vector3.new(5,0,5) Part.Anchored = true Part.CFrame = CFrame.new(Vector3.new(99999,99999,99999)) Player.Character.PrimaryPart.CFrame = Part.CFrame*CFrame.new(0,10,0) spawn(function() wait(2) Part:Destroy() end) local Clone = Player.Character.LowerTorso.Root:Clone() Player.Character.LowerTorso.Root:Destroy() Clone.Parent = Player.Character.LowerTorso wait(0.1) Player.Character.PrimaryPart.CFrame = StoredCF end) local FriendListName = SettingsTabFriendlist:CreateTextbox("Name") SettingsTabFriendlist:CreateButton("Add", function(val) if isfile("Nanohub/CBRO/Friendlist.xyz") then local oldData = readfile("Nanohub/CBRO/Friendlist.xyz") local newData = oldData .. FriendListName:Get() .. "\n" writefile("Nanohub/CBRO/Friendlist.xyz", newData) else writefile("Nanohub/CBRO/Friendlist.xyz", FriendListName:Get() .. "\n") end end) SettingsTabFriendlist:CreateButton("Remove", function(val) if isfile("Nanohub/CBRO/Friendlist.xyz") then local oldTbl = string.split(readfile("Nanohub/CBRO/Friendlist.xyz"), "\n") local newStr = "" for _,name in pairs(oldTbl) do if name ~= FriendListName:Get() then newStr = newStr .. name .. "\n" end end writefile("Nanohub/CBRO/Friendlist.xyz", newStr) end end) local fakeClips = Instance.new("Folder", workspace) fakeClips.Name = "fakeClips" local fakeKillers = Instance.new("Folder", workspace) fakeKillers.Name = "fakeKillers" MiscTabClient:CreateToggle("No barriers", function(val) if val == true then if workspace.Map:FindFirstChild("Clips") and workspace.Map:FindFirstChild("Killers") then for _,v in pairs(workspace.Map.Clips:GetChildren()) do v:Destroy() end for _,v in pairs(workspace.Map.Killers:GetChildren()) do v:Destroy() end end end end) local CharModels = game:GetObjects("rbxassetid://8486946686")[1] repeat wait() until CharModels ~= nil local AllCharacters = {} for _,v in pairs(CharModels:GetChildren()) do table.insert(AllCharacters, v.Name) end local CharChanger = VisualsTabCharacter:CreateDropdown("Changer", AllCharacters, function(val) if isAlive(Player) and Player.Character:FindFirstChild("Gun") then ChangeCharacter(CharModels:FindFirstChild(val[1])) end end) VisualsTabCharacter:CreateToggle("No anims", function(val) getgenv().nanohub.Visuals.Character.NoAnimations = val end) local _cursor = Instance.new("ImageLabel") _cursor.Name = "_cursor" _cursor.Parent = UILib _cursor.Image = "rbxasset://textures/Cursors/KeyboardMouse/ArrowFarCursor.png" _cursor.Size = UDim2.new(0, 55, 0, 55) _cursor.ImageColor3 = Color3.fromRGB(255, 255, 255) _cursor.BackgroundTransparency = 1 _cursor.ZIndex = 1000 local bhopGyro = nil RunService.RenderStepped:Connect(function(Fps) OldFps = Fps Fps = 1 / Fps Ping = game.Stats.PerformanceStats.Ping:GetValue() Camera = workspace.CurrentCamera local RealFps = math.floor(Fps) local Smallest = math.floor(CustomMath.getIntegrer(Fps) * 10) / 10 RealFps += Smallest if isAlive(Player) and getgenv().nanohub.Rage.Aimbot.Enabled then for _, player in pairs(game:GetService("Players"):GetPlayers()) do if (getgenv().nanohub.Rage.Aimbot.Teamcheck == true and player.Team ~= Player.Team or not getgenv().nanohub.Rage.Aimbot.Teamcheck) and table.find(FriendList, player.Name) == nil then if isAlive(player) and client.gun ~= nil then local hitbox = nil for _,v in pairs(player.Character:GetChildren()) do if getgenv().nanohub.Rage.Aimbot.Type == "old" then break end for _,v2 in pairs(SelectedHitboxes) do if table.find(Hitboxes[v2], v.Name) then if getgenv().nanohub.Rage.Aimbot.AutoWall == true then local ehit,hit,pos local hits = {} local penetration = client.gun.Penetration.Value * 0.01 local origin = (getgenv().nanohub.Rage.Aimbot.Orign == "camera" and workspace.CurrentCamera.CFrame.p or Player.Character.HumanoidRootPart.Position) local idkRay = Ray.new(origin, (v.Position - origin).unit * (v.Position - origin)) local idkIgnore = {workspace.Ray_Ignore, Player.Character, workspace:WaitForChild("Map").Clips} repeat hit, pos = workspace:FindPartOnRayWithIgnoreList(idkRay, idkIgnore, false, true) if hit ~= nil and hit.Parent ~= nil then if hit and multies[hit.Name] ~= nil then ehit = hit else table.insert(idkIgnore, hit) table.insert(hits, {["Position"] = pos,["Hit"] = hit}) end end until ehit ~= nil or #hits >= 4 or hit == nil if ehit ~= nil and multies[ehit.Name] and hits <= 4 then if #hits == 0 then local Damage = client.gun.DMG.Value * multies[ehit.Name] if player:FindFirstChild("Kevlar") then if string.find(ehit.Name, "Head") then if player:FindFirstChild("Helmet") then Damage = (Damage / 100) * client.gun.ArmorPenetration.Value end else Damage = (Damage / 100) * client.gun.ArmorPenetration.Value end end Damage = Damage * (client.gun.RangeModifier.Value/100 ^ ((origin - ehit.Position).Magnitude/500))/100 hitbox = v else local penetration = client.gun.Penetration.Value * 0.01 local limit = 0 local dmgmodifier = 1 for i = 1, #hits do local data = hits[i] local part = data["Hit"] local pos = data["Position"] local modifier = 1 if part.Material == Enum.Material.DiamondPlate then modifier = 3 end if part.Material == Enum.Material.CorrodedMetal or part.Material == Enum.Material.Metal or part.Material == Enum.Material.Concrete or part.Material == Enum.Material.Brick then modifier = 2 end if part.Name == "Grate" or part.Material == Enum.Material.Wood or part.Material == Enum.Material.WoodPlanks then modifier = 0.1 end if part.Name == "nowallbang" then modifier = 100 end if part:FindFirstChild("PartModifier") then modifier = part.PartModifier.Value end if part.Transparency == 1 or part.CanCollide == false or part.Name == "Glass" or part.Name == "Cardboard" then modifier = 0 end local direction = (v.Position - pos).unit * CLAMP(client.gun.Range.Value, 1, 100) local ray = Ray.new(pos + direction * 1, direction * -2) local _,endpos = workspace:FindPartOnRayWithWhitelist(ray, {part}, true) local thickness = (endpos - pos).Magnitude thickness = thickness * modifier limit = math.min(penetration, limit + thickness) dmgmodifier = 1 - limit / penetration end local Damage = Client.gun.DMG.Value * multies[ehit.Name] * dmgmodifier if player:FindFirstChild("Kevlar") then if string.find(ehit.Name, "Head") then if player:FindFirstChild("Helmet") then Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value end else Damage = (Damage / 100) * Client.gun.ArmorPenetration.Value end end Damage = Damage * (client.gun.RangeModifier.Value/100 ^ ((origin - ehit.Position).Magnitude/500))/100 hitbox = v end end end if hitbox == nil then local collision = (getgenv().nanohub.Rage.Aimbot.Orign == "camera" and workspace.CurrentCamera.CFrame.p or Player.Character.HumanoidRootPart.Position) local ignore = {workspace.Ray_Ignore, Player.Character, workspace:WaitForChild("Map").Clips} local ray = Ray.new( collision, (v.Position-collision).unit * client.gun.Range.Value ) for _, accessory in pairs(player.Character:GetChildren()) do if accessory:IsA("Accessory") then table.insert(ignore,accessory) end end local hit,pos = workspace:FindPartOnRayWithIgnoreList(ray,ignore,false,true) if hit and hit.Parent == player.Character then hitbox = v end end end end end if getgenv().nanohub.Rage.Aimbot.Type == "old" then local collision = (getgenv().nanohub.Rage.Aimbot.Orign == "camera" and workspace.CurrentCamera.CFrame.p or Player.Character.HumanoidRootPart.Position) local ignore = {workspace.Ray_Ignore, Player.Character, workspace:WaitForChild("Map").Clips} local ray = Ray.new( collision, (player.Character.Head.Position-collision).unit * client.gun.Range.Value ) for _, accessory in pairs(player.Character:GetChildren()) do if accessory:IsA("Accessory") then table.insert(ignore,accessory) end end local hit,pos = workspace:FindPartOnRayWithIgnoreList(ray,ignore,false,true) if hit and hit.Parent == player.Character then for _,v in pairs(player.Character:GetChildren()) do for _,v2 in pairs(SelectedHitboxes) do if table.find(Hitboxes[v2], v.Name) then hitbox = v end end end end end if hitbox ~= nil then RageHitpart = hitbox RageTarget = player if getgenv().nanohub.Rage.Aimbot.AutoShoot then if not client.DISABLED then client.firebullet() local Arguments = { [1] = hitbox, [2] = hitbox.Position, [3] = client.gun.Name, [4] = 4096, [5] = Player.Character.Gun, [8] = 1, [9] = false, [10] = false, [11] = Vector3.new(), [12] = 16868, [13] = Vector3.new() } game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments)) if getgenv().nanohub.Rage.Aimbot.DoubleTap then client.firebullet() local Arguments = { [1] = hitbox, [2] = hitbox.Position, [3] = client.gun.Name, [4] = 4096, [5] = Player.Character.Gun, [8] = 1, [9] = false, [10] = false, [11] = Vector3.new(), [12] = 16868, [13] = Vector3.new() } game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments)) end end end else if getgenv().nanohub.Rage.Aimbot.AutoWall then else RageHitpart = nil RageTarget = nil end end end end end end if isAlive(Player) and getgenv().nanohub.Legit.SilentAimbot.Enabled then local oldFOV = math.huge for _, plr in pairs(game.Players:GetPlayers()) do if isAlive(plr) and (getgenv().nanohub.Legit.SilentAimbot.Teammates == true and plr ~= Player or plr.Team ~= Player.Team) and table.find(FriendList, plr.Name) == nil then local collision = workspace.CurrentCamera.CFrame.p local ignore = {workspace.Ray_Ignore, Player.Character, workspace:WaitForChild("Map").Clips} local ray = Ray.new( collision, (plr.Character.Head.Position-collision).unit * 9999 ) for _, accessory in pairs(plr.Character:GetChildren()) do if accessory:IsA("Accessory") then table.insert(ignore,accessory) end end local hit,pos = workspace:FindPartOnRayWithIgnoreList(ray,ignore,false,true) if hit and hit.Parent == plr.Character then local hitbox = nil for _,v in pairs(plr.Character:GetChildren()) do for _,v2 in pairs(getgenv().nanohub.Legit.SilentAimbot.Hitboxes) do if table.find(Hitboxes[v2], v.Name) then hitbox = v end end end local vector,onScreen = Camera:WorldToScreenPoint(hitbox.Position) local mouse = Player:GetMouse() local FOV = (Vector2.new(mouse.X, mouse.Y) - Vector2.new(vector.X, vector.Y)).magnitude if onScreen and FOV < oldFOV and FOV <= getgenv().nanohub.Legit.SilentAimbot.FOV then oldFOV = FOV LegitHitpart = hitbox elseif onScreen == false then LegitHitpart = nil end end end end end if getgenv().nanohub.Rage.AntiAim.Enabled then local Yaw = getgenv().nanohub.Rage.AntiAim.Yaw if Yaw ~= "Default" then if isAlive(Player) then if Yaw == "Backwards" then if Player.Character.UpperTorso:FindFirstChild("ezez") then Player.Character.UpperTorso["ezez"]:Destroy() end local gyro = Instance.new("BodyGyro", Player.Character.UpperTorso) gyro.D = 0 gyro.P = 5000 gyro.MaxTorque = Vector3.new(0, 5000, 0) gyro.CFrame = CFrame.new(gyro.Parent.Position, Camera.CFrame * CFrame.new(-4, 0, 0).p) gyro.Name = "ezez" elseif Yaw == "Spin" then Player.Character.Humanoid.AutoRotate = false Player.Character.HumanoidRootPart.CFrame = Player.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(getgenv().nanohub.Rage.AntiAim.Strength), 0) elseif Yaw:find("Targets") then local part for _,player in pairs(game.Players:GetPlayers()) do if isAlive(player) and player.Team ~= Player.Team then local distance = (Player.Character.HumanoidRootPart.Position - player.Character.HumanoidRootPart.Position).magnitude if distance < closestTarget then part = player.Character.HumanoidRootPart closestTarget = distance end end end if part ~= nil then Player.Character.Humanoid.AutoRotate = false local Root = Player.Character.HumanoidRootPart if string.sub(Yaw, 1, 1) == "-" then Root.CFrame = yrotate(CFrame.new(Root.Position, -part.Position)) else Root.CFrame = yrotate(CFrame.new(Root.Position, part.Position)) end end elseif Player.Character.Humanoid.AutoRotate == false then Player.Character.Humanoid.AutoRotate = true end end end else if isAlive(Player) then if Player.Character.Humanoid.AutoRotate == false then Player.Character.Humanoid.AutoRotate = true end end end if getgenv().nanohub.Visuals.Yourself.ThirdPerson then if isAlive(Player) then workspace.ThirdPerson.Value = true if Player.CameraMinZoomDistance ~= 15 then Player.CameraMinZoomDistance = 15 Player.CameraMaxZoomDistance = 15 end end else if isAlive(Player) then workspace.ThirdPerson.Value = false Player.CameraMinZoomDistance = 0 Player.CameraMaxZoomDistance = 0 end end if isAlive(Player) and getgenv().nanohub.Misc.Movement.Bunnyhop and UIS:IsKeyDown("Space") then local angle = 0 if UIS:IsKeyDown("A") then angle = 90 end if UIS:IsKeyDown("S") then angle = 180 end if UIS:IsKeyDown("D") then angle = 270 end if UIS:IsKeyDown("A") and UIS:IsKeyDown("W") then angle = 45 end if UIS:IsKeyDown("D") and UIS:IsKeyDown("W") then angle = 315 end if UIS:IsKeyDown("D") and UIS:IsKeyDown("S") then angle = 225 end if UIS:IsKeyDown("A") and UIS:IsKeyDown("S") then angle = 145 end Player.Character.Humanoid.Jump = true local rotation = yrotate(workspace.CurrentCamera.CFrame) * CFrame.Angles(0, math.rad(angle), 0) local Root = Player.Character.HumanoidRootPart if getgenv().nanohub.Misc.Movement.BunnyhopType == "cframe" then if bhopGyro ~= nil then bhopGyro:Destroy() end if angle == 0 and UIS:IsKeyDown("W") then Root.CFrame = Root.CFrame + Vector3.new(rotation.LookVector.X,0,rotation.LookVector.Z) * (getgenv().nanohub.Misc.Movement.BunnyhopSpeed / 50) elseif angle > 0 then Root.CFrame = Root.CFrame + Vector3.new(rotation.LookVector.X,0,rotation.LookVector.Z) * (getgenv().nanohub.Misc.Movement.BunnyhopSpeed / 50) end elseif getgenv().nanohub.Misc.Movement.BunnyhopType == "gyro" then if bhopGyro then bhopGyro:Destroy() end bhopGyro = Instance.new("BodyVelocity", Player.Character.HumanoidRootPart) bhopGyro.Name = "ezjump" bhopGyro.maxForce = Vector3.new(9e9,0,9e9) if angle == 0 and UIS:IsKeyDown("W") then bhopGyro.Velocity = Vector3.new(rotation.LookVector.X,0,rotation.LookVector.Z) * (getgenv().nanohub.Misc.Movement.BunnyhopSpeed * 2) elseif angle > 0 then bhopGyro.Velocity = Vector3.new(rotation.LookVector.X,0,rotation.LookVector.Z) * (getgenv().nanohub.Misc.Movement.BunnyhopSpeed * 2) end end elseif not getgenv().nanohub.Misc.Movement.Bunnyhop or not UIS:IsKeyDown("Space") then if bhopGyro then bhopGyro:Destroy() end end if getgenv().nanohub.Visuals.Yourself.HideName then local chat = Player.PlayerGui.GUI.Main.Chats for _,line in pairs(chat:GetChildren()) do if string.sub(line.Name,1,-2) == "Line" then if line.Text:find("has voted to kick") and line.Text:find(Player.Name) then local text = string.split(line.Text, " ") if #text > 7 then if text[1] ~= Player.Name then local votes = text[7] local kicker = text[1] line.Text = kicker .. " fuck you, " .. votes .. " more votes to get kicked" end else line.Text = "nanohub.xyz namehider" end end end end function hookAntiWin(ins) for _,label in pairs(ins:GetChildren()) do if label:IsA("TextLabel") then if label.Text:lower():find(Player.Name:lower()) then label.Text = "nanohub.xyz on top! | .gg/Pm4ubcNfbF" end elseif label:IsA("ImageLabel") and string.sub(label.Name:lower(),1,3) == "mvp" then label.Image = "rbxassetid://7559444526" elseif label:FindFirstChildOfClass("TextLabel") ~= nil then label:FindFirstChildOfClass("TextLabel").Text = ".gg/Pm4ubcNfbF" end end end hookAntiWin(Player.PlayerGui.GUI.CTWin) hookAntiWin(Player.PlayerGui.GUI.TWin) end if getgenv().nanohub.Misc.Chat.Spam then if getgenv().nanohub.Misc.Chat.SpamType == "nanohub" then local messages = { "still losing? buy nanohub.xyz | .gg/Pm4ubcNfbF"; "buy nanohub.xyz | .gg/Pm4ubcNfbF"; "nanohub.xyz on top! | .gg/Pm4ubcNfbF" } game.ReplicatedStorage.Events.PlayerChatted:FireServer( messages[math.random(1, 3)], false, "Innocent", false, true ) else game.ReplicatedStorage.Events.PlayerChatted:FireServer( getgenv().nanohub.Misc.Chat.SpamMessage, false, "Innocent", false, true ) end end if getgenv().nanohub.Misc.Guns.Enabled then if table.find(getgenv().nanohub.Misc.Guns.Mods, "firerate") then client.DISABLED = false end if table.find(getgenv().nanohub.Misc.Guns.Mods, "ammo") then client.ammocount = 99e9 client.primarystored = 99e9 client.ammocount2 = 99e9 client.secondarystored = 99e9 end if table.find(getgenv().nanohub.Misc.Guns.Mods, "recoil") then client.resetaccuracy() client.RecoilX = 0 client.RecoilY = 0 end end if getgenv().nanohub.Visuals.Watermark.Enabled then Watermark.Enabled = true local Text = "" local YSize = 16 local XOffset = 24 local Font = Enum.Font.Roboto local TextFormat = getgenv().nanohub.Visuals.Watermark.Format for i,v in pairs(TextFormat) do if #TextFormat == 1 then Text = getWatermarkArgument(v,RealFps) WaterFrame.Size = UDim2.new(0,TextService:GetTextSize(Text,YSize,Font,Vector2.new(700,0)).X + 24,0.032,0) WaterFrame.Position = UDim2.new(1,-WaterFrame.Size.X.Offset - XOffset,0,0) _Text.Text = Text _Text.Font = Font elseif #TextFormat >= 2 then if (i == #TextFormat) then Text = Text .. getWatermarkArgument(v,RealFps) else Text = Text .. getWatermarkArgument(v,RealFps) .. " | " end WaterFrame.Size = UDim2.new(0,TextService:GetTextSize(Text,YSize,Font,Vector2.new(700,0)).X + 24,0.032,0) WaterFrame.Position = UDim2.new(1,-WaterFrame.Size.X.Offset - XOffset,0,0) _Text.Text = Text _Text.Font = Font end end else Watermark.Enabled = false end if getgenv().nanohub.Misc.Animations.Enabled then if isAlive(Player) then if LoadedAnimation == nil then local Anim = Instance.new("Animation", Player.Character) Anim.AnimationId = animations[getgenv().nanohub.Misc.Animations.Selected] LoadedAnimation = Player.Character.Humanoid.Animator:LoadAnimation(Anim) LoadedAnimation.Looped = true LoadedAnimation.Priority = Enum.AnimationPriority.Action LoadedAnimation:Play(nil, nil, getgenv().nanohub.Misc.Animations.Speed) end end else if isAlive(Player) then if LoadedAnimation ~= nil then LoadedAnimation:Stop() LoadedAnimation = nil end end end if getgenv().nanohub.Misc.Client.InfMoney then Player.Cash.Value = 9e9 end if isAlive(Player) and getgenv().nanohub.Misc.Movement.EdgeJump then if Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall and Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then coroutine.wrap(function() RunService.RenderStepped:Wait() if isAlive(Player) and Player.Character.Humanoid:GetState() == Enum.HumanoidStateType.Freefall and Player.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then Player.Character.Humanoid:ChangeState("Jumping") end end)() end end for _,plr in pairs(game.Players:GetPlayers()) do if plr ~= Player and isAlive(plr) and plr.Character.HumanoidRootPart:FindFirstChild("oldPos") then coroutine.wrap(function() local pos = plr.Character.HumanoidRootPart.Position RunService.RenderStepped:Wait() if isAlive(plr) and plr ~= Player then if plr.Character.HumanoidRootPart:FindFirstChild("oldPos") then plr.Character.HumanoidRootPart.oldPos.Value = pos else local oldPos = Instance.new("Vector3Value", plr.Character.HumanoidRootPart) oldPos.Name = "oldPos" oldPos.Value = pos end end end)() end end if table.find(getgenv().nanohub.Visuals.Client.DisabledEffects, "blood") then client.splatterBlood = function() end else client.splatterBlood = oldSplatterBlood end if getgenv().nanohub.Visuals.Client.AlwaysNight then game.Lighting.TimeOfDay = 20 else game.Lighting.TimeOfDay = 12 end if getgenv().nanohub.Visuals.Client.Skybox ~= "none" then local skybox = game.Lighting:FindFirstChild("__skybox") or Instance.new("Sky") skybox.Parent = game.Lighting skybox.Name = "__skybox" skybox.SkyboxBk = skyboxes[getgenv().nanohub.Visuals.Client.Skybox].SkyboxBk skybox.SkyboxDn = skyboxes[getgenv().nanohub.Visuals.Client.Skybox].SkyboxDn skybox.SkyboxFt = skyboxes[getgenv().nanohub.Visuals.Client.Skybox].SkyboxFt skybox.SkyboxLf = skyboxes[getgenv().nanohub.Visuals.Client.Skybox].SkyboxLf skybox.SkyboxRt = skyboxes[getgenv().nanohub.Visuals.Client.Skybox].SkyboxRt skybox.SkyboxUp = skyboxes[getgenv().nanohub.Visuals.Client.Skybox].SkyboxUp else if game.Lighting:FindFirstChild("__skybox") then game.Lighting:FindFirstChild("__skybox"):Destroy() end end if getgenv().nanohub.Misc.Exploits.Dudos and isAlive(Player) then for i = 1, 77, 1 do for _, v in pairs(game.Players:GetPlayers()) do if isAlive(Player) and Player.Character:FindFirstChild("Gun") then for _,v in pairs(game.Players:GetPlayers()) do if isAlive(v) and v.Team ~= Player.Team and table.find(FriendList, v.Name) == nil then local Arguments = { [1] = v.Character.Head, [2] = v.Character.Head.Position, [3] = "Flip Knife", [4] = math.rad(1,100000), [5] = Player.Character.Gun, [8] = 10000, [9] = false, [10] = true, [11] = Vector3.new(), [12] = math.rad(1,100000), [13] = Vector3.new() } game.ReplicatedStorage.Events.HitPart:FireServer(unpack(Arguments)) end end end end end end if Camera:FindFirstChild("Arms") ~= nil then if getgenv().nanohub.Visuals.Viewmodel.Arms or getgenv().nanohub.Visuals.Viewmodel.Weapon then for i, v in pairs(Camera.Arms:GetChildren()) do if v:IsA("Model") and v:FindFirstChild("Left Arm") and v:FindFirstChild("Right Arm") and getgenv().nanohub.Visuals.Viewmodel.Arms then local RightArm = v["Right Arm"] local LeftArm = v["Left Arm"] local RightGlove = RightArm:FindFirstChild("Glove") or RightArm:FindFirstChild("RGlove") local LeftGlove = LeftArm:FindFirstChild("Glove") or LeftArm:FindFirstChild("LGlove") local RightSleeve = RightArm:FindFirstChild("Sleeve") or nil local LeftSleeve = LeftArm:FindFirstChild("Sleeve") or nil RightArm.Transparency = getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency RightArm.Reflectance = 0 RightArm.Mesh.TextureId = "" RightArm.Color = getgenv().nanohub.Visuals.Viewmodel.ArmsColor LeftArm.Transparency = getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency LeftArm.Reflectance = 0 LeftArm.Mesh.TextureId = "" LeftArm.Color = getgenv().nanohub.Visuals.Viewmodel.ArmsColor RightGlove.Transparency = getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency RightGlove.Reflectance = 0 RightGlove.Mesh.TextureId = "" RightGlove.Color = getgenv().nanohub.Visuals.Viewmodel.ArmsColor LeftGlove.Transparency = getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency LeftGlove.Reflectance = 0 LeftGlove.Mesh.TextureId = "" LeftGlove.Color = getgenv().nanohub.Visuals.Viewmodel.ArmsColor if getgenv().nanohub.Visuals.Viewmodel.HideGloves then RightGlove.Transparency = 1 LeftGlove.Transparency = 1 end if RightSleeve and LeftSleeve then RightSleeve.Transparency = getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency RightSleeve.Reflectance = 0 RightSleeve.Mesh.TextureId = "" RightSleeve.Color = getgenv().nanohub.Visuals.Viewmodel.ArmsColor LeftSleeve.Transparency = getgenv().nanohub.Visuals.Viewmodel.ArmsTransparency LeftSleeve.Reflectance = 0 LeftSleeve.Mesh.TextureId = "" LeftSleeve.Color = getgenv().nanohub.Visuals.Viewmodel.ArmsColor if getgenv().nanohub.Visuals.Viewmodel.HideSleeves then RightSleeve.Transparency = 1 LeftSleeve.Transparency = 1 end end end if v:IsA("BasePart") and v.Name ~= ("Right Arm" or "Left Arm" or "Flash") and v.Transparency ~= 1 and getgenv().nanohub.Visuals.Viewmodel.Weapon then local Weapons = v if Weapons:IsA("MeshPart") then Weapons.TextureID = "" end if Weapons:FindFirstChildOfClass("SpecialMesh") then Weapons:FindFirstChildOfClass("SpecialMesh").TextureId = "" end Weapons.Transparency = getgenv().nanohub.Visuals.Viewmodel.WeaponTransparency Weapons.Reflectance = 0 Weapons.Color = getgenv().nanohub.Visuals.Viewmodel.WeaponColor if getgenv().nanohub.Visuals.Viewmodel.WeaponMaterial ~= "none" then Weapons.Material = getgenv().nanohub.Visuals.Viewmodel.WeaponMaterial end end end end end if getgenv().nanohub.Visuals.Players.SkeletonEsp then for _,plr in pairs(game.Players:GetPlayers()) do if (getgenv().nanohub.Visuals.Players.Teammates == true and Player ~= plr or plr.Team ~= Player.Team) then if isAlive(plr) then local function Line() local ln = Drawing.new("Line") ln.Visible = false ln.From = Vector2.new(0, 0) ln.To = Vector2.new(1, 1) ln.Color = getgenv().nanohub.Visuals.Players.SkeletonEspColor ln.Thickness = 2 ln.Transparency = 1 return ln end if skeleton[plr.Name] == nil then skeleton[plr.Name] = {} end local head_ut = skeleton[plr.Name]["head_ut"] or Line() local ut_lt = skeleton[plr.Name]["ut_lt"] or Line() local ut_lua = skeleton[plr.Name]["ut_lua"] or Line() local lua_lwa = skeleton[plr.Name]["lua_lwa"] or Line() local lwa_lh = skeleton[plr.Name]["lwa_lh"] or Line() local ut_rua = skeleton[plr.Name]["ut_rua"] or Line() local rua_rla = skeleton[plr.Name]["rua_rla"] or Line() local rla_rh = skeleton[plr.Name]["rla_rh"] or Line() local lt_lul = skeleton[plr.Name]["lt_lul"] or Line() local lul_lll = skeleton[plr.Name]["lul_lll"] or Line() local lll_lf = skeleton[plr.Name]["lll_lf"] or Line() local lt_rul = skeleton[plr.Name]["lt_rul"] or Line() local rul_rll = skeleton[plr.Name]["rul_rll"] or Line() local rll_rf = skeleton[plr.Name]["rll_rf"] or Line() skeleton[plr.Name]["head_ut"] = head_ut skeleton[plr.Name]["ut_lt"] = ut_lt skeleton[plr.Name]["ut_lua"] = ut_lua skeleton[plr.Name]["lua_lwa"] = lua_lwa skeleton[plr.Name]["lwa_lh"] = lwa_lh skeleton[plr.Name]["ut_rua"] = ut_rua skeleton[plr.Name]["rua_rla"] = rua_rla skeleton[plr.Name]["rla_rh"] = rla_rh skeleton[plr.Name]["lt_lul"] = lt_lul skeleton[plr.Name]["lul_lll"] = lul_lll skeleton[plr.Name]["lll_lf"] = lll_lf skeleton[plr.Name]["lt_rul"] = lt_rul skeleton[plr.Name]["rul_rll"] = rul_rll skeleton[plr.Name]["rll_rf"] = rll_rf local function setVisible(val) for _,v in pairs(skeleton[plr.Name]) do v.Visible = val end end for _,v in pairs(skeleton[plr.Name]) do v.Color = getgenv().nanohub.Visuals.Players.SkeletonEspColor end local _, onScreen = Camera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position) if onScreen then local head_pos = Camera:WorldToViewportPoint(plr.Character.Head.Position) if skeleton[plr.Name]["head_ut"].From ~= Vector2.new(head_pos.X, head_pos.Y) then local UT = Camera:WorldToViewportPoint(plr.Character.UpperTorso.Position) local LT = Camera:WorldToViewportPoint(plr.Character.LowerTorso.Position) local LUA = Camera:WorldToViewportPoint(plr.Character.LeftUpperArm.Position) local LLA = Camera:WorldToViewportPoint(plr.Character.LeftLowerArm.Position) local LH = Camera:WorldToViewportPoint(plr.Character.LeftHand.Position) local RUA = Camera:WorldToViewportPoint(plr.Character.RightUpperArm.Position) local RLA = Camera:WorldToViewportPoint(plr.Character.RightLowerArm.Position) local RH = Camera:WorldToViewportPoint(plr.Character.RightHand.Position) local LUL = Camera:WorldToViewportPoint(plr.Character.LeftUpperLeg.Position) local LLL = Camera:WorldToViewportPoint(plr.Character.LeftLowerLeg.Position) local LF = Camera:WorldToViewportPoint(plr.Character.LeftFoot.Position) local RUL = Camera:WorldToViewportPoint(plr.Character.RightUpperLeg.Position) local RLL = Camera:WorldToViewportPoint(plr.Character.RightLowerLeg.Position) local RF = Camera:WorldToViewportPoint(plr.Character.RightFoot.Position) skeleton[plr.Name]["head_ut"].From = Vector2.new(head_pos.X, head_pos.Y) skeleton[plr.Name]["head_ut"].To = Vector2.new(UT.X, UT.Y) skeleton[plr.Name]["ut_lt"].From = Vector2.new(UT.X, UT.Y) skeleton[plr.Name]["ut_lt"].To = Vector2.new(LT.X, LT.Y) skeleton[plr.Name]["ut_lua"].From = Vector2.new(UT.X, UT.Y) skeleton[plr.Name]["ut_lua"].To = Vector2.new(LUA.X, LUA.Y) skeleton[plr.Name]["lua_lwa"].From = Vector2.new(LUA.X, LUA.Y) skeleton[plr.Name]["lua_lwa"].To = Vector2.new(LLA.X, LLA.Y) skeleton[plr.Name]["lwa_lh"].From = Vector2.new(LLA.X, LLA.Y) skeleton[plr.Name]["lwa_lh"].To = Vector2.new(LH.X, LH.Y) skeleton[plr.Name]["ut_rua"].From = Vector2.new(UT.X, UT.Y) skeleton[plr.Name]["ut_rua"].To = Vector2.new(RUA.X, RUA.Y) skeleton[plr.Name]["rua_rla"].From = Vector2.new(RUA.X, RUA.Y) skeleton[plr.Name]["rua_rla"].To = Vector2.new(RLA.X, RLA.Y) skeleton[plr.Name]["rla_rh"].From = Vector2.new(RLA.X, RLA.Y) skeleton[plr.Name]["rla_rh"].To = Vector2.new(RH.X, RH.Y) skeleton[plr.Name]["lt_lul"].From = Vector2.new(LT.X, LT.Y) skeleton[plr.Name]["lt_lul"].To = Vector2.new(LUL.X, LUL.Y) skeleton[plr.Name]["lul_lll"].From = Vector2.new(LUL.X, LUL.Y) skeleton[plr.Name]["lul_lll"].To = Vector2.new(LLL.X, LLL.Y) skeleton[plr.Name]["lll_lf"].From = Vector2.new(LLL.X, LLL.Y) skeleton[plr.Name]["lll_lf"].To = Vector2.new(LF.X, LF.Y) skeleton[plr.Name]["lt_rul"].From = Vector2.new(LT.X, LT.Y) skeleton[plr.Name]["lt_rul"].To = Vector2.new(RUL.X, RUL.Y) skeleton[plr.Name]["rul_rll"].From = Vector2.new(RUL.X, RUL.Y) skeleton[plr.Name]["rul_rll"].To = Vector2.new(RLL.X, RLL.Y) skeleton[plr.Name]["rll_rf"].From = Vector2.new(RLL.X, RLL.Y) skeleton[plr.Name]["rll_rf"].To = Vector2.new(RF.X, RF.Y) end setVisible(true) else setVisible(false) end else if skeleton[plr.Name] ~= nil then for _, v in pairs(skeleton[plr.Name]) do v:Remove() end skeleton[plr.Name] = nil end end end end end local mousePos = UIS:GetMouseLocation() local mouse = Player:GetMouse() FOVCircle.Radius = getgenv().nanohub.Legit.SilentAimbot.FOV FOVCircle.Position = mousePos _cursor.Visible = UILib.MainFrame.Visible _cursor.Position = UDim2.new(0, mouse.X - 28, 0, mouse.Y - 27) FriendList = string.split(readfile("Nanohub/CBRO/Friendlist.xyz"), "\n") UIS.MouseBehavior = (UILib.MainFrame.Visible and Enum.MouseBehavior.Default or Enum.MouseBehavior.LockCenter) end) game.Players.PlayerAdded:Connect(function(plr) plr.CharacterAdded:Connect(function(char) repeat wait() until isAlive(plr) local oldPos = Instance.new("Vector3Value", char.HumanoidRootPart) oldPos.Name = "oldPos" oldPos.Value = char.HumanoidRootPart.Position end) end) game.Players.PlayerRemoving:Connect(function(plr) if skeleton[plr.Name] ~= nil then for _,v in pairs(skeleton[plr.Name]) do v:Remove() end skeleton[plr.Name] = nil end end) for _, plr in pairs(game.Players:GetPlayers()) do if plr ~= Player then plr.CharacterAdded:Connect(function(char) repeat wait() until isAlive(plr) local oldPos = Instance.new("Vector3Value", char.HumanoidRootPart) oldPos.Name = "oldPos" oldPos.Value = char.HumanoidRootPart.Position end) end end local fakeAnim = Instance.new("Animation", workspace) fakeAnim.AnimationId = "rbxassetid://0" function CreateBulletTracer(pos) local BulletTracers = Instance.new("Part") BulletTracers.Anchored = true BulletTracers.CanCollide = false BulletTracers.Material = "ForceField" BulletTracers.Color = getgenv().nanohub.Visuals.Client.BulletTracersColor BulletTracers.Size = Vector3.new(0.2, 0.2, (Player.Character.Head.CFrame.p - pos).magnitude) BulletTracers.CFrame = CFrame.new(Player.Character.Head.CFrame.p, pos) * CFrame.new(0, 0, -BulletTracers.Size.Z / 2) BulletTracers.Name = "BulletTracers" BulletTracers.Parent = workspace.CurrentCamera spawn(function() TweenService:Create(BulletTracers, TweenInfo.new(3), {Transparency = 1}):Play() wait(3.1) BulletTracers:Destroy() end) end Player.CharacterAdded:Connect(function(char) LoadedAnimation = nil SelfObj = {} repeat wait() until char:FindFirstChild("Head") and char:FindFirstChild("Gun") if CharChanger:Get()[1] ~= "Default" then ChangeCharacter(CharModels:FindFirstChild(CharChanger:Get()[1])) end end) local link = "https://idkimwebsite.000webhostapp.com" hookfunction(rconsoleprint, newcclosure(function(str) return rconsoleclose() end)) local oldPrint = print hookfunction(print, newcclosure(function(...) local args = {...} for _,v in pairs(args) do pcall(function() if tostring(v):find(link) then return game:Shutdown() end end) end return oldPrint(args) end)) local oldWarn = warn hookfunction(warn, newcclosure(function(...) local args = {...} for _,v in pairs(args) do pcall(function() if tostring(v):find(link) then return game:Shutdown() end end) end return oldWarn(args) end)) local oldError = error hookfunction(error, newcclosure(function(...) local args = {...} for _,v in pairs(args) do pcall(function() if tostring(v):find(link) then return game:Shutdown() end end) end return oldError(args) end)) local meta = getrawmetatable(game) local Oldnamecall = meta.__namecall local oldIndex = meta.__index local oldNewindex = meta.__newindex setreadonly(meta, false) meta.__namecall = newcclosure(function(self,...) local args = {...} local method = getnamecallmethod() if method == "FindPartOnRayWithIgnoreList" and args[2][1] == workspace.Debris then if getgenv().nanohub.Rage.Aimbot.Enabled and RageHitpart ~= nil and Player.Character then local _ = workspace.CurrentCamera.CFrame.p args[1] = Ray.new(_, CFrame.new(_, RageHitpart.CFrame.p).lookVector.unit * 9999) end elseif method == "FireServer" and self.Name == "HitPart" then if getgenv().nanohub.Rage.Aimbot.Prediction ~= "off" and RageHitpart ~= nil then if getgenv().nanohub.Rage.Aimbot.Prediction == "cframe" then coroutine.wrap(function() if game.Players:GetPlayerFromCharacter(args[1].Parent) or args[1] == RageHitpart then local vel = (RageHitpart.Parent.HumanoidRootPart.Position - RageHitpart.Parent.HumanoidRootPart.oldPos.Value)/OldFps local direction = Vector3.new(vel.X/vel.magnitude, 0, vel.Z/vel.magnitude) if vel.magnitude >= 9 then args[2] = args[2] + direction * (Ping / math.pow(Ping, 1.5)) * (direction / (direction / 2)) args[4] = 0 args[12] -= 500 end end end)() end end if getgenv().nanohub.Visuals.Client.BulletTracers then CreateBulletTracer(args[2]) end end if not checkcaller() then if method == "Kick" then return elseif method == "FindPartOnRayWithIgnoreList" and args[2][1] == workspace.Debris then if getgenv().nanohub.Legit.SilentAimbot.Enabled and Player.Character and LegitHitpart ~= nil then local _ = Player.Character.HumanoidRootPart.CFrame.p + Vector3.new(0, 1.4, 0) args[1] = Ray.new(_, CFrame.new(_, LegitHitpart.CFrame.p).lookVector.unit * 9999) end elseif method == "FireServer" then if self.Name == "ControlTurn" and getgenv().nanohub.Rage.AntiAim.Enabled then local Pitch = getgenv().nanohub.Rage.AntiAim.Pitch local Angle = (Pitch == "Up" and 1 or Pitch == "Down" and -1 or Pitch == "Boneless" and -5) if Angle ~= nil then args[1] = Angle end elseif self.Name == "PlayerChatted" then if string.sub(args[1]:lower(), 1, 1) == "." then local cmd = string.sub(args[1]:lower(), 2, -1) if cmd == "gui" then Window:Toggle() args[1] = "" end end end elseif method == "LoadAnimation" then if getgenv().nanohub.Visuals.Character.NoAnimations then args[1] = fakeAnim end elseif method == "FindPartOnRayWithIgnoreList" and args[2][1] == workspace.Debris then if getgenv().nanohub.Misc.Guns.Enabled then if table.find(getgenv().nanohub.Misc.Guns.Mods, "spread") and client.gun ~= "none" then Camera = workspace.CurrentCamera args[1] = Ray.new(Camera.CFrame.p, Camera.CFrame.LookVector * client.gun.Range.Value) end end elseif method == "SetPrimaryPartCFrame" and self.Name == "Arms" then if getgenv().nanohub.Visuals.Viewmodel.Enabled then args[1] = args[1] * CFrame.new( Vector3.new( math.rad(getgenv().nanohub.Visuals.Viewmodel.X-180), math.rad(getgenv().nanohub.Visuals.Viewmodel.Y-180), math.rad(getgenv().nanohub.Visuals.Viewmodel.Z-180)) ) * CFrame.Angles(0, 0, math.rad(getgenv().nanohub.Visuals.Viewmodel.Roll-180)) end end end return Oldnamecall(self, unpack(args)) end) meta.__newindex = newcclosure(function(self, idx, val) if idx == "Text" and val == Player.Name then if getgenv().nanohub.Visuals.Yourself.HideName then val = "nanohub.xyz | .gg/Pm4ubcNfbF" end elseif self == workspace.CurrentCamera and idx == "FieldOfView" and getgenv().nanohub.Visuals.Client.FOVChanger and Player.PlayerGui.GUI.Crosshairs.Scope.Visible == false then val = getgenv().nanohub.Visuals.Client.FOV for _,v in pairs(viewmodelsFolder:GetChildren()) do if v:FindFirstChild("HumanoidRootPart") and v.HumanoidRootPart.Transparency ~= 1 then v.HumanoidRootPart.Transparency = 1 end end elseif idx == "MouseBehavior" and UILib.MainFrame.Visible == true then val = Enum.MouseBehavior.Default elseif idx == "Text" then if getgenv().nanohub.Misc.Client.InfMoney and val == "$" .. tostring(Player.Cash.Value) or val == tostring(Player.Cash.Value) and getgenv().nanohub.Misc.Client.InfMoney then val = "inf bananas" elseif val == 99e9 or val == 99e9 - 1 or val == 99e9 - 2 then val = "-inf" end end return oldNewindex(self, idx, val) end) Window:Toggle() if _VERSION ~= _MAXVERSION then local copy = Window:Warning("You are running outdated version, copy discord invite?") if copy then setclipboard(game:HttpGet("https://idkimwebsite.000webhostapp.com/discord")) end end